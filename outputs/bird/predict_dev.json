[
  [
    "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
    "INSERT INTO \"main\".\"frpm\" (\"CDSCode\", \"id\") VALUES ('your CDS code here', 'your id'); alter table main.frpm add constraint frpm_CDS_key foreign key (cds) references main.schools(CdsCode); alter table main.frpm add constraint frpm_id_key foreign key (id) references public.frm_prcntg_cd(id);\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
    "SELECT s.EligibleFreeRate, s.CDSCode -- Assuming this is needed for further filtering or sorting FROM scs s WHERE s.EldestEdOpsCode = 'CON' ORDER BY s.EligibleFreeRate ASC LIMIT 3;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Please list the zip code of all the charter schools in Fresno County Office of Education.",
    "import sqlite3 # The query, adjusted for Python string formatting, # with support for multiline strings (using triple quotes) or using regular expressions directly in SQL syntax. query = ''' SELECT zip_code as ZipCode FROM zipcode # Adjusted table name from \"zipcodes\" to actual table schema compatibility and correct database handling within the environment provided JOIN fprm ON z.CDSCode = fprm.`CDSCode` WHERE EXISTS ( SELECT 1 FROM frfm AS f JOIN cache_frm AS cache ON f.CDSCode = cache.CDSCode WHERE cache.Charter_School = 'Y' AND cache.cnty_name = 'Fresno' INTERSECT SELECT z.CDSCode FROM zipcode AS z ) ''' # Execute the query with the corrected SQL syntax. db = sqlite3.connect('your_database.db') cursor = db.cursor() try: cursor.execute(query) except sqlite3.OperationalError as e: print(f\"An error occurred: {e}\") result = cursor.fetchall() if result: for item in result: print(item[0]) # Since ZipCode was selected from 'zipcode' table, adjust as necessary based on actual requirements. else: print(\"No results found.\") db.close()\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the unabbreviated mailing address of the school with the highest FRPM count for K-12 students?",
    "INSERT INTO schools (CDSCode, GSoffered, row_num) SELECT D.CDSCode, G.GSoffered, R.r AS row_num FROM ( SELECT ROW_NUMBER() OVER () as r FROM ( WITH RECURSIVE counts AS ( SELECT 1 AS counter UNION ALL SELECT counter + 1 FROM counts WHERE counter < (SELECT count(*) FROM schools) ) SELECT counter, max(CASE WHEN GSoffered = 'K-5' THEN counter ELSE NULL END) as \"K-5\", max(CASE WHEN GSoffered = '6-8' THEN counter ELSE NULL END) as \"6-8\", ... other similar lines for different possible values of `GSoffered` FROM counts ) c cross join lateral ( values (c.\"K-5\", c.k-1), (c.\"6-8\", c.k-4), ..., # same as above but for others like '9-12' (...other similar lines) # like below but continue adding for more possible GS offered values ) v(counter, \"GSoffered AS r\") FROM counts LEFT JOIN ( )\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.",
    "SELECT * FROM ( SELECT CASE WHEN `Charter School (Y/N)` = 'Y' THEN 'Yes' ELSE 'No' END AS Charter_School, FUNDINGTYPE, SUBSTR(`Last Update`, 1, INSTR(`Last Update`, '-') - 1) AS Last_Year FROM frpm WHERE `Charter School (Y/N)` = 'Y' AND FUNDINGTYPE = '00D4' AND SUBSTR(`Last Update`, 1, 4) > '2000' ) AS more_filtered_schools;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "How many schools with an average score in Math under 400 in the SAT test are exclusively virtual?",
    "SELECT COUNT(*) FROM frpm AS s JOIN schoolscores AS ss ON s.CDSCode = ss.cds WHERE ss.Math_Score < 400 AND s.Virtual = 'F';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.",
    "SELECT COUNT(DISTINCT CDSCode) AS TotalCount FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.Magnet = 1 AND satstakers > 500;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
    "SELECT subquery.cds_code, subquery.sum_score AS sum_score, subquery.count_score AS count_score FROM ( SELECT schools.`CDSCode`, SUM(sc.`total_score`) AS sum_score, COUNT(*) AS count_score, FROM schools INNER JOIN satscores sc ON schools.`cds` = sc.`cds` GROUP BY schools.cds_code ) AS subquery JOIN schools ON subquery.sum_score = (SELECT SUM(t2.total_score) FROM `schools` t2 INNER JOIN satscores t3 ON t3.`cds` = t2.`cds` GROUP BY t2.cds_code ORDER BY count(*) DESC LIMIT 1) AND subquery.cds_code = schools.cds_code;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?",
    "SELECT schools.Name, satscores.sat_score, frpm.FScore FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode INNER JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY (frpm.FScore + sat_scores) DESC LIMIT 1;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?",
    "SELECT COUNT(*) FROM ( SELECT f.cdscode, s.FundingType, AVG(m09) AS avg_score FROM schools f JOIN satscores s ON f.CDSCode = s.cds GROUP BY f.cdscode, s.FundingType ) joined HAVING FundingType = 'Directly Funded' AND avg_score > 560;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?",
    "SELECT AVG(T3.reading_score) AS avg_reading_score FROM schools T1, frpm T2, ( SELECT reading_score, schoolid, level_ FROM satscores A WHERE (A.cds, A.level_) IN ( SELECT schoolid, level_ FROM (SELECT schoolid, MAX(level_) AS highest_level FROM satscores GROUP BY schoolid) B) ) T3 WHERE T1.CDSCode = T2.`CDSCode` AND T2.school_name = T3.schoolid;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Please list the codes of the schools with a total enrollment of over 500.",
    "SELECT s.cdscode, f.`(Enrollment(K-12)+Enrollment(Ages 5-17))` AS total_enrollment FROM schools as s JOIN frpm AS f ON (s.CDSCode = f.`CDSCode`) WHERE f.`(Enrollment(K-12)+Enrollment(Ages 5-17))` > 500;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "SELECT MAX(f.Actual_number_of_students_eligible_for_free_meals / f.TotalNumber_of_Full_time_equivalent_classifiedStudents_K-12_'''School''') AS HighestEligibleFreeRate FROM frpm f JOIN schools ON f.CDSCode = schools.CDSCode WHERE ExcellenceRate > 0.3;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Please list the phone numbers of the schools with the top 3 SAT excellence rate.",
    "SELECT spn.Phone FROM schools s JOIN ( -- Add join condition for satcores and replace function SELECT sc.CDSCode, (sc.tstTakr2003 - (sc.noTestScorer2003 + sc.absent2003)) * 1.0 / sc.test_taker2003 AS rate, ROW_NUMBER() OVER (ORDER BY (sc.tstTakr2003 - (sc.noTestScorer2003 + sc.absent2003)) * 1.0 / sc.test_taker2003 DESC) AS rank FROM satscores sc ) sr ON s.CDSCode = REPLACE(sr.CDSCode, '-', '') AND sr.rank <= 3;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
    "SELECT CDSCode, Sum ( CASE WHEN Charter = 'Yes' THEN 0 ELSE 1 END + CASE WHEN FundingType > '1000' THEN 2 ELSE 0 END + CASE WHEN SOC NOT IN ('10') THEN 3 ELSE 0 END + CASE WHEN EdOpsCode = 'TRAD' THEN 16 ELSE 0 END + CASE WHEN EILCode NOT LIKE '%ELEM%' AND EILCode NOT LIKE '%A%' THEN 64 ELSE 0 END ) AS enrollment_sum FROM schools GROUP BY CDSCode ORDER BY enrollment_sum DESC LIMIT 5;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Which active district has the highest average score in Reading?",
    "SELECT s.CDSCode, ss.avg_score AS avg_score FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds AND (ss.test_year=2014 OR ss.test_year=2015) WHERE s.Status = 'A' AND ss.type='R' GROUP BY s.CDSCode ORDER BY ss.avg_score DESC;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "How many schools in merged Alameda have number of test takers less than 100?",
    "SELECT s.name FROM schools AS s LEFT JOIN satscores AS ss ON s.CDS = ss.cds WHERE (s.SOC IN ('60', '66') OR s.DOC = '54') GROUP BY s.name HAVING SUM(CASE WHEN ss.total_tests < 100 THEN 1 ELSE 0 END) > 0;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the charter number of the school that the average score in Writing is 499?",
    "SELECT schools.CDSCode, schools.EDOpsCode FROM schools WHERE schools.EdOpsCode IN ('54','52','98','02','00');\t----- bird -----\tcalifornia_schools"
  ],
  [
    "How many schools in Contra Costa (directly funded) have number of test takers not more than 250?",
    "SELECT COUNT(num_tests_taken.num_of_tests_taken) AS num_tests FROM schools RIGHT JOIN CDSData ON schools.CDSCode = CDSData.cdscode JOIN num_tests_taken ON schools.CDSCode = num_tests_taken.cds_code WHERE schools.funding_type = 'Directly funded' AND num_tests_taken.num_of_tests_taken <= 250;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the phone number of the school that has the highest average score in Math?",
    "SELECT t2.CDSCode, AVG(t1.TotalPointsAvg) as Avg_SatScore -- using t1.TotalPointsAvg instead of summing individual scores FROM satscores t1 JOIN schools t2 ON t1.cds = t2.cds -- assuming cds is the primary key for matching records in both tables GROUP BY t2.CDSCode ORDER BY Avg_SatScore DESC LIMIT 1;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
    "error: No SQL found in the input string\t----- bird -----\tcalifornia_schools"
  ],
  [
    "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
    "SELECT COUNT(edu.ID_Campus) FROM attendance_data edu INNER JOIN school_ssat_scores schl ON edu.CDScode = schl.CDSCode # Assuming correct table name for SAT scores WHERE schl.GSoffered = 'K-12' AND schl.City = 'Los Angeles' AND edin.FreeM > '500' AND edun.SumFrPmealsBwt < '700';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Which school in Contra Costa has the highest number of test takers?",
    "PRAGMA foreign_keys = ON;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "SELECT frpm.`CDSCode` FROM schools INNER JOIN cs ON schools.`CDSCode` = cs.`cds` GROUP BY frpm.`CDSCode`, schools.`CDSCode`, cs.`d` HAVING COUNT(cs.`d`) > 30;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "-- Corrected SQL Query CREATE TABLE schools ( CDSCode TEXT, DOCType TEXT, SOC TEXT, SOCType TEXT, EdOpsCode TEXT, EdOpsName TEXT, EILCode TEXT, EILName TEXT, GSoffered TEXT, GSserved TEXT, Virtual TEXT, Magnet INTEGER, Latitude REAL, Longitude REAL, AdmFName1 TEXT, AdmLName1 TEXT, AdmEmail1 TEXT, AdmFName2 TEXT, AdmLName2 TEXT, AdmEmail2 TEXT, AdmFName3 TEXT, AdmLName3 TEXT, AdmEmail3 TEXT, LastUpdate DATE ); CREATE TABLE satscores ( cds TEXT, score REAL, SATname TEXT, SchoolName TEXT ); ALTER TABLE schools ADD FOREIGN KEY (CDSCode) REFERENCES satscores(CDS);\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "SELECT * FROM ( SELECT frpm.cdscode, COUNT(sat_scores.csco) as sat_count, SUM(sat_scores.m200) * (CASE WHEN ELLScores.low200 IS NULL THEN 0 ELSE ELLScores.low200 END) / 2 AS avg_score_1, s.schtyp, T.district_name, frpm.funding_type, ROW_NUMBER() OVER (PARTITION BY frpm.funding_type ORDER BY s.avg_score_1 DESC) AS rn FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode JOIN sat_scores AS ss ON schools.cdscode = ss.csco JOIN ELLScores ON schools.cdscode = ELLScores.csco LEFT JOIN T ON schools.district_name = T.district_name AND schools.schtyp = T.schtyp WHERE schools.schtyp <= 'J' AND frpm.CharNum IN ('1826', '1710') AND ELLScores.block_code = '00071' AND frpm.funding_type IS NOT NULL GROUP BY frpm.charter, schools.district_name, s.schtyp, frpm.funding_type )\t----- bird -----\tcalifornia_schools"
  ],
  [
    "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "SELECT distinct s.* FROM schools s JOIN Freereducers fr ON (s.CDSCode = fr.CDSCode) WHERE CAST(fr.age_group as int) BETWEEN 15 AND 17 AND s.County LIKE '%Monterey%' GROUP BY s.CDSCode HAVING COUNT(*) > 0;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "error: No SQL found in the input string\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "-- Step 1: Get data for step 1 - Calculate the average difference WITH schools AS ( SELECT s.cds, s.Enrollment_K_12, s.Enrollment_S_17 FROM schools s ) SELECT AVG(Enrollment_K_12 - Enrollment_S_17) AS avg_diff FROM schools; -- Step 2: Select only locally funded schools for step 3 and 4 WITH school_type AS ( SELECT c.Doc, schtype.Description AS DocType FROM char c JOIN schtype ON c.Doctype = schtype.DocType ), scores AS ( SELECT e.cds, s.Enrollment_K_12, s.Enrollment_S_17 -- Filter for locally funded scores only FROM school_type st JOIN schools s ON st.Docs = s.cds AND st.docs IS NOT NULL ) SELECT * FROM scores; -- Step 3: Select schools above average difference from previous step. WITH locally_funded_schools AS ( SELECT cs.Doc, cs.Doctype, cs.County, -- get this value from char table instead of c.COUNTY cs.City, cs.AdmFName1, cs.SchoolType1,e.Enrollment_K_12, e.Enrollment_S_17, (e.Enrollment_K_12-e.Enrollment_S_17) AS Diff, -- Removed Renrrollmemnt and corrected 'S' to lowercase schools.* FROM school_type st JOIN scores s ON s.cds = st.Docs AND cs.doc = sc.docs ) SELECT * FROM locally_funded_schools;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "When did the first-through-twelfth-grade school with the largest enrollment open?",
    "SELECT DISTINCT MIN(T.LastUpdate) AS First_K12_ClosedDate FROM ( SELECT DISTINCT T2.CDSCode, MAX( CASE WHEN T3.Document = '00D0' AND T3.EducationType IS NULL AND School.State = 1 THEN NULL ELSE LAST_UPDATED END ) AS LastUpdate FROM schools AS School JOIN satscores_frpm T2 ON (School.CDSCode || '000') = T2.code JOIN schools ON School.CDSCode = CDSCode LEFT JOIN documents T3 ON CAST(SUBSTR(CDSCode, 5) AS INTEGER) = T3.doc WHERE School.Name LIKE '%K-%12%' AND (School.ClosedDate IS null OR School.ClosedDate > '20050101') AND ((T2.fundingtype IS NULL OR (Fundingtype - 'Directly funded' + '00D0') != '0000')) AND ( (T3.Document = '00D0' AND T3.EducationType IS NULL AND School.State = 1) OR ( T4.code = T3.document AND CAST(SUBSTR(CDSCode, 5) AS INTEGER)=-999999 AND Fundingtype=T4.type AND Name LIKE '%K-%12%' AND (EdOps = 'TRAD' OR EdOps is NULL) ) ) GROUP BY T2.CDSCode ) T;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
    "SELECT T1.CDSCode, T1.GSoffered AS GSnumber FROM schools T1 WHERE T1.GSoffered = 'K-12';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "SELECT schools.*, (frpm.FMAP / schools.EnrollK12) AS eligible_free_rate FROM schools JOIN frpm ON schools.`CDSCode` = frpm.`CDSCode` WHERE frpm.GSserved = 'K-12' ORDER BY (frpm.FMAP / schools.EnrollK12) DESC LIMIT 2;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "WITH school_ranking AS ( SELECT DISTINCT CDSCode, (FRPM_k_12 / Enrollment) AS FRPM_RATE, (SELECT COUNT(DISTINCT CDSCode) FROM schools WHERE DOC = '66' AND CDSCode = s1.CDSCode) AS FRPM_COUNT, (SELECT Enrollment_K_12 FROM schools WHERE DOC = '66' AND CDSCode = s1.CDSCode) AS Enrollment FROM schools WHERE DOC = '66' ) SELECT CDSCode, FRPM_RATE, FRPM_COUNT, Enrollment FROM school_ranking ORDER BY FRPM_RATE DESC LIMIT 5;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.",
    "WITH IdentifiedSchools AS ( SELECT DISTINCT s.CDSCode FROM schools s WHERE s.County BETWEEN 1900 AND 2000 ), CourseOffering AS ( SELECT DISTINCT s.CDSCode FROM courselist c JOIN schools s ON c.CDSCode = s.CDSCode WHERE c.AgeRange LIKE '%5-17%' ), LinkedData AS ( SELECT S.CDSCode, S.Name, SoC.SchoolOwnershipName --Join and filter as needed: FROM IdentifiedSchools I JOIN schools S ON I.CDSCode = S.CDSCode LEFT JOIN SOCs SoC ON CAST(S.SOC AS INTEGER) = SoC.unicode_id ) SELECT DISTINCT * FROM LinkedData;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?",
    "SELECT ((`free_lunch_reduction` - `free_lunch`) / `TotalStudents`) FROM schools WHERE (`CDSCode` = 'the_CDScode_of_school_managed_by_kacey');\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?",
    "-- Create table for schools information with constraints CREATE TABLE schools ( cds_code TEXT PRIMARY KEY, citycd NOT NULL UNIQUE); -- Ensure city_cd in schools references city_code in FRPM table ALTER TABLE schools ADD CONSTRAINT school_city_ck CHECK ((citycd) IN (SELECT cdn FROM frpm)); -- Create table for referencing schools' information from frpm and linking to schools via citycd CREATE TABLE frpm ( cdn TEXT NOT NULL PRIMARY KEY, citycd TEXT NOT NULL); -- Create trigger function in SQLite: it can insert data into schools CREATE TRIGGER school_insert_trigger BEFORE INSERT ON schools FOR EACH ROW BEGIN SELECT citycd INTO NEW.citycd FROM frpm WHERE cdn = NEW.citycd; END; -- Update trigger function to check for changes in citycd and signal an error if needed CREATE TRIGGER school_update_trigger AFTER UPDATE ON schools FOR EACH ROW WHEN (NEW.citycd AND (OLD.citycd IS DISTINCT FROM NEW.citycd)) THEN SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'citycd must be defined in schools table'; END; -- Create table for Satscores CREATE TABLE satscores( cds TEXT NOT NULL PRIMARY KEY, year INT NOT NULL, FOREIGN KEY (cds) REFERENCES schools(cds_code));\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Under whose administration does the school with the highest number of test takers whose total SAT Scores are greater or equal to 1500 belong to? Indicate his or her full name.",
    "SELECT s.CDSCode, COUNT(*) as NumGE1500 FROM schools AS s JOIN satscores AS ss ON s.CDSCode = ss.cds WHERE ss.NumGE1500 > 0 -- Note: changed to lower case 'N' and removed final '00' GROUP BY s.CDSCode ORDER BY NumGE1500 DESC LIMIT 1;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "error: No SQL found in the input string\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?",
    "SELECT DISTINCT s.WebPage FROM schools s INNER JOIN ( SELECT CDSCode, COUNT(student_id) as test_taker_count FROM satscores GROUP BY cds HAVING COUNT(student_id) BETWEEN 2000 AND 3000 ) fs ON s.CDSCode = fs.cds;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "error: No SQL found in the input string\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "error: No SQL found in the input string\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Which exclusively virtual schools have the top 5 highest average reading scores?",
    "SELECT * FROM \"table_name\" WHERE \"column1\" = '';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the type of education offered in the school who scored the highest average in Math?",
    "SELECT SocType FROM schools Avg AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.`CDSCode` ORDER BY T1.avg DESC;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
    "SELECT IFNULL(s.County_region, s.County_Name) AS County FROM schools s WHERE s.CDSCode IN ( SELECT CDSCode FROM top_score_schools );\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.",
    "CASE WHEN value IS NOT NULL THEN schools.DistrictName ELSE NULL END AS DistrictName\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "SELECT * FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode LEFT JOIN sat_school_scores as satscore ON schools.CDSCode = satscore.cds;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "SELECT schools.CDSCode, COUNT(*) AS EnrollmentCount FROM schools WHERE DOC = '31' AND GSserved LIKE '%K-12%' GROUP BY schools.CDSCode ORDER BY EnrollmentCount DESC;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "error: No SQL found in the input string\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "SELECT ROUND((SUM(CASE WHEN TYPE = \"56\" THEN 1 ELSE 0 END)*100./SUM(CASE WHEN TYPE = '52' THEN 1 ELSE 0 END )), AS REAL) FROM `satscores`;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "SELECT sc.schoolname, COUNT(s2.CDSCloseDate) as numclosed FROM cdsschools sc INNER JOIN schools s ON sc.CDSCode = s.CDSCode LEFT JOIN closedschools s2 ON s2.cds = sc.CDSCode AND s2.statusType = 'Closed' WHERE sc.Country IN ('France', 'Belgium') GROUP BY sc.schoolname ORDER BY numclosed DESC;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the postal street address for the school with the 6th highest Math average? Indicate the school's name.",
    "SELECT sch.Name as SchoolName, sch.PostalStreetAddress || ', ' || COALESCE(sch.City, '') || ', ' || COALESCE(sch.StateInitials, '') || ' ' || COALESCE(sch.ZipCode, '') as Address FROM schools sch JOIN satscores score ON sch.CDSCode = score.cds WHERE Mathavg = (SELECT MAX(Mathavg) FROM satscores);\t----- bird -----\tcalifornia_schools"
  ],
  [
    "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.",
    "SELECT sc.STREET, sc.CITY, sc.STATE, sc.ZIP, ts.READING_SCORE, tp.NAME AS SchoolName FROM schools sc JOIN test_scores ts ON sc.cdsCode = ts.cds LEFT JOIN funding_types fp ON sc.funding_type_id = fp.id /* You might need to adjust this line */ ORDER BY ts.READING_SCORE DESC;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?",
    "SELECT COUNT(DISTINCT schools.CDSCode) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.City = 'Lakeport' AND (satscores.Score_2022_Read + satscores.Score_2022_Math + satscores.Score_2022_Write) >= 1500 ;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "SELECT COUNT(*) FROM ( SELECT * FROM satscores WHERE cds IN ( SELECT CDSCode FROM schools WHERE DOC = '56' ) );\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.",
    "SELECT s.* FROM schools as s WHERE CDSCode IN ( SELECT CDSCode FROM students WHERE AdmLName1='Atoian' OR AdmLName2 = 'Atoian')\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
    "SELECT CAST(SUM(CASE WHEN MA.countyname IN ('Colusa County', 'Humboldt County') THEN 1 ELSE NULL END) AS REAL) / COUNT(DISTINCT S.CDSCode) FROM schools S INNER JOIN mailingaddress MA ON S.CDSCode = MA.sds_code;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Of all the schools with a mailing state address in California, how many are active in San Joaquin?",
    "SELECT COUNT(*) FROM frpm r JOIN schools s ON r.CDSCode = s.CDSCode WHERE r.State = 'CA' AND s.ActiveDate IS NOT NULL AND s.County= '09';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the phone number and extension number for the school that had the 333rd highest average writing score?",
    "WITH school_WritingAverage AS ( SELECT PERCENTILE_DISC(0.667) WITHIN GROUP (ORDER BY satscores.WritingAverage DESC) FROM satscores ), school_ranking AS ( SELECT *, ROW_NUMBER() OVER (ORDER BY WritingAverage DESC) AS roworder FROM (SELECT CDSCode, WritingAverage FROM satscores) AS scores )\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.",
    "SELECT name AS original_name, sql FROM sqlite_master WHERE type='table' AND name='schools';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?",
    "SELECT T3.website FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.cds_code INNER JOIN cds AS T3 ON T3.CDSCode = T2.cds_code WHERE (T2.CharterNum = '00D2' AND T2.FundingType = 'Directly funded') OR (T2.CharterNum = '1826' AND T2.FundingType = 'Locally funded');\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What are the websites for all the partially virtual chartered schools located in San Joaquin?",
    "WITH filtered_schools AS ( SELECT distinct Website , CDSCode, Virtual, Charter , Latitude FROM schools WHERE Virtual='P' AND Charter= 1 ) SELECT COUNT(DISTINCT `Website` ) AS Number_of_Schools FROM filtered_schools WHERE Latitude = '37.326390'\t----- bird -----\tcalifornia_schools"
  ],
  [
    "How many chartered schools located in the city of Hickman are owned by the Elementary School District?",
    "SELECT COUNT(*) FROM ( SELECT * FROM schools WHERE Charter = '1' ) AS chartered_schools WHERE DOC = '52';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "SELECT COUNT(*) FROM ( SELECT schools.CDSCode, schools Charter_Type, schools GSserved, frpm.FreeMealCount, schools.Enrollment FROM schools INNER JOIN frpm ON frpm.CDSCode = schools.CDSCode WHERE (schools.Charter_Type LIKE '000%' AND schools.Charter_Type IS NOT NULL) AND frpm.DOC = '00' AND SOUNDEX(stripped(frpm.GSserved)) != SOUNDEX('%K%') -- Using a soundex to make the comparison case insensitive UNION ALL SELECT schools.CDSCode, schools Charter_Type, schools GSserved, NULL AS FreeMealCount, schools.Enrollment FROM schools WHERE (schools.Charter_Type LIKE '000%' AND schools.Charter_Type IS NOT NULL) AND schools GSserved NOT LIKE '%K%' ) WHERE FRPM_FreeMealCount ISNULL OR TRYCAST(SUBSTR(FRPM_FreeMealCount, LENGTH(FRPM_FreeMealCount)-2, 3)) != '' AND ENROLLMENT ISNUMERIC()\t----- bird -----\tcalifornia_schools"
  ],
  [
    "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs",
    "SELECT (COALESCE(AdmFName1, '')) + (COALESCE(AdmLName1, '')) FROM schools;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?",
    "ALTER TABLE satscores ADD FOREIGN KEY (cds) REFERENCES schools(CDSCode);\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?",
    "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS float) / CAST(SUM(CASE WHEN fundingtype != \"Directly funded\" AND fundingtype IS NOT NULL THEN 1 ELSE 0 END) AS float) FROM schools WHERE DOC IN (\"54\")\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?",
    "SELECT COUNT(*) FROM schools WHERE CDSCode IN ( SELECT s2.CDSCode FROM schools s2 WHERE STATION_DATE BETWEEN '2000-01-01' AND '2005-12-31' AND FundingType = 1 <!-- Stanislaus County, assuming this funding type correctly represents it --> AND SOC = 42 <-- Stanislaus County ID --> );\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
    "SELECT COUNT(ClosedDate) AS CDS_count FROM schools WHERE Charter = 1 AND CLOSEDDATE LIKE '%1989-%';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?",
    "WITH filtered_schools AS ( SELECT T2.CDSCode FROM schools T1 INNER JOIN frpm T2 ON T1.`CDS_CODE` = T2.`CDSCode` WHERE T1.SOC = '11' ), schooleducationcounts_from_80s AS ( SELECT CountyName, COUNT(*) OVER (PARTITION BY CountyName) as Total_Mergers FROM school_closings WHERE SchoolID NOT IN ( SELECT distinct Id from Closures WHERE Type='reopening' ) AND CloseYear BETWEEN 1980 AND 1989 ) SELECT T1.CountyName, COALESCE(T3.Total_Mergers, 0) as Total_Mergers, COUNT(*) OVER (PARTITION BY CountyName ORDER BY CountOfClosures DESC) AS RankByClosingCount FROM schooleducationcounts_from_80s T1 WHERE CountyName IN ( SELECT distinct CDSCode FROM filtered_schools ) ORDER BY RankByClosingCount DESC; SELECT DISTINCT CountyName, Total_Mergers, CountOfClosures INTO #Top_County_Counting_The_Most_Merger_Since_1980_with_soc11 FROM schooleducationcounts_from_80s T1 WHERE CountyName IN ( SELECT distinct CDSCode FROM filtered_schools ) ; SELECT CountyName, Total_Mergers, CountOfClosures INTO #results FROM ( -- note the subquery SELECT * FROM (SELECT DISTINCT CountyName, Total_Mergers, CountOfClosures INTO #top_county FROM schooleducationcounts_from_80s WHERE CountyName IN ( SELECT distinct CDSCode FROM filtered_schools )) );\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.",
    "SELECT schools.`CDSCode` FROM schools WHERE schools.`SOC` = 31;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "How many active and closed District Community Day Schools are there in the county of Alpine?",
    "SELECT S.CDSCode, SUM(CASE WHEN S.ClosedDate IS NULL THEN 1 ELSE 0 END) AS Active, SUM(CASE WHEN S.ClosedDate IS NOT NULL AND S.ClosedDate <= DATE('now') THEN 1 ELSE 0 END) AS Closed FROM schools S WHERE (S.CountyName = 'Alpine County' AND EXISTS ( SELECT Soctype FROM SOC WHERE DOC IN ('00', S.DistrictOwnershipCode) AND Soctype LIKE '%District%' ) OR (SELECT DISTINCT SOC FROM SchoolOwnershipCode WHERE SOC IN ('60', '66')) IS NOT NULL) GROUP BY S.CDSCode;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the district code for the School that does not offer a magnet program in the city of Fresno?",
    "SELECT * FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE CAST(COALESCE(Magnet, 0) AS INTEGER) = 1;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "frpm.CDSCode = schools.CDSCode ... cds = schools.CDSCode\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?",
    "SELECT s.* FROM schools s WHERE (s.CDSCode = ? OR lower(s.name) LIKE ?) AND s.CDSCode IN ( SELECT cds FROM satscores );\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 613360?",
    "SELECT MIN(GSoffered) AS lowest_grade_span FROM schools WHERE CDSCode = '613360' AND GSofered IN ('K-5', '6-8');\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.",
    "SELECT T3.EILName FROM schools AS T1 INNER JOIN EdOps ON T1.EdOpsCode = EdOps.EDOPS // assuming correct table and column names INNER JOIN EIL ON T1.EILCode = EIL.EILCODE // assuming correct table and column names WHERE T1.BreakfastProvisionType = '02' AND T1.CountyCode=37;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?",
    "PRAGMA foreign_keys = ON; CREATE TABLE satscores ( cds TEXT PRIMARY KEY, sat_avg INTEGER, FOREIGN KEY (cds) REFERENCES schools(CDSCode) ); SELECT * FROM satscores;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "SELECT s,*, round((fs.Free_Meal_Count_Age_5_17 / s.Student_Population) * 100, 2) AS PercentEligibleFRPM FROM schools s INNER JOIN frpm_sols fs ON s.`CDSCode` = fs.cds AND s.Grant = fs.School Grant Code WHERE s.City = 'Los_Angeles' AND s.GSserved = 'K-9' AND fs.Free_Meal_Count_Age_5_17 IS NOT NULL;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the most common type of grade span served in the city of Adelanto?",
    "SELECT TYPEGSserved FROM -- First Filter and prepare table by City Adelanto ( SELECT DISTINCT GSserved AS TYPEGSserved FROM schools WHERE City = 'Adelanto' ) AS sub_query_1 ORDER BY TYPEGSserved DESC LIMIT 1;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "SELECT SUM(c.totalschoolnobuildingcnt) FROM schools AS s LEFT JOIN charter AS c ON s.CDSCode = c(CharterNum) AND (c.FundTyperesponse IS NOT NULL OR c.CharterNum IS NOT NULL) WHERE s.cdscode <> 'None';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.",
    "SELECT DISTINCT s.Name AS SchoolName, frpm.*, SUBSTR(l.`LastUpdate`, 10) AS latest_lastupdate FROM schools AS s JOIN frpm ON s.CDScode = frpm.`CDSCode` JOIN ( SELECT CDSCode, TRIM(TRAILING '-' FROM LastUpdate) AS LastUpdate FROM `frmp`) AS l ON s.CDScode = l.CDScode ORDER BY CAST(SUBSTR(s.Latitude, instr(s.Latitude, '.') + 1) AS INTEGER) DESC LIMIT 1;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.",
    "SELECT s.GSserved FROM schools s WHERE ( S.CDSCode IS NOT NULL AND S.CDSCode != '' ) AND ( S.GSserved IS NOT NULL AND S.GSserved != '' ) AND ( S.Latitude IS NOT NULL AND S.Latitude != '' ) ORDER BY COALESCE(S.Latitude, '0.00') LIMIT 1;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the grade span offered in the school with the highest longitude?",
    "SELECT s.* FROM satscores INNER JOIN schools ON s.cds = schools.CDSCode WHERE schools.name = 'Sample School Name';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "SELECT -- Include all tables' fields you want c.CharterNum, f.FundingType, s.SOCType, adm.admfName1 FROM charters c INNER JOIN funding_type_table f ON c.Charternum = f.funding INNER JOIN SOC_school s ON c.charternum = s.schoolcodestypeid INNER JOIN admininfo adm ON c.charternum = adm.id GROUP BY -- group by unique values if needed c.CharterNum, f.FundingType, s.SOCType, adm.admfName1;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What are the two most common first names among the school administrators? Indicate the district to which they administer.",
    "error: No SQL found in the input string\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "SELECT ff.free_meal_count AS free_meal_count, s.enrollment AS enrollment, CAST(s.free_meal_count AS REAL) / s.enrollment * 100 AS percent_eligible_free, s.cdsCode AS district_code, frpm.funding_type AS funding_type, frpm.docType AS doc_type FROM schools s JOIN ( SELECT free_meal_count, FROM schools ) ff ON ff = s.CDSCode JOIN frpm on frpm.`CDSCode` = s.CDSCode;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
    "SELECT DISTINCT `District` FROM `schools` WHERE `CharterNum` = '00D4';\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the e-mail address of the administrator of the school located in the San Bernardino county, District of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Scools?",
    "SELECT name FROM sqlite_master WHERE type='index' AND lower(name) like '%frp_fk%'; FOR EACH NAME : ALTER TABLE schools DROP INDEX sqlite_master.name;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.",
    "SELECT T1.Name, T3.Email FROM schools AS S INNER JOIN school_admininistrators AS A ON S.CDSCode = A.CDSCode LEFT JOIN AdminPriority AS AP ON A.PriorityOrder DESC ORDER BY AdmNameLastUpdate LIMIT 1;\t----- bird -----\tcalifornia_schools"
  ],
  [
    "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "-- How many accounts who choose issuance after transaction are staying in East Bohemia region? SELECT COUNT(T4.account_id) AS CountAccountIssuanceAfter FROM account AS T1 JOIN card AS T2 ON T1.account_id = T2.disp_id JOIN disp AS T3 ON T2.disp_id = T3.disp_id WHERE T2.type = 'POPLATEK PO OBRATU' AND T3.client_id IS NOT NULL; -- (No need to use `SELECT DISTINCT` here)\t----- bird -----\tfinancial"
  ],
  [
    "How many accounts who have region in Prague are eligible for loans?",
    "SELECT COUNT(DISTINCT T1.loan_id) AS num_loans FROM loan AS T1 INNER JOIN account ON account.account_id = T1.account_id INNER JOIN district ON district.district_id = account.district_id WHERE district.A3 LIKE '%Prague%';\t----- bird -----\tfinancial"
  ],
  [
    "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
    "SELECT D.A3 AS region, AVG(D.A12) AS avg_unemployment_rate_1995, AVG(D.A13) AS avg_unemployment_rate_1996, CASE WHEN MAX(AVG(D.A12)) - MIN(AVG(D.A12)) OVER (PARTITION BY D.A3) > MAX(AVG(D.A13)) - MIN(AVG(D.A13)) OVER (PARTITION BY D.A3) THEN 'higher in 1995' WHEN MAX(AVG(D.A12)) - MIN(AVG(D.A12)) OVER (PARTITION BY D.A3) < MAX(AVG(D.A13)) - MIN(AVG(D.A13)) OVER (PARTITION BY D.A3) THEN 'higher in 1996' ELSE 'equal' END AS higher_era FROM district D GROUP BY D.A3;\t----- bird -----\tfinancial"
  ],
  [
    "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "SELECT COUNT(*) FROM client C -- filter male customers residing in north Bohemia JOIN district D ON C.district_id = D.district_id -- select distinct average salaries from regions JOIN ( SELECT A11, district_id FROM district WHERE STRFTIME('%z', 'now') != '1200' AND A3 LIKE 'north behemia' ) B1 -- filter district to match the existing query's region ON C.district_id = D.district_id;-- count records of male clients in distinct accounts, whose average salary is greater than 8000.\t----- bird -----\tfinancial"
  ],
  [
    "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "SELECT (T2.max_avg_salary) - (T2.min_max_year_age_diff) AS salary_difference FROM ( SELECT DISTINCT L.account_id, RANK() OVER (ORDER BY T1.age_diff_maxsal DESC, A11 ) AS avgsalary, A.age_diff_maxsal AS max_year_age_diff FROM ( SELECT account_id, SUM(CASE WHEN rank = -0 THEN A11 END) / COUNT(*) AS sum_sal_per_0, SUM(CASE WHEN rank = -1 THEN A11 END) / COUNT(*) AS sum_sal_per_minus1, SUM(CASE WHEN rank = -2 THEN A11 END) / COUNT(*) AS sum_sal_per_minus2, SUM(CASE WHEN rank = -3 THEN A11 END) / COUNT(*) AS sum_sal_per_minus3, age_diff_maxsal FROM ( SELECT d.account_id , c.gender , RANK() OVER (ORDER BY A11 DESC) AS rank, A11 FROM disp d JOIN client c ON d.client_id = c.client_id WHERE c.gender = 'F' )t1 GROUP BY account_id L )T1 LEFT JOIN ( SELECT DISTINCT account_id, SUM(CASE WHEN rnk = -3 THEN age_diff_maxsal END) / COUNT(*) AS max_avg_salary, T2.rnk AS min_max_year_age_diff FROM ( SELECT d.account_id , c.gender , A11 , rnk , age_diff_maxsal , CASE WHEN rank = -3 THEN 'NULL' ELSE NULL END AS min_max_year_age FROM trans t3 JOIN account a ON t3.account_id =a.account_id LEFT JOIN ( SELECT d.account_id, A11, (YEAR(CURDATE()) - YEAR(c.birthdate)) + IF((QUARTER(CURDATE())) < 4 AND DATEDIFF(TIME(CURDATE()), TIME(c.birthdate)) <=0 ,1,0) AS age_diff_maxsal FROM client c JOIN disp d ON c.client_id =d.client_id WHERE c.gender='F' ) t2 ON t3.account_id=t2.account_id PIVOT( MAX(age_diff_maxsal) FOR rank IN (- 0, - 1, - 2, - 3, 4)) )A RIGHT JOIN ( SELECT d.account_id , A11 , (YEAR(CURDATE())- YEAR(c.birthdate)) + IF((QUARTER(CURDATE()))<4 AND DATEDIFF(TIME(CURDATE()), TIME(c.birthdate))<=0 ,1,0) AS age_diff_maxsal FROM client c LEFT JOIN disp d ON c.client_id =d.client_id WHERE c.gender='F' ) t2 ON T3.account_id=T2.account_id PIVOT( MAX(age_diff_maxsal) FOR rank IN (- 0, - 1, - 2, - 3, 4)) )T2 AND L.account_id = T2.account_id GROUP BY account_id, rnk ) result\t----- bird -----\tfinancial"
  ],
  [
    "List out the account numbers of clients who are youngest and have highest average salary?",
    "SELECT T1.A11 FROM district AS T1 JOIN client AS T2 USING (district_id) WHERE T2.birth_date IS NOT NULL GROUP BY T2.client_id, T1.A11 ORDER BY T1.A11 DESC LIMIT 1;\t----- bird -----\tfinancial"
  ],
  [
    "How many customers who choose statement of weekly issuance are Owner?",
    "SELECT COUNT(DISTINCT client_id) AS num_customers FROM disp JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'OWNER' AND account.frequency LIKE '%TYDNE';\t----- bird -----\tfinancial"
  ],
  [
    "List out the clients who choose statement of issuance after transaction are Disponent?",
    "SELECT c.client_id, c.gender, c.birth_date, d.type AS disp_type FROM client AS c JOIN disp AS d ON c.client_id = d.client_id WHERE d.type='DISPONENT' AND EXISTS ( SELECT 1 FROM trans AS t WHERE d.account_id = t.account_id AND t.k_symbol = 'POPLATEK PO OBRATU') ;\t----- bird -----\tfinancial"
  ],
  [
    "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "-- Type: SQL SELECT a.account_id, l.date AS loan_date, l.amount FROM account a JOIN disp d ON a.account_id = d.account_id -- join table `disp` JOIN card c ON d.disp_id = c.disp_id -- join table `card` for correct table structure WHERE EXTRACT(YEAR FROM l.date) = 1997 AND c.frequency = 'POPLATEK TYDNE' -- use correct column name from joined `card` table ORDER BY a.account_id;\t----- bird -----\tfinancial"
  ],
  [
    "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "Among the account opened, how many female customers who were born before 1950 and stayed in Slokolov?",
    "SELECT COUNT(CASE WHEN C.client_id IS NOT NULL AND C.gender = 'F' AND C.birth_date < '1950-01-01' THEN 1 END) AS count FROM client C WHERE C.district_id IN (SELECT district_id FROM district WHERE A2 LIKE '%Slokolov%');\t----- bird -----\tfinancial"
  ],
  [
    "List out the accounts who have the earliest trading date in 1995 ?",
    "SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date LIKE '1995-%' GROUP BY T2.date, T1.account_id HAVING MIN(T2.date)\t----- bird -----\tfinancial"
  ],
  [
    "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
    "SELECT a.account_id, t.balance AS max_balance FROM account a JOIN trans t ON a.account_id = t.account_id WHERE CAST(a.date AS DATE) < '1997-01-01' AND t.amount > 3000\t----- bird -----\tfinancial"
  ],
  [
    "Which client issued his/her card in 1994/3/3, give his/her client id.",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
    "PRAGMA foreign_keys = ON; SELECT a.date AS account_open_date FROM account a JOIN trans t ON a.account_id = t.account_id WHERE t.type='PRIJEM' and t.amount=840 AND EXTRACT(YEAR FROM t.date) = 1998;\t----- bird -----\tfinancial"
  ],
  [
    "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
    "-- Retrieve the district_id where a loan was approved in 1994/8/25. SELECT s.district_id FROM account AS a JOIN client AS cl ON a.account_id = cl.client_id JOIN order AS o ON a.order_id = o.order_id WHERE STRFTIME('%Y', date) = '1994' AND STRFTIME('%m', date]='08' AND STRFTIME('D ', date)= '25';\t----- bird -----\tfinancial"
  ],
  [
    "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?",
    "SELECT MAX(t.amount) AS biggest_transaction_1996 FROM trans t JOIN account a ON t.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id JOIN client c ON d.client_id = c.client_id JOIN card k ON d.disp_id = k.disp_id WHERE k.issued = '1996-10-21'\t----- bird -----\tfinancial"
  ],
  [
    "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
    "-- (Corrected/Re-arranged SQL) SELECT c.gender, t.amount AS first_transaction_amount, a.account_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id WHERE (c.district_id, a.district_id) = ( SELECT district.`district_id`, a.`district_id` FROM district JOIN account a ON district.`district_id` = a.`district_id` GROUP BY district.`district_id`, a.`district_id` ) ORDER BY t.date ASC;\t----- bird -----\tfinancial"
  ],
  [
    "How many clients opened their accounts in Jesenik branch were women?",
    "SELECT COUNT(*) FROM ( SELECT DISTINCT t3.client_id, t2.account_id FROM district AS t1 JOIN account AS t2 ON t1.district_id = t2.district_id JOIN client AS t3 ON t3.district_id = t2.district_id WHERE t1.A2 = 'Jesenik' AND t3.gender = 'F' )AS t4;\t----- bird -----\tfinancial"
  ],
  [
    "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
    "SELECT DISTINCT d.disp_id FROM disp AS d INNER JOIN client AS c ON d.client_id = c.client_id INNER JOIN trans AS t ON c.client_id = t.account_id WHERE STRFTIME('%Y-%m-%d', t.date) = '1998-09-02' AND ABS(t.amount) = 5100;\t----- bird -----\tfinancial"
  ],
  [
    "How many accounts were opened in Litomerice in 1996?",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "SELECT T3.A2 AS district_name FROM client AS T1 JOIN account AS T2 ON T2.district_id = T1.district_id JOIN district AS T3 ON T3.district_id = T1.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29';\t----- bird -----\tfinancial"
  ],
  [
    "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "For the first client who opened his/her account in Prague, what is his/her account ID?",
    "SELECT client_id FROM client WHERE district_id = ( SELECT district_id FROM district WHERE A3 LIKE '%Prague%' LIMIT 1 );\t----- bird -----\tfinancial"
  ],
  [
    "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "SELECT CAST(SUM(CASE WHEN `gender` = 'M' THEN 1 END) AS REAL) * 100 / COUNT(*) AS MaleClientPercentage FROM client cl JOIN district d ON cl.district_id = d.district_id WHERE d.A3 = 'south Bohemia'; -- Filter by region name and select distinct region value\t----- bird -----\tfinancial"
  ],
  [
    "For the client who first applied the loan in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "What is the percentage of loan amount that has been fully paid with no issue.",
    "SELECT ((SUM(CASE WHEN l.status = 'A' THEN l.amount ELSE 0 END) / SUM(l.amount)) * 100) FROM loan AS l WHERE l.status = 'A'\t----- bird -----\tfinancial"
  ],
  [
    "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "SELECT COUNT(DISTINCT loan.status) / COUNT(*) * 100 AS percentage_running_no_issue, district.A3 category FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.amount < 100000 AND loan.status = 'C' GROUP BY district.A3;\t----- bird -----\tfinancial"
  ],
  [
    "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
    "SELECT account.account_id, district.A2 AS district_name, district.A3 AS region FROM account JOIN trans ON account.account_id = trans.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON account.district_id = client.district_id JOIN district ON client.district_id = district.district_id WHERE trans.type = 'POPLATEK PO OBRATU' AND SUBSTR(trans.date, -4) LIKE '%1993' GROUP BY district_name, region;\t----- bird -----\tfinancial"
  ],
  [
    "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
    "SELECT account.account_id, COUNT(*) AS frequency FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 LIKE 'east Bohemia' AND date BETWEEN '1995-01-01' AND '2000-12-31' GROUP BY account.account_id;\t----- bird -----\tfinancial"
  ],
  [
    "List account ID and account opening date for accounts from 'Prachatice'.",
    "SELECT DISTINCT district.A2, account.account_id, trans.date AS opening_date FROM district INNER JOIN disp ON district.district_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE district.A2 = 'Prachatice' AND trans.type = 'VYDAJ' ORDER BY district.A2 ASC;\t----- bird -----\tfinancial"
  ],
  [
    "State the district and region for loan ID '4990'.",
    "SELECT d.A2, d.A3 FROM district d JOIN account a ON d.district_id = a.district_id WHERE a.account_id = ( SELECT l.account_id FROM loan l WHERE l.loan_id = '4990' )\t----- bird -----\tfinancial"
  ],
  [
    "Provide the account ID, district and region for loan amount greater than USD300,000.",
    "-- SELECT statement to get account ID, district name, and region for loans greater than USD 300,000. SELECT l.account_id, d.A2 AS district_name, d.A3 AS region_name FROM loan l INNER JOIN district d ON l.account_id = d.district_id WHERE l.amount > 300000 ; -- This SQL will correct the syntax error and only join account_id with district_id from `loan` table to -- `district` table where amount is greater than 300,000. Then it selects the necessary columns. -- In SQLite DBMS syntax for query, each select statment has to be wrapped in its own parentheses: SELECT l.account_id, d.A2 AS district_name, d.A3 AS region_name FROM loan INNER JOIN district d ON d.district_id = l.account_id WHERE l.amount > 300000\t----- bird -----\tfinancial"
  ],
  [
    "List the loan ID, district and average salary for loan with duration of 60 months.",
    "-- List the loan ID, district and average salary for loans with duration of 60 months. SELECT loan.loan_id, district.A3 AS region , AVG(district.A11) AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE loan.duration =60 GROUP BY district.A3;\t----- bird -----\tfinancial"
  ],
  [
    "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "SELECT C.A2, ROUND(((C.A13 - C.A12) / C.A12 * 100)) AS DIFFERENCE FROM Loan A JOIN Account B ON A.account_id = B.account_id JOIN Client D ON B.client_id = D.client_id JOIN District C ON D.district_id = C.district_id WHERE A.status = 'D' AND (C.A13 - C.A12) IS NOT NULL;\t----- bird -----\tfinancial"
  ],
  [
    "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
    "SELECT ( SELECT COUNT(DISTINCT account.account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 LIKE 'Decin' AND account.date LIKE '1993%' ) * 100 / ( SELECT COUNT(*) FROM account WHERE date LIKE '1993%' ) AS percent_of_decin_accts;\t----- bird -----\tfinancial"
  ],
  [
    "List the account IDs with monthly issuance of statements.",
    "SELECT district_id FROM account where Frequency = 'POPLATEK MESICNE';\t----- bird -----\tfinancial"
  ],
  [
    "List the top ten districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "SELECT D.A2, COUNT(DISTINCT A.district_id) AS num_female_account_holders FROM district D JOIN account A ON D.district_id = A.district_id JOIN disp D1 ON A.account_id = D1.account_id JOIN client C ON D1.client_id = C.client_id WHERE C.gender = 'F' GROUP BY D.A2 ORDER BY num_female_account_holders DESC LIMIT 10;\t----- bird -----\tfinancial"
  ],
  [
    "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "SELECT d.A2 AS district_name, SUM(t.amount) AS sum_of_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '%1996-01%' GROUP BY d.A2 ORDER BY sum_of_withdrawals DESC LIMIT 10;\t----- bird -----\tfinancial"
  ],
  [
    "How many of the account holders in South Bohemia still do not own credit cards?",
    "SELECT COUNT(t1.client_id) FROM ( SELECT c.client_id, a.account_id FROM client c JOIN district d ON c.district_id = d.district_id JOIN account a ON d.district_id = a.district_id ) AS t1 LEFT JOIN disp ON t1.account_id = disp.disp_id WHERE disp.disp_id IS NULL AND t1.frequency != 'credit_card';\t----- bird -----\tfinancial"
  ],
  [
    "Which district has highest active loan?",
    "SELECT D.district_id, A2 AS district_name, COUNT(L.loan_id) AS num_active_loans FROM loan L JOIN account A ON L.account_id = A.account_id JOIN district D ON A.district_id = D.district_id WHERE L.status IN ('C', 'D') GROUP BY D.district_id, D.A3 -- Corrected to use district name instead of branch location ORDER BY num_active_loans DESC;\t----- bird -----\tfinancial"
  ],
  [
    "What is the average loan amount by male borrowers?",
    "SELECT AVG(amount) FROM loan l JOIN client c ON l.account_id = c.client_id WHERE c.gender = 'M';\t----- bird -----\tfinancial"
  ],
  [
    "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
    "SELECT D.A2, A.district_id AS branch_location, D.A2 AS district_name FROM district AS D INNER JOIN account AS A ON D.district_id = A.district_id WHERE D.A13 = 25 -- The highest unemployment rate is actually 25 (based on evidence) ORDER BY D.A13 DESC;\t----- bird -----\tfinancial"
  ],
  [
    "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
    "-- After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance? SELECT COUNT(*) AS total_account_with_negative_balance_and_monthly_issuance FROM account JOIN trans ON (account.account_id = trans.account_id) WHERE trans.operation = 'VYBER KARTOU' AND trans.balance < 0 -- Negative balance means balance < 0 AND account.frequency = 'POPLATEK MESICNE' -- Frequency = 'POPLATEK MESICNE' stands for monthly issuance\t----- bird -----\tfinancial"
  ],
  [
    "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "SELECT COUNT(DISTINCT l.loan_id) FROM loan l JOIN account a ON a.account_id = l.account_id JOIN trans t ON t.account_id = a.account_id WHERE l.amount >= 250000 AND t.date BETWEEN '1995-01-01' AND '1997-12-31' AND t.type = 'VYDAJ' AND t.k_symbol = 'POPLATEK MESICNE';\t----- bird -----\tfinancial"
  ],
  [
    "How many accounts have running contracts in Branch location 1?",
    "SELECT count(*) FROM loan l JOIN account a ON l.account_id = a.account_id -- Joining both tables using their IDs. WHERE l.status IN ('C', 'D') AND a.district_id = 1 -- Branch location ID = A1 in SQL above. Remember A number from 1-9\t----- bird -----\tfinancial"
  ],
  [
    "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "SELECT COUNT(t1.client_id) FROM client AS t1 JOIN disp AS t2 ON t1.district_id = t2.client_id WHERE t1.gender = 'M' AND t1.district_id IN (SELECT district_id FROM district ORDER BY A5 DESC LIMIT 1, 1);\t----- bird -----\tfinancial"
  ],
  [
    "How many high-level credit cards have \"disponent\" type of disposition?",
    "SELECT COUNT(*) FROM card AS c JOIN disp AS d ON c.disp_id = d.disp_id WHERE type = 'gold' AND d.type NOT IN ('OWNER', 'DISPONENT');\t----- bird -----\tfinancial"
  ],
  [
    "How many accounts are there in the district of \"Pisek\"?",
    "SELECT COUNT(DISTINCT a.account_id) FROM account a JOIN district d ON a.district_id = d.district_id WHERE d.A2 LIKE \"%Pisek%\"\t----- bird -----\tfinancial"
  ],
  [
    "Which districts have transactions greater than USS$10,000 in 1997?",
    "SELECT t2.district_id, SUM(t1.amount) as total_amount FROM trans AS t1 JOIN account AS t2 -- correct join to account table ON t1.account_id = t2.account_id AND -- linking with account id. STRFTIME('%Y', t1.date) = '1997' -- specifying year of transaction as '97 GROUP BY t2.district_id HAVING total_amount > 10000\t----- bird -----\tfinancial"
  ],
  [
    "Which accounts placed orders for household payment in Pisek?",
    "SELECT DISTINCT A.account_id, C.gender AS client_gender FROM account AS A JOIN order AS O ON A.account_id = O.account_id JOIN client AS C ON A.district_id = C.district_id WHERE O.k_symbol = 'SIPO';\t----- bird -----\tfinancial"
  ],
  [
    "What are the accounts that have both gold and junior credit cards?",
    "-- Get the accounts that have both gold and junior credit cards. SELECT DISTINCT T1.account_id FROM account AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type IN ('gold', 'junior') ;\t----- bird -----\tfinancial"
  ],
  [
    "How much is the average amount in credit card made by account holders in a month, in year 2021?",
    "--- Type: SELECT statement; --- DBMS: SQLite 3; --- Purpose: To calculate average amount in credit card withdrawn by account holders in a month, in year 2021; SELECT strftime('%Y-%m', t1.date) AS month_year, AVG(t2.amount) AS average_amount FROM trans t1 JOIN loan t2 ON t2.account_id = t1.account_id WHERE t1.operation = 'VYBER KARTOU' GROUP BY strftime('%Y-%m', t1.date) HAVING strftime('%Y', t1.date) = 2021;\t----- bird -----\tfinancial"
  ],
  [
    "Who are the account holder identification numbers whose spent per month on the credit card is less than the average, in 1998?",
    "SELECT account_id AS fewer_than_average_account_id FROM ( SELECT MAX(CASE WHEN sum_amount < (SELECT AVG(amount) FROM trans WHERE date LIKE '%1998%' AND operation = 'VYBER KARTOU') THEN T1.account_id END) AS fewer_than_average_account_id, SUM(T1.amount) AS sum_amount FROM ( SELECT T1.account_id, T1.amount FROM trans T1 WHERE T1.date LIKE '%1998%' AND T1.operation = 'VYBER KARTOU' ) GROUP BY T1.account_id HAVING sum_amount < (SELECT AVG(amount) FROM trans WHERE date LIKE '%1998%' AND operation = 'VYBER KARTOU') )\t----- bird -----\tfinancial"
  ],
  [
    "Who are the female account holders who own credit cards and also have loans?",
    "-- Who are the female account holders who own credit cards and also have loans? SELECT client.client_id, client.gender, card.card_id -- select only needed columns FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' GROUP BY client.client_id; -- added GROUP BY to select distinct values\t----- bird -----\tfinancial"
  ],
  [
    "How many female clients' accounts are in the region of South Bohemia?",
    "-- Corrected SQL to count female clients' accounts in the region of South Bohemia SELECT COUNT(client.client_id) FROM client JOIN district ON client.district_id = district.district_id JOIN disp ON client.client_id = disp.client_id WHERE client.gender = 'F' AND district.A3 = 'south bohemia';\t----- bird -----\tfinancial"
  ],
  [
    "Please list the accounts whose district is Tabor that are eligible for loans.",
    "SELECT DISTINCT A1.account_id, D.district_name AS district_name, D.A2 AS region FROM account AS A1 JOIN district AS D ON A1.districT_ID = D.districT_ID WHERE D.A2 = 'Tabor' AND EXISTS ( SELECT 1 FROM disp WHERE disp.disp_id = A1.account_id AND disp.type = 'OWNER' );\t----- bird -----\tfinancial"
  ],
  [
    "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "SQLite (SELECT, UPDATE, INSERT, DELETE etc)\t----- bird -----\tfinancial"
  ],
  [
    "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?",
    "-- How many accounts in North Bohemia has made a transaction with the partner's bank being AB? SELECT COUNT(DISTINCT a.account_id) FROM account a INNER JOIN district d ON a.district_id = d.district_id INNER JOIN trans t ON a.account_id = t.account_id WHERE d.A3 = 'North Bohemia' AND -- Region filter for North Bohemia t.bank = 'AB'; -- Filter by partner's bank being AB\t----- bird -----\tfinancial"
  ],
  [
    "Please list the name of the districts with accounts that made withdrawal transactions.",
    "SELECT DISTINCT A2 -- Select only the district name column FROM district -- Directly select from the 'district' table WHERE district_id IN ( SELECT account.account_id FROM account JOIN trans ON account.account_id = trans.account_id WHERE type = 'VYDAJ' );\t----- bird -----\tfinancial"
  ],
  [
    "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "SELECT A3, A15 FROM district JOIN account ON district.district_id = account.district_id WHERE district.A4 > 4000 AND account.date LIKE '1997%' GROUP BY A3 ORDER BY A3 LIMIT 1;\t----- bird -----\tfinancial"
  ],
  [
    "How many 'classic' cards are eligible for loan?",
    "SELECT COUNT(DISTINCT c.card_id) FROM card c JOIN disp d ON c.disp_id = d.disp_id JOIN account a ON d.account_id = a.account_id WHERE d.type IS NOT NULL AND d.type = 'OWNER' AND c.type = 'classic';\t----- bird -----\tfinancial"
  ],
  [
    "How many male clients in 'Hl.m. Praha' district?",
    "SELECT COUNT(*) FROM district AS d INNER JOIN client c ON (d.district_id = c.district_id) WHERE c.gender = 'M' AND d.A2 = 'Hl.m. Praha';\t----- bird -----\tfinancial"
  ],
  [
    "How many percent of 'Gold' cards were issued prior to 1998?",
    "SELECT (COUNT(CASE WHEN t.issued < '1998-01-01' AND t.type = 'gold' THEN 1 END) / COUNT(CASE WHEN t.issued < '1998-01-01' THEN 1 END)) * 100 AS percent_gold_before_98 FROM card t;\t----- bird -----\tfinancial"
  ],
  [
    "Who is the owner of the account with the largest loan amount?",
    "SELECT c.gender, a.account_id FROM disp d JOIN client c ON d.client_id = c.client_id JOIN account a ON d.account_id = a.account_id WHERE d.type = 'OWNER' AND a.account_id IN ( SELECT l1.account_id FROM loan l1 JOIN disp d2 ON l1.account_id = d2.account_id GROUP BY d2.disp_id HAVING SUM(l1.amount) = (SELECT MAX(amount) FROM loan) );\t----- bird -----\tfinancial"
  ],
  [
    "What is the number of committed crimes in 1995 in the district of the account with the id 532?",
    "SELECT * FROM district WHERE A8 = '5';\t----- bird -----\tfinancial"
  ],
  [
    "What is the district Id of the account that placed the order with the id 33333?",
    "SELECT a.district_id FROM account a JOIN order o ON a.account_id = o.account_id WHERE o.order_id = 33333;\t----- bird -----\tfinancial"
  ],
  [
    "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "SELECT t.operation, t.amount, trans.date AS transaction_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN trans t ON a.account_id = t.account_id AND c.client_id = 3356 WHERE t.type = 'VYDAJ' AND t.operation = 'VYBER';\t----- bird -----\tfinancial"
  ],
  [
    "Among the weekly issuance accounts, how many have a loan of under 200000?",
    "SELECT COUNT(*) FROM account a JOIN loan l ON a.account_id = l.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;\t----- bird -----\tfinancial"
  ],
  [
    "What type of credit card does the client with the id 13539 own?",
    "SELECT c.type FROM card AS c, disp AS d WHERE c.disp_id = d.disp_id AND d.client_id = 13539;\t----- bird -----\tfinancial"
  ],
  [
    "What is the region of the client with the id 3541 from?",
    "ite -- Step 1: Get the district ID for client with id 3541 SELECT T2.district_id FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541; -- Step 2: Get region (A3) details for the district ID from Step 1 SELECT A3 FROM district WHERE district_id IN ( SELECT T2.district_id FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541 ); -- Type: SQLite script -- This corrected SQL will work in your environment.\t----- bird -----\tfinancial"
  ],
  [
    "Which district has the most accounts with loan contracts finished with no problems?",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "Who placed the order with the id 32423?",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "Please list all the transactions made by accounts from district 5.",
    "SELECT * FROM trans WHERE account_id IN ( SELECT account_id FROM account WHERE district_id = 5);\t----- bird -----\tfinancial"
  ],
  [
    "How many of the accounts are from Jesenik district?",
    "SELECT COUNT(*) from account where district_id = 1\t----- bird -----\tfinancial"
  ],
  [
    "List all the clients' IDs whose junior credit cards were issued after 1996.",
    "-- This corrected and refined query above must pass into database. SELECT -- select all columns which will be needed for future operation in python and final data presentation c.client_id, d.disp_id , ca.issued, FROM client c JOIN disp d ON c.district_id = d.district_id JOIN card ca ON d.disp_id = ca.disp_id WHERE CA.type='junior' AND CAST(ca.issued AS REAL) >= '1997-01-01' GROUP BY(c.client_id);\t----- bird -----\tfinancial"
  ],
  [
    "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "SELECT ROUND( COALESCE( ( SELECT SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) * 100 / COUNT(*) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id IN ( SELECT district_id FROM district WHERE A11 > 10000 ) ), 0) , 0) FROM client WHERE gender = 'F'\t----- bird -----\tfinancial"
  ],
  [
    "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "SELECT ((SUM(CASE WHEN c.gender = 'M' AND l.date LIKE '1996%' THEN l.amount ELSE 0 END) - SUM(CASE WHEN c.gender = 'M' AND l.date LIKE '1997%' THEN l.amount ELSE 0 END)) / (SUM( CASE WHEN c.gender = 'M' AND l.date LIKE '1996%' THEN l.amount ELSE 0 END))) * 100 AS growth_rate FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN loan l ON a.account_id = l.account_id;\t----- bird -----\tfinancial"
  ],
  [
    "How many credit card withdrawals were recorded after 1995?",
    "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date >= DATE('1995-12-31') AND SUBSTR(date, 1, 4) > '1995';\t----- bird -----\tfinancial"
  ],
  [
    "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
    "-- Query to find the difference in the number of committed crimes between East and North Bohemia in 1996 SELECT ROUND(SUM(CASE WHEN A3 = \"north Bohemia\" THEN A16 ELSE 0 END) - SUM(CASE WHEN A3 = \"east Bohemia\" THEN A16 ELSE 0 END), 0) AS Difference; /* Fix: Combine both SELECT statements into a single one for correct execution */\t----- bird -----\tfinancial"
  ],
  [
    "How many owner and disponent dispositions are there from account number 1 to account number 10?",
    "SELECT COUNT(DISTINCT `type` ) FROM disp\t----- bird -----\tfinancial"
  ],
  [
    "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "SELECT (SELECT COUNT(*) FROM order O WHERE account_id = 3 AND k_symbol = 'DUCHOD') AS releases_frequency, SUM(CASE WHEN T.k_symbol IS NOT NULL AND T.k_symbol = 'UVER' THEN T.amount ELSE 0 END) AS debiting_tot FROM trans T;\t----- bird -----\tfinancial"
  ],
  [
    "What year was account owner number 130 born?",
    "SELECT c.birth_date FROM disp d, client c WHERE d.client_id = c.client_id AND d.disp_id = 130;\t----- bird -----\tfinancial"
  ],
  [
    "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?",
    "SELECT COUNT(DISTINCT T1.account_id) AS Total_Accounts FROM account T1 INNER JOIN disp T2 ON T1.account_id = T2.account_id INNER JOIN trans T3 ON T1.account_id = T3.account_id WHERE T2.type = 'OWNER' AND T3.k_symbol LIKE '%POPLATEK%OBRATU';\t----- bird -----\tfinancial"
  ],
  [
    "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
    "-- What is the amount of debt that client number 992 has, -- and how is this client doing with payments? SELECT total_loan, paid FROM ( SELECT d.client_id AS account_id, COALESCE(SUM(l.amount), 0) as total_loan, SUM(CASE WHEN o.status IN ('B', 'C') THEN o.amount ELSE 0 END) AS paid FROM disp d JOIN loan l ON (d.account_id = l.account_id) JOIN card c ON (d.disp_id = c.disp_id) WHERE d.client_id != 992 GROUP BY d.client_id, c.type ) AS loan_table;\t----- bird -----\tfinancial"
  ],
  [
    "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?",
    "SELECT SUM(t.amount) AS Sum, CASE WHEN d.gender LIKE '%M%' THEN 'MAN' ELSE 'WOMAN' END AS OwnerType FROM trans t JOIN disp d ON t.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 4 AND t.trans_id = 851;\t----- bird -----\tfinancial"
  ],
  [
    "Which kind of credit card does client number 9 possess?",
    "SELECT DISTINCT C.type FROM disp AS D JOIN card AS C ON D.disp_id = C.disp_id WHERE D.client_id = 9;\t----- bird -----\tfinancial"
  ],
  [
    "How much, in total, did client number 617 pay for all of the transactions in 1998?",
    "SELECT SUM(trans.amount) FROM trans WHERE account_id IN (SELECT client_id FROM client WHERE client_id = 617) AND date LIKE '1998%';\t----- bird -----\tfinancial"
  ],
  [
    "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
    "-- **SQL Type:** SQLite -- **Query:** Find clients born between 1983 and 1987 with an account branch in East Bohemia. SELECT DISTINCT cl.client_id FROM client cl JOIN account a ON cl.district_id = a.district_id WHERE a.district_id IN ( SELECT district_id FROM district WHERE A3 = 'east Bohemia' ) AND birth_date BETWEEN '1983-01-01' AND '1987-12-31';\t----- bird -----\tfinancial"
  ],
  [
    "Please provide the IDs of the 3 female clients with the largest loans.",
    "SELECT DISTINCT l.account_id FROM ( SELECT a.account_id, SUM( CASE WHEN c.gender = 'F' THEN IFNULL(l.amount, 0) ELSE NULL END ) AS total_funds_f FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.district_id = c.district_id AND c.gender = 'F' GROUP BY a.account_id ) l WHERE l.total_funds_f IS NOT NULL -- To disregard cases of district that only have loans from male clients. ORDER BY l.total_funds_f Desc -- Select the account ids in order of how much money comes in LIMIT 3;\t----- bird -----\tfinancial"
  ],
  [
    "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "How many accounts in Beroun were opened after 1996?",
    "SELECT COUNT(*) FROM account AS A JOIN district AS D ON A.`district_id` = D.`district_id` WHERE D.A2 = 'Beroun' AND A.date > '1996-12-31';\t----- bird -----\tfinancial"
  ],
  [
    "How many female customers have a junior credit card?",
    "SELECT COUNT(a.account_id) FROM client c INNER JOIN account a ON (c.district_id = a.district_id) JOIN disp d ON (a.account_id = d.account_id) WHERE c.gender = 'F' AND d.disp_id IN ( SELECT MAX(disp_id) FROM disp GROUP BY type )\t----- bird -----\tfinancial"
  ],
  [
    "What proportion of customers who have accounts at the Prague branch are female?",
    "SELECT (SUM(CASE WHEN client.gender = 'F' THEN 1 ELSE 0 END) / ( SELECT COUNT(*) FROM client JOIN account ON client.district_id = account.district_id WHERE account.district_id IN ( SELECT district_id FROM district WHERE A2 LIKE '%$Praha%'))) * 100 AS percentage_female FROM client JOIN account ON client.district_id = account.district_id WHERE account.district_id IN ( SELECT district_id FROM district WHERE A2 LIKE '%$Praha%')\t----- bird -----\tfinancial"
  ],
  [
    "What percentage of male clients request for weekly statements to be issued?",
    "SELECT ((COUNT(CASE WHEN C.gender = 'M' THEN D.account_id END) * 1.0 / COUNT(DISTINCT A.account_id)) * 100) AS percentage_of_male_clients FROM account A JOIN disp D ON A.account_id = D.account_id JOIN client C ON D.disp_id = C.client_id AND C.district_id = A.district_id WHERE D.frequency = 'POPLATEK TYDNE'\t----- bird -----\tfinancial"
  ],
  [
    "How many clients who choose statement of weekly issuance are User?",
    "SELECT COUNT(*) FROM ( SELECT c.client_id FROM client AS c JOIN disp AS d ON c.client_id = d.disp_id JOIN account AS a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' ) AS Client JOIN disp AS d ON Client.client_id = d.client_id WHERE d.type = 'OWNER';\t----- bird -----\tfinancial"
  ],
  [
    "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
    "SELECT C.client_id, L.amount FROM client AS C JOIN disp AS D ON D.client_id = C.client_id JOIN loan AS L ON L.account_id = D.account_id WHERE D.type = 'OWNER' AND L.duration >= 24 -- Only consider active loans; AND L.status != 'D' -- Now find the minimum approved amount among these accounts AND L.amount = (SELECT MIN(amount) FROM loan WHERE duration >= 24 AND status != 'D') -- Filter based on account opening date AND C.opening_date < '1997-01-01';\t----- bird -----\tfinancial"
  ],
  [
    "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "SELECT DISTINCT account.account_id, district.A11 FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.gender ='F' AND client.birth_date IS NOT NULL AND account.account_id IN (SELECT account_id FROM trans WHERE type = 'PRIJEM' AND amount IS NOT NULL) ORDER BY district.A11 DESC;\t----- bird -----\tfinancial"
  ],
  [
    "How many clients who were born in 1920 stay in east Bohemia?",
    "SELECT * FROM client c JOIN district d ON c.district_id = d.district_id;\t----- bird -----\tfinancial"
  ],
  [
    "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
    "SELECT count(*), L.duration FROM loan AS L LEFT JOIN account AS A ON -- weekly statement frequency should be connected with payment schedule for this card type. L.account_id = A.account_id WHERE A.frequency = 'POPLATEK TYDNE' AND -- Pre-payments of duration of 24 months is the condition here, L.duration = 24;\t----- bird -----\tfinancial"
  ],
  [
    "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "SELECT AVG(amount) FROM loan WHERE status = 'C';\t----- bird -----\tfinancial"
  ],
  [
    "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.",
    "error: No SQL found in the input string\t----- bird -----\tfinancial"
  ],
  [
    "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "SELECT-- type: SQL (SQLite) c.client_id, c.birth_date AS age, card.type FROM client AS c JOIN account AS acc ON c.district_id = acc.district_id -- Ensure join order matches foreign key relationship JOIN disp AS dis ON acc.account_id = dis.account_id JOIN card ON dis.disp_id = card.disp_id WHERE card.type = 'gold' GROUP BY c.client_id, c.birth_date; -- Ensure distinct values before sorting\t----- bird -----\tfinancial"
  ],
  [
    "What is the most common bond type?",
    "SELECT DISTINCT T1.`bond_type` AS Most_Common_Bond_Type FROM bond AS T1 JOIN (SELECT bond_type, COUNT(*) AS Count FROM bond GROUP BY bond_type ORDER BY Count DESC LIMIT 1) AS T2 ON T1.bond_type = T2.bond_type;\t----- bird -----\ttoxicology"
  ],
  [
    "In the non-carcinogenic molecules, how many contain chlorine atoms?",
    "SELECT COUNT(*) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'\t----- bird -----\ttoxicology"
  ],
  [
    "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "SELECT AVG(element) As avg_num_oxygen_atoms FROM atom AS T1 JOIN connected ON (T1.atom_id = connected.atom_id) WHERE element = 'o' AND molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '-' )\t----- bird -----\ttoxicology"
  ],
  [
    "On average how many carcinogenic molecules are single bonded?",
    "<!-- On average how many carcinogenic molecules are single bonded? --> SELECT SUM(CASE WHEN M.`label` = '+' THEN 1 ELSE 0 END) / COUNT(DISTINCT C.`bond_id`) AS result FROM atom A JOIN connected C ON A.`atom_id` = C.`atom_id` JOIN bond B ON C.`bond_id` = B.`bond_id` -- JOIN molecule M ON A.`molecule_id` = M.`molecule_id` -- not needed here WHERE B.`bond_type` = '-' AND M.`label` = '+';\t----- bird -----\ttoxicology"
  ],
  [
    "In the molecule containing sodium atoms, how many are non-carcinogenic?",
    "SELECT COUNT(T1.`atom_id`) FROM atom AS T1 INNER JOIN connected AS T2 ON T2.`atom_id` = T1.`atom_id` INNER JOIN bond AS T3 ON T2.`bond_id` = T3.`bond_id` INNER JOIN molecule AS T4 ON T3.`molecule_id` = T4.`molecule_id` WHERE T1.`element` = 'na' AND T4.`label` = '-'\t----- bird -----\ttoxicology"
  ],
  [
    "Find the triple-bonded molecules which are carcinogenic.",
    "SELECT DISTINCT ta.element AS element, m1.label AS label, b.molecule_id AS moleculeID FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom ta ON c.atom_id = ta.atom_id JOIN atom ta2 ON c.atom_id2 = ta2.atom_id JOIN molecule m1 ON b.molecule_id = m1.molecule_id WHERE b.bond_type = '#' AND m1.label = '+';\t----- bird -----\ttoxicology"
  ],
  [
    "What is the percentage of carbon in double-bond molecules?",
    "SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) AS carbon_percentage FROM atom AS T1 JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=';\t----- bird -----\ttoxicology"
  ],
  [
    "How many triple type bonds are there?",
    "SELECT COUNT(*) FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id2 = a.atom_id WHERE b.bond_type = '#';\t----- bird -----\ttoxicology"
  ],
  [
    "In how many atoms is there no bromine?",
    "SELECT COUNT(DISTINCT a.atom_id) AS total_count FROM atom a WHERE element != 'br'\t----- bird -----\ttoxicology"
  ],
  [
    "Of the first 100 molecules in number order, how many are carcinogenic?",
    "SELECT COUNT(T1.`molecule_id`) FROM molecule AS T1 WHERE T1.`label` = '+' AND T1.`molecule_id` BETWEEN 'TR000' AND 'TR099'\t----- bird -----\ttoxicology"
  ],
  [
    "Identify by their ID the molecules in which there is silicon.",
    "error: No SQL found in the input string\t----- bird -----\ttoxicology"
  ],
  [
    "What elements are in the TR004_8_9 bond atoms?",
    "error: No SQL found in the input string\t----- bird -----\ttoxicology"
  ],
  [
    "What elements are in a double type bond?",
    "SELECT DISTINCT T1.`element`, T4.`bond_type` FROM atom AS T1 JOIN connected AS T2 ON T1.`atom_id` = T2.`atom_id` JOIN bond AS T3 ON T2.`bond_id` = T3.`bond_id` JOIN atom AS T4 ON T4.`molecule_id` = T3.`molecule_id` WHERE T3.`bond_type` = ' = '\t----- bird -----\ttoxicology"
  ],
  [
    "Which type of label is the most numerous in atoms with hydrogen?",
    "SELECT 'atom' AS type, COUNT(label) as count, '-' AS label FROM atom WHERE element = 'h' GROUP BY label ORDER BY label ASC LIMIT 1;\t----- bird -----\ttoxicology"
  ],
  [
    "Tellurium is in what type of bond?",
    "-- Fix up below SQL script according to [Constarints] SELECT DISTINCT bond_type AS type_of_bond_for_Tellurium FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id2 = atom.atom_id WHERE element = 'te'\t----- bird -----\ttoxicology"
  ],
  [
    "What atoms are connected in single type bonds?",
    "-- What atoms are connected in single type bonds? SELECT T1.`element` FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.`bond_type` = '-'\t----- bird -----\ttoxicology"
  ],
  [
    "Indicate which atoms are connected in non-carcinogenic type molecules.",
    "SELECT COUNT(DISTINCT atom_id) FROM connected JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '-' AND bond.bond_type = '-';\t----- bird -----\ttoxicology"
  ],
  [
    "Which element is the least numerous in non-carcinogenic molecules?",
    "SELECT MIN(`count`) FROM ( SELECT T1.`element`, COUNT(T1.`atom_id`) AS `count` FROM atom AS T1 JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`label` = '-' GROUP BY T1.`element` ) AS subquery\t----- bird -----\ttoxicology"
  ],
  [
    "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "SELECT DISTINCT bond_type FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE (T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20') OR (T2.atom_id = 'TR004_20' AND T2.atom_id2 = 'TR004_8');\t----- bird -----\ttoxicology"
  ],
  [
    "What type of label is not on molecules with atoms with tin?",
    "-- What type of label is not on molecules with atoms with tin? SELECT label FROM molecule WHERE molecule_id NOT IN ( SELECT molecule_id FROM atom WHERE element = 'Sn' );\t----- bird -----\ttoxicology"
  ],
  [
    "How many atoms with iodine and sulfur type elements are there in single bond molecules?",
    "SELECT COUNT(CASE WHEN T2.`bond_type` = '-' THEN 1 END) AS count_element FROM atom AS T1 JOIN connected AS T3 ON T1.atom_id = T3.atom_id AND T3.atom_id2 = T1.atom_id -- JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T2.`bond_type` = '-' AND (T1.element = 's' OR T1.element = 'i');\t----- bird -----\ttoxicology"
  ],
  [
    "Identify all connected atoms with a triple bond.",
    "SELECT connected.atom_id FROM connected JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = \"#\";\t----- bird -----\ttoxicology"
  ],
  [
    "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
    "SELECT a.`atom_id`, b.`molecule_id`, a.`element` FROM atom AS a JOIN connected AS c ON a.`atom_id` = c.`atom_id2` JOIN bond AS b ON c.`bond_id` = b.`bond_id` WHERE a.`molecule_id` = ( -- <--- Fixed this section! SELECT molecule.`molecule_id` FROM molecule WHERE `label` = '+' )\t----- bird -----\ttoxicology"
  ],
  [
    "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "-- What percentage of carcinogenic-type molecules does not contain fluorine? SELECT CAST( SUM(CASE WHEN t2.element != 'f' THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS REAL ) FROM molecule AS t1 JOIN atom AS t2 ON t1.molecule_id = t2.molecule_id WHERE t1.label = '+';\t----- bird -----\ttoxicology"
  ],
  [
    "What is the percentage of carcinogenic molecules in triple type bonds?",
    "SELECT CAST( SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT b.bond_type) AS NUMERIC) AS percent_carcinogenic_triple FROM bond b INNER JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#';\t----- bird -----\ttoxicology"
  ],
  [
    "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "SELECT * FROM ( SELECT * FROM atom WHERE molecule_id = 'TR000' ) AS subquery ORDER BY element ASC LIMIT 3\t----- bird -----\ttoxicology"
  ],
  [
    "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?",
    "SELECT T1.`element` FROM atom AS T1 INNER JOIN connected AS T2 ON T1.`atom_id` = T2.`atom_id` WHERE T2.`bond_id` = 'TR001_2_6'\t----- bird -----\ttoxicology"
  ],
  [
    "What is the difference between the number of molecules that are carcinogenic and those that are not?",
    "SELECT a.element, SUM(CASE WHEN m.label = '+' THEN 1 END) - SUM(CASE WHEN m.label = '-' THEN 1 END) AS difference; FROM connected c JOIN atom a ON c.atom_id = a.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id GROUP BY a.element;\t----- bird -----\ttoxicology"
  ],
  [
    "What are the atom IDs of the bond TR_000_2_5?",
    "-- What are the atom IDs of the bond TR_000_2_5? SELECT connected.atom_id AS atom_ids FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR_000_2_5';\t----- bird -----\ttoxicology"
  ],
  [
    "What are the bond IDs that have the same atom ID 2 of TR000_2?",
    "-- Hypothetical SQL command for the task. SELECT bond_id FROM connected WHERE atom_id = 'TR000_2';\t----- bird -----\ttoxicology"
  ],
  [
    "Please list top five molecules that have double bonds in alphabetical order.",
    "-- TYPE: QUERY.sql SELECT DISTINCT m.label, a1.element AS molecule_element FROM atom AS a1 JOIN connected c ON a1.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = ' = ';\t----- bird -----\ttoxicology"
  ],
  [
    "What is the percentage of double bonds in the molecule TR008?",
    "SELECT (SUM(CASE WHEN bond_type = \"'='\" THEN 1 ELSE 0 END) * 100 / (SELECT COUNT(*) FROM bond b WHERE b.molecule_id = \"TR008\")) AS percent FROM bond WHERE molecule_id = \"TR008\";\t----- bird -----\ttoxicology"
  ],
  [
    "What is the percentage of molecules that are carcinogenic?",
    "SELECT DISTINCT T1.element FROM atom AS T1 WHERE T1.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');\t----- bird -----\ttoxicology"
  ],
  [
    "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage.",
    "-- How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer in percentage. SELECT (SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percent FROM atom WHERE molecule_id = 'TR206';\t----- bird -----\ttoxicology"
  ],
  [
    "What is the type of bond that molecule TR000 has when involved in any bonds?",
    "SELECT T4.bond_type AS result FROM bond AS T4 JOIN connected AS T3 ON T3.bond_id = T4.bond_id JOIN atom AS T2 ON T2.atom_id = T3.atom_id AND T2.molecule_id = 'TR000' WHERE T3.atom_id2 = T2.atom_id;\t----- bird -----\ttoxicology"
  ],
  [
    "What are the elements of the toxicology and label of molecule TR060?",
    "SELECT T1.label, ( SELECT GROUP_CONCAT(`element`) AS `elements` FROM ( SELECT T2.`element` FROM atom T2 WHERE T2.`molecule_id` = 'TR060' ORDER BY T2.`atom_id` ) query ) AS element_list FROM molecule T1 WHERE T1.`molecule_id` = 'TR060'\t----- bird -----\ttoxicology"
  ],
  [
    "Which bond type accounted for the majority of the bonds found in molecule TR018 and state whether or not this molecule is carcinogenic?",
    "-- Which bond type accounted for the majority of the bonds found in molecule TR018 -- and state whether or not this molecule is carcinogenic? WITH client_data AS ( SELECT T1.`molecule_id`, T2.label, T4.`bond_type` AS bond_type, COUNT(T4.`bond_type`) AS max_bonds FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3(atom_id) INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.`molecule_id` = 'TR018' GROUP BY T2.label, T4.`bond_type` ) SELECT label AS carcinogenic_label, bond_type, max_bonds FROM ( SELECT * FROM client_data UNION ALL SELECT NULL AS label, bond_type, COUNT(*) OVER (PARTITION BY bond_type) AS max_bonds FROM client_data WHERE bond_type IS NOT NULL AND max_bonds != 0 ) ORDER BY max_bonds DESC;\t----- bird -----\ttoxicology"
  ],
  [
    "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "SELECT element, molecule_id FROM ( SELECT A.element, M.molecule_id, CASE WHEN B.bond_type = '-' THEN 'single bond' END AS bond_status FROM atom A INNER JOIN connected C ON A.atom_id = C.atom_id2 -- Change this to be consistent with the join on next table. INNER JOIN bond B ON C.bond_id = B.bond_id INNER JOIN molecule M ON B.molecule_id = M.molecule_id WHERE M.label = '-' ) AS joined_tbles GROUP BY molecule_id, element ORDER BY molecule_id ASC;\t----- bird -----\ttoxicology"
  ],
  [
    "Please list top two bonds that happened with the molecule TR006 in alphabetical order.",
    "SELECT DISTINCT bond_type FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_type ASC LIMIT 2;\t----- bird -----\ttoxicology"
  ],
  [
    "How many bonds which involved atom 12 does molecule TR009 have?",
    "SELECT COUNT(T1.`bond_id`) FROM connected AS T1 JOIN bond AS T2 -- Join the bond table to get molecule_id from bond_id ON T1.`bond_id` = T2.`bond_id` WHERE T1.`atom_id2` LIKE 'TR009_12' AND T2.`molecule_id` = 'TR009';\t----- bird -----\ttoxicology"
  ],
  [
    "How many molecules are carcinogenic and have the bromine element?",
    "SELECT COUNT(*) FROM ( SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN (SELECT DISTINCT T2.molecule_id FROM atom AS T2 WHERE element = 'br') AS bromine_atoms ON T1.label = '+' ) AS carcinogenic_with_bromine;\t----- bird -----\ttoxicology"
  ],
  [
    "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "-- What are the bond type and the atoms of the bond ID of TR001_6_9? SELECT T4.bond_type AS bond_type, T3.element AS atom_element, T5.element AS adjacent_atom_element FROM connected AS T2 INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T2.bond_id = T4.bond_id INNER JOIN atom AS T5 ON T2.atom_id2 = T5.atom_id WHERE T4.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'TR001_6_9')\t----- bird -----\ttoxicology"
  ],
  [
    "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.",
    "-- Corrected SQL that joins necessary tables to find the molecule of TR001_10 SELECT M.label FROM connected AS T1 JOIN atom AS T2 ON T2.atom_id = T1.atom_id JOIN molecule AS M ON M.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_10'\t----- bird -----\ttoxicology"
  ],
  [
    "How many molecules have a triple bond type?",
    "SELECT * FROM Molecule WHERE label IN ('+', '-')\t----- bird -----\ttoxicology"
  ],
  [
    "How many connections does the atom 19 have?",
    "SELECT COUNT(*) FROM connected WHERE atom_id = 'TR%_19';\t----- bird -----\ttoxicology"
  ],
  [
    "List all the elements of the toxicology of the molecule \"TR004\".",
    "SELECT DISTINCT T1.element FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS M ON T1.molecule_id = M.molecule_id WHERE M.label = 'TR004';\t----- bird -----\ttoxicology"
  ],
  [
    "How many of the molecules are not carcinogenic?",
    "SELECT COUNT(*) AS `count` FROM molecule WHERE label = '-';\t----- bird -----\ttoxicology"
  ],
  [
    "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "SELECT m.* FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE substr(a.atom_id, 7, 2) BETWEEN '21' AND '25' AND m.label = '+';\t----- bird -----\ttoxicology"
  ],
  [
    "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "SELECT DISTINCT b.* FROM bond AS b JOIN connected AS c ON b.bond_id = c.bond_id JOIN atom AS a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE a.element IN ('p', 'n');\t----- bird -----\ttoxicology"
  ],
  [
    "Is the molecule with the most double bonds carcinogenic?",
    "-- Is the molecule with the most double bonds carcinogenic? SELECT M.label FROM molecule AS M JOIN bond AS B ON M.molecule_id = B.molecule_id GROUP BY M.label ORDER BY COUNT(CASE WHEN B.bond_type = '=' THEN 1 END) DESC;\t----- bird -----\ttoxicology"
  ],
  [
    "What is the average number of bonds the atoms with the element iodine have?",
    "SELECT COUNT(CASE WHEN atom.element = 'i' THEN connected.bond_id ELSE NULL END) / COUNT(connected.atom_id) AS avgBondsPerI FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id JOIN connected ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id AND atom.element='i';\t----- bird -----\ttoxicology"
  ],
  [
    "List the bond type and the bond ID of the atom 45.",
    "SELECT DISTINCT -- Group by atom_id2 to select distinct values T1.element AS element, T2.bond_type AS bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45;\t----- bird -----\ttoxicology"
  ],
  [
    "List all the elements of atoms that can not bond with any other atoms.",
    "WITH found_ids AS ( SELECT DISTINCT `atom_id` FROM connected ), disconnected AS ( SELECT atom_id FROM connected GROUP BY atom_id HAVING COUNT(DISTINCT bond_id) = 0 ), unique_elements AS ( SELECT T4.`element` FROM atom AS T4 -- Removed unnecessary tables and joined only relevant ones LEFT JOIN connected AS T1 ON T4.atom_id = T1.atom_id AND T4.element = T1.atom_id2 WHERE T1.atom_id IS NULL -- Atom that cannot bond with other atoms ) SELECT ue.`element` FROM unique_elements ue;\t----- bird -----\ttoxicology"
  ],
  [
    "What are the atoms of the triple bond with the molecule \"TR447\"?",
    "-- New SQL: SELECT b.molecule_id, b.bond_type, a.element FROM bond AS b JOIN atom AS a ON b.molecule_id = a.molecule_id WHERE b.molecule_id = 'TR447' AND b.`bond_type` = '#'; --- # SQLite script to demonstrate usage of new SQL. CREATE TABLE molecule ( -- Add your table description code or example records here if needed. ); INSERT INTO bond (molecule_id,bond_type) VALUES('tr447','#'); SELECT * FROM atomic_mass_table(1); -- If you can modify existing tables in this case replace name \"bond\" with given name from problem to avoid error\t----- bird -----\ttoxicology"
  ],
  [
    "What are the elements of the atoms of TR144_8_19?",
    "error: No SQL found in the input string\t----- bird -----\ttoxicology"
  ],
  [
    "Of all the carcinogenic molecules, which one has the most double bonds?",
    "SELECT b.molecule_id, COUNT(CASE WHEN c.bond_type = '=' THEN connected.atom_id END) AS bond_count FROM bond b INNER JOIN connected c ON b.bond_id = c.bond_id WHERE bond.bond_type IN ('=', '#') GROUP BY b.molecule_id ORDER BY bond_count DESC LIMIT 1;\t----- bird -----\ttoxicology"
  ],
  [
    "What is the least common element of all carcinogenic molecules?",
    "JOIN connected AS T3 ON (T2.atom_id = T3.atom_id OR T2.atom_id = T3.atom_id2)\t----- bird -----\ttoxicology"
  ],
  [
    "What are the atoms that can bond with the atom that has the element lead?",
    "SELECT T2.atom_id FROM connected C JOIN atom T1 ON C.atom_id = T1.atom_id JOIN atom T2 ON C.atom_id2 = T2.atom_id WHERE T1.element = 'pb';\t----- bird -----\ttoxicology"
  ],
  [
    "List the elements of all the triple bonds.",
    "SELECT a.`atom_id` AS `atom_id`, a.`molecule_id` AS `molecule_id`, a.`element` AS `element`, b.`bond_type` AS `bond_type` FROM atom AS a JOIN connected AS c ON a.`atom_id` = c.`atom_id` JOIN bond AS b ON c.`bond_id` = b.`bond_id` WHERE b.`bond_type` = '#';\t----- bird -----\ttoxicology"
  ],
  [
    "What percentage of bonds have the most common combination of atoms' elements?",
    "WITH subQuery AS ( SELECT COUNT(*) AS max_count FROM atom GROUP BY element ORDER BY max_count DESC LIMIT 1 ) SELECT COUNT(c2.atom_id) * 100.0 / (SELECT max_count FROM subQuery) AS percentage FROM connected AS c1 INNER JOIN connected AS c2 ON c1.bond_id = c2.bond_id;\t----- bird -----\ttoxicology"
  ],
  [
    "What proportion of single bonds are carcinogenic?",
    "SELECT COUNT(bond_id) AS total_bonds, SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS carcinogenic_count FROM bond AS b JOIN molecule ON b.molecule_id = molecule.molecule_id WHERE bond_type = '-';\t----- bird -----\ttoxicology"
  ],
  [
    "Calculate the total atoms consisting of the element carbon and hydrogen.",
    "SELECT SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) + -- counts 'c' SUM(CASE WHEN b.element = 'h' THEN 1 ELSE 0 END) FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN atom b ON c.atom_id2 = b.atom_id WHERE (a.element, b.element ) IN (('c', 'h'))\t----- bird -----\ttoxicology"
  ],
  [
    "List down atom id2 for atoms with element sulfur.",
    "SELECT T3.atom_id2 FROM atom AS T2 INNER JOIN connected AS T3 ON T3.atom_id = T2.atom_id WHERE T2.element = 's' ORDER BY T3.atom_id2 DESC LIMIT 1;\t----- bird -----\ttoxicology"
  ],
  [
    "What are the bond type for atoms with element Tin?",
    "SELECT `t3`.`bond_type` FROM connected AS t1 INNER JOIN atom AS t2 ON t1.`atom_id` = t2.`atom_id` INNER JOIN bond AS t3 ON t1.`bond_id` = t3 .`bond_id` WHERE t2.element= 'h'\t----- bird -----\ttoxicology"
  ],
  [
    "How many elements are there for single bond molecules?",
    "SELECT element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' GROUP BY T1.element\t----- bird -----\ttoxicology"
  ],
  [
    "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "-- Type: SQL SELECT COUNT(T3.element) FROM bond T1 JOIN connected T2 ON T1.bond_id = T2.bond_id LEFT JOIN atom T3 ON T2.atom_id2 = T3.atom_id AND T1.molecule_id = (SELECT molecule_id FROM molecule WHERE label IN ('Phosphorus', 'Bromine')) WHERE T3.element IN ('p', 'br') AND T1.bond_type = '#';\t----- bird -----\ttoxicology"
  ],
  [
    "Write down bond id for molecules that are carcinogenic.",
    "-- corrected query SELECT T3.bond_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T2.molecule_id = T1.molecule_id INNER JOIN connected AS T3 ON T2.atom_id = T3.atom_id WHERE T1.label = '+';\t----- bird -----\ttoxicology"
  ],
  [
    "Among the single bond molecule id, which molecules are not carcinogenic?",
    "SELECT DISTINCT m.label, a1.element, b.bond_type FROM molecule AS m JOIN atom AS a1 ON m.molecule_id = a1.molecule_id JOIN connected AS c ON a1.atom_id = c.atom_id JOIN bond AS b ON c.bond_id = b.bond_id;\t----- bird -----\ttoxicology"
  ],
  [
    "What is the composition of element chlorine in percentage among the single bond molecules?",
    "SELECT CAST( ( SELECT COUNT(T1.`atom_id`) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.`atom_id` = T2.`atom_id` WHERE `element` = 'cl' AND T1.`molecule_id` IN ( SELECT T3.`molecule_id` FROM bond AS T3 INNER JOIN molecule AS T4 ON T3.`molecule_id` = T4.`molecule_id` WHERE `bond_type` = '-' ) ) * 100.0 / ( SELECT COUNT(T1.`atom_id`) FROM atom AS T1 WHERE `element` NOT IN ('cl', 'h') ) AS decimal(10, 2)) AS percent\t----- bird -----\ttoxicology"
  ],
  [
    "What are the labels for TR000, TR001 and TR002?",
    "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');\t----- bird -----\ttoxicology"
  ],
  [
    "List down the molecule id for non carcinogenic molecules.",
    "-- SELECT molecule IDs for non-carcinogenic molecules SELECT T1.molecule_id FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' -- ORDER BY T1.label ASC\t----- bird -----\ttoxicology"
  ],
  [
    "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.",
    "SELECT COUNT(*) FROM molecule AS M1 WHERE label = '+' AND SUBSTR(molecule_id, 5, 4) BETWEEN '0000' AND '0300';\t----- bird -----\ttoxicology"
  ],
  [
    "List down the bond type for molecules from molecule id TR000 to TR050.",
    "SELECT DISTINCT m.`molecule_id`, CASE WHEN b.`bond_type` = '-' THEN 'single' WHEN b.`bond_type` = '=' THEN 'double' WHEN b.`bond_type` = '#' THEN 'triple' ELSE NULL --> Add this to avoid NULL values END AS `bond_type` FROM molecule m JOIN atom a ON m.`molecule_id` = a.`molecule_id` JOIN connected c ON a.`atom_id` = c.`atom_id` JOIN bond b ON c.`bond_id` = b.`bond_id` WHERE m.`label` BETWEEN 'TR000' AND 'TR050' AND b.`bond_type` IN ('=', '-', '#'); --> Add this to avoid NULL values\t----- bird -----\ttoxicology"
  ],
  [
    "What are the elements for bond id TR001_10_11?",
    "SELECT DISTINCT T2.element, bond_type FROM bond JOIN connected AS T1 ON bond.bond_id = connected.bond_id WHERE molecule_id IN ( SELECT molecule_id FROM connected WHERE connected.bond_id = 'TR001_10_11') AND bond_type IS NOT NULL;\t----- bird -----\ttoxicology"
  ],
  [
    "How many bond id have element iodine?",
    "SELECT distinct(atom_id) FROM atom WHERE element = 'i';\t----- bird -----\ttoxicology"
  ],
  [
    "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?",
    "SELECT COUNT(CASE WHEN T3.label = '+' THEN 1 END) AS num_carcinogenic, COUNT(CASE WHEN T3.label = '-' THEN 1 END) AS num_noncarcinogenic FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id;\t----- bird -----\ttoxicology"
  ],
  [
    "Does bond id TR001_1_8 have both element of chlorine and carbon?",
    "SELECT bond_id, element FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE bond_id = \"TR001_1_8\" AND atom.element IN (\"cl\", \"c\");\t----- bird -----\ttoxicology"
  ],
  [
    "List down two molecule id of triple bond non carcinogenic molecules with element carbon.",
    "SELECT DISTINCT T2.molecule_id FROM connected AS T1 JOIN atom AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'c' AND T2.element IN ('c');\t----- bird -----\ttoxicology"
  ],
  [
    "What is the percentage of element chlorine in carcinogenic molecules?",
    "SELECT element AS chlorine_percentage FROM atom WHERE element = 'cl'\t----- bird -----\ttoxicology"
  ],
  [
    "List the toxicology elements associated with molecule TR001.",
    "SELECT T1.element FROM atom AS T1 WHERE `molecule_id` = 'TR001'\t----- bird -----\ttoxicology"
  ],
  [
    "Give me the molecule ID of the double bond type.",
    "SELECT count(DISTINCT T2.molecule_ID) FROM bond AS T2\t----- bird -----\ttoxicology"
  ],
  [
    "Write down the atom IDs of the first and second atoms of triple bond type molecules.",
    "-- Corrected SQL script type: SQL SELECT C.atom_id AS first_atom, D.atom_id AS second_atom FROM connected C JOIN atom A ON C.atom_id = A.atom_id JOIN bond B ON C.bond_id = B.bond_id JOIN atom D ON C.atom_id2 = D.atom_id WHERE B.bond_type = '#' AND A.atom_id != D.atom_id;\t----- bird -----\ttoxicology"
  ],
  [
    "What are the toxicology elements associated with bond ID TR005_16_26?",
    "SELECT T2.`element`, COUNT(T3.`bond_id`) AS `count` FROM `connected` AS T1 INNER JOIN `atom` AS T2 ON T1.`atom_id` = T2.`atom_id` LEFT JOIN `bond` AS T3 ON T2.`molecule_id` = T3.`molecule_id` AND T1.`bond_id` = T3.`bond_id` WHERE T1.`bond_id` = 'TR005_16_26' AND (T1.`atom_id` = T2.`atom_id`) GROUP BY T2.`element`\t----- bird -----\ttoxicology"
  ],
  [
    "How many of the single bond type molecules are non-carcinogenic?",
    "SELECT b.bond_type FROM bond AS b INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE m.label = '-' AND b.bond_type = '-';\t----- bird -----\ttoxicology"
  ],
  [
    "What is the label for bond ID TR001_10_11?",
    "-- Type: SELECT SELECT m.label FROM bond b JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_id = 'TR001_10_11';\t----- bird -----\ttoxicology"
  ],
  [
    "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.",
    "-- Corrected SQL starting point. WITH bond_type_molecules AS ( SELECT DISTINCT b.bond_id, m.label FROM bond AS b JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '#' ) SELECT bond_id, label FROM bond_type_molecules;\t----- bird -----\ttoxicology"
  ],
  [
    "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "SELECT DISTINCT T2.element, COUNT(T1.molecule_id) AS count FROM molecule as T1 JOIN atom as T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND (T2.atom_id LIKE '_____4' OR T2.atom_id LIKE '%4_____') GROUP BY T2.element; -- type: SQL\t----- bird -----\ttoxicology"
  ],
  [
    "What is the ratio of Hydrogen elements in molecule ID TR006? Please indicate its label.",
    "-- Corrected table name SELECT ROUND(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) / COUNT(*), 2) AS hydrogen_ratio, m.label AS label FROM atom a INNER JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.molecule_id = 'TR006';\t----- bird -----\ttoxicology"
  ],
  [
    "Identify whether the chemical compound that contains Calcium is carcinogenic.",
    "-- Identify whether the chemical compound that contains Calcium is carcinogenic. SELECT m.label -- Chemical compound with calcium that are carcinogenic or non-carcinogenic FROM atom a INNER JOIN connected c ON a.atom_id = c.atom_id INNER JOIN bond b ON c.bond_id = b.bond_id INNER JOIN molecule m ON b.molecule_id = m.molecule_id WHERE a.element = 'ca';\t----- bird -----\ttoxicology"
  ],
  [
    "Determine the bond type that is formed in the chemical compound containing element Tellurium.",
    "SELECT bond_type FROM bond;\t----- bird -----\ttoxicology"
  ],
  [
    "Name chemical elements that form a bond TR001_10_11.",
    "SELECT A1.element AS Atom_1, COALESCE(A2.element, 'Unknown Element') AS Atom_2 FROM connected C JOIN atom A1 ON (C.atom_id = A1.atom_id) WHERE C.bond_id = 'TR001_10_11' JOIN connected C2 ON C2.bond_id = C.bond_id -- changed this line to join the two rows in the connected table that belong together from TR001_10_11 JOIN atom A2 ON (C.atom_id !== C2.atom_id) AND ((C2.atom_id2 = A2.atom_id) OR (C2.atom_id = A2.atom_id)); -- changed this line to check if C and C2 share the bonds ID and pick the correct id based on atom 1 or 2\t----- bird -----\ttoxicology"
  ],
  [
    "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.",
    "-- No need to create a table called `connected` here, as it already exists in the database. -- Remove unnecessary columns and subqueries SELECT ( SELECT COUNT(*) FROM connected AS T1 JOIN bond AS T2 ON T2.bond_id = T1.bond_id WHERE T2.bond_type = '#' ) * 100 / ( SELECT COUNT(*) FROM molecule ) AS percent_of_compounds_with_triple_bond\t----- bird -----\ttoxicology"
  ],
  [
    "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.",
    "SELECT 100 * SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS percent FROM bond WHERE molecule_id = 'TR047';\t----- bird -----\ttoxicology"
  ],
  [
    "Identify whether the molecule that contains atom TR001_1 is carcinogenic.",
    "SELECT label FROM molecule AS M WHERE 'TR001_1' IN (SELECT atom_id FROM atom AS A WHERE A.molecule_id = M.molecule_id);\t----- bird -----\ttoxicology"
  ],
  [
    "Is molecule TR151 carcinogenic?",
    "SELECT CASE WHEN (SELECT COUNT(*) > 0 FROM molecule WHERE label = '+') THEN 'Carcinogenic' ELSE 'Not carcinogenic' END AS is_carcinogenic_molecule;\t----- bird -----\ttoxicology"
  ],
  [
    "Which toxic element can be found in the molecule TR151?",
    "SELECT DISTINCT T1.element AS tr151_component FROM atom T1 INNER JOIN connected T2 ON T1.atom_id = T2.atom_id INNER JOIN bond T3 ON T2.bond_id = T3.bond_id WHERE T3.molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = 'TR151' );\t----- bird -----\ttoxicology"
  ],
  [
    "How many chemical compounds in the database are identified as carcinogenic.",
    "-- How many chemical compounds in the database are identified as carcinogenic. SELECT COUNT(DISTINCT M.`molecule_id`) FROM molecule AS M WHERE M.`label` = '+';\t----- bird -----\ttoxicology"
  ],
  [
    "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.",
    "SELECT T1.`atom_id` FROM atom AS T1 INNER JOIN ( SELECT `molecule_id` FROM molecule WHERE `label` IN ('+', '-') AND `molecule_id` BETWEEN 'TR010' AND 'TR050' ) AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`element` = 'c';\t----- bird -----\ttoxicology"
  ],
  [
    "How many atoms belong to the molecule labeled with carcinogenic compounds?",
    "-- The corrected script /* Type: SQL */ SELECT COUNT(DISTINCT A.molecule_id) AS Number_of_atoms_belonging_to_the_molecule_labeled_with_carcinogenic_compound, FROM atom AS A JOIN connected AS C ON A.atom_id = C.`atom_id` WHERE M.label = '+' GROUP BY A.molecule_id\t----- bird -----\ttoxicology"
  ],
  [
    "Which bond ids are double-bond with carcinogenic compound?",
    "SELECT DISTINCT connected.bond_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id LEFT JOIN bond ON connected.bond_id = bond.bond_id WHERE bond_type = ' = ' AND molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' );\t----- bird -----\ttoxicology"
  ],
  [
    "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?",
    "error: No SQL found in the input string\t----- bird -----\ttoxicology"
  ],
  [
    "Indicate the molecule id is belonging to the TR00_1_2 bond that has the first atom named TR00_1.",
    "-- Instead of directly searching for the bond_id like in ORIGINSAL_CODE, -- which implies specific knowledge of IDs not shared, query those bonds where the bond type -- '-'. This logic reflects molecular bonding structure considerations. AND T3.bond_type = '-' -- Drop the T2 atom selection from another T2 subselect based query within WHERE -- Given that our query correctly selects 'c' atoms which should be connected by specific TR00_1 bonds, let this filter occur\t----- bird -----\ttoxicology"
  ],
  [
    "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?",
    "-- Among the atoms that contain element carbon, which one does not contain compound carcinogenic? SELECT DISTINCT A.element FROM atom AS A JOIN connected AS C ON A.atom_id = C.atom_id JOIN bond AS B ON C.bond_id = B.bond_id WHERE A.element = 'c' -- Select only carbon atoms AND B.`bond_type` IS NULL OR B.`bond_type` NOT IN ( '-' )\t----- bird -----\ttoxicology"
  ],
  [
    "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.",
    "SELECT-- -- Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen. SELECT CAST(SUM(T2.`atom_id`) AS REAL) / COUNT(DISTINCT T4.`molecule_id`) * 100.0 AS `Percentage`, T1.`element` AS `Element`, COUNT(DISTINCT T3.`molecule_id`) AS `Number_of_molecules` FROM atom AS T1 INNER JOIN connected AS T2 ON T1.`atom_id1` = T2.`atom_id` AND T1.`atom_id2` = T2.`atom_id2` INNER JOIN molecule AS T3 ON T1.`molecule_id` = T3.`molecule_id` WHERE T1.`element` = 'h' AND T3.`label` = '+' GROUP BY T1.`element` ORDER BY T1.`element`;\t----- bird -----\ttoxicology"
  ],
  [
    "Is molecule TR124 carcinogenic?",
    "SELECT CASE WHEN (SELECT LABEL FROM molecule WHERE molecule_id = 'TR124') = '+' THEN TRUE ELSE FALSE END;\t----- bird -----\ttoxicology"
  ],
  [
    "What atoms comprise TR186?",
    "-- What atoms comprise TR186? SELECT DISTINCT T2.`element` FROM connected AS T1 INNER JOIN atom AS T2 ON T1.`atom_id` = T2.`atom_id` INNER JOIN molecule AS M ON T1.`bond_id` IN ( SELECT `bond_id` FROM bond WHERE `molecule_id` = M.`molecule_id` ) AND M.`label` = 'TR186'\t----- bird -----\ttoxicology"
  ],
  [
    "What is the bond type of TR007_4_19?",
    "SELECT T2.bond_type FROM connected AS T3 JOIN bond AS T2 ON T2.bond_id = T3.bond_id JOIN atom AS T1 -- Atom table contains element information, this join is here for further filtering. ON T1.atom_id = T3.atom_id2 AND T1.molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '--' INTERSECT SELECT molecule_id FROM molecule ) WHERE T1.molecule_id = 'TR007_4_19';\t----- bird -----\ttoxicology"
  ],
  [
    "Name the elements that comprise the atoms of bond TR001_2_4.",
    "-- Type: PRIMARY SQL script -- Name: sql1.sql SELECT DISTINCT T3.`element` FROM connected AS T2 INNER JOIN atom AS T3 ON T2.`atom_id` = T3.`atom_id` WHERE T2.`bond_id` IN (SELECT `bond_id` FROM bond WHERE `bond_type` LIKE '%TR001_%') GROUP BY T3.`element` ORDER BY T3.`element` ASC;\t----- bird -----\ttoxicology"
  ],
  [
    "How many double bonds does TR006 have and is it carcinogenic?",
    "error: No SQL found in the input string\t----- bird -----\ttoxicology"
  ],
  [
    "List all carcinogenic molecules and their elements.",
    "-- SQLite script to list all carcinogenic molecules along with their elements in the same string. SELECT m.molecule_id, GROUP_CONCAT(DISTINCT a.element SEPARATOR ', ') AS elements FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' -- Considering only '+', indicating carcinogenic molecules are considered. GROUP BY m.molecule_id; -- Group by the molecule ID to aggregate its elements\t----- bird -----\ttoxicology"
  ],
  [
    "Name all bonds with single bond types and what atoms are connected to the molecules.",
    "-- Create a view that selects distinct molecule labels with their first appearing bond type. CREATE VIEW molecule_bond_types AS SELECT DISTINCT T1.`molecule_id`, CASE WHEN T2.`bond_type` = '-' THEN 'single' ELSE NULL END AS `bond_type` FROM molecule T1 JOIN bond T2 ON T1.`molecule_id` = T2.`molecule_id`; -- Select molid, label from the group created. SELECT DISTINCT T1.`molecule_id`, T1.label FROM molecule JOIN molecule_bond_types AS mbt ON T1.molecule_id = mbt.molecule_id WHERE mbt.bond_type = 'single'; -- Join the view with molecule table to get atom_ids connected by single type. SELECT DISTINCT T2.`atom_id` , T4.`atom_id` FROM connected JOIN atom AS T2 ON atom.`atom_id` = connected.`atom_id` JOIN bond ON bond.`bond_id`=connected.`bond_id`; JOIN molecule_bond_types AS mbt ON bond.molecule_id = mbt.molecule_id WHERE mbt.bond_type = 'single';\t----- bird -----\ttoxicology"
  ],
  [
    "Which molecules have triple bonds and list all the elements they contain.",
    "SELECT DISTINCT T5.molecule_id FROM bond AS T5 WHERE T5.bond_type = '#';\t----- bird -----\ttoxicology"
  ],
  [
    "Name the atoms' elements that form bond TR000_2_3.",
    "SELECT DISTINCT element, COUNT(atom_id) as element_count, molecule_id FROM ( SELECT DISTINCT T3.element, atom_id, T2.molecule_id FROM connected AS T1 INNER JOIN atom AS T2 ON(T1.atom_id=T2.atom_id AND CONTAINS(SQL_LIKE_EXPR('--[ignore spaces]-->'), REPLACE(T1.atom_id, ' ', '')) = -- The expression should match both sides of the equation SQL_LIKE_REGEX('(?i)^REPLACE(BOTH % AND % IN (%s).*') , ['TR000 2 3', T2.`molecule_id`, '#'], 'i')) INNER JOIN bond AS T3 ON(T2.molecule_id=T3.molecule_id AND T1.bond_id = T3.bond_id) WHERE T3.`bond_id` = 'TR000_2_3' ) AS final_table GROUP BY element;\t----- bird -----\ttoxicology"
  ],
  [
    "How many bonds are created by bonding atoms with chlorine element?",
    "SELECT COUNT(b_conn.b_id) -- <--- Fixed here! FROM connected AS c JOIN atom ON c.atom_id = atom.atom_id AND c.atom_id2 = atom.atom_id2 -- added this column for join condition JOIN bond AS b ON c.conn_bond_id = b.b_id -- Specify the correct table aliases here! WHERE atom.element = 'cl'\t----- bird -----\ttoxicology"
  ],
  [
    "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?",
    "-- STEP 1: List out the atom id that belongs to the TR346 molecule SELECT T.atom_id FROM atom AS T JOIN connected AS C ON T.atom_id = C.atom_id JOIN molecule AS M ON T.molecule_id = M.molecule_id WHERE M.label = '-'; -- updated this condition to match actual label '.' -- STEP 2: Determine how many bond types can be created by this molecule SELECT COUNT(DISTINCT D.bond_type) AS count FROM connected AS C JOIN atom AS A ON C.atom_id = A.atom_id JOIN connected AS E ON C_atom_id = E.atom_id AND C.bond_id = E.bond_id JOIN bond AS D ON E.bond_id = D.bond_id;\t----- bird -----\ttoxicology"
  ],
  [
    "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?",
    "SELECT COUNT(*) FROM ( SELECT molecule_id FROM bond WHERE bond_type = ' = ' ) AS dbl_bond_mols JOIN molecule ON dbl_bond_mols.molecule_id = molecule.molecule_id WHERE label = '+'\t----- bird -----\ttoxicology"
  ],
  [
    "How many molecules without sulphur element is not having double bond?",
    "SELECT COUNT(T1.`molecule_id`) AS count_of_molecules_without_double_bond_with_sulphur_element_not_allowed FROM atom T1 JOIN connected t2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id NOT IN ( SELECT bond_id FROM bond WHERE bond_type =('=') ) AND EXISTS( SELECT 1 FROM connected AS c3 JOIN atom AS a3 ON c3.atom_id = a3.atom_id WHERE a3.element = 's' ) IS FALSE\t----- bird -----\ttoxicology"
  ],
  [
    "What is the carcinogenic label for bond TR001_2_4?",
    "SELECT DISTINCT label FROM molecule\t----- bird -----\ttoxicology"
  ],
  [
    "How many atoms belong to molecule id TR005?",
    "SELECT COUNT(DISTINCT T1.`atom_id`) FROM atom AS T1 JOIN connected AS T2 ON T1.`atom_id` = T2.`atom_id` WHERE T1.`molecule_id` ='TR005';\t----- bird -----\ttoxicology"
  ],
  [
    "How many single bonds are there in the list?",
    "DROP TABLE IF EXISTS bond, connected, molecule; CREATE TABLE atom ( atom_id INTEGER, molecule_id INTEGER, element TEXT ); INSERT INTO atom (atom_id, molecule_id, element) VALUES (1, 1, 'h'), (2, 1, 'c'), (3, 2, 'o'); CREATE TABLE bond ( bond_id INTEGER, molecule_id INTEGER, bond_type TEXT ); INSERT INTO bond (bond_id, molecule_id, bond_type) VALUES (1, 1, '-'), (2, 1, '='), (3, 2, '-'); CREATE TABLE connected ( atom_id INTEGER, atom_id2 INTEGER, bond_id INTEGER ); INSERT INTO connected (atom_id, atom_id2, bond_id) VALUES (1, 5, 1), (7, 10, 3); CREATE TABLE molecule ( molecule_id INTEGER, label TEXT ); INSERT INTO molecule (molecule_id, label) VALUES (1, '-'), (2, '='); SELECT COUNT(*) FROM ( SELECT DISTINCT connected.atom_id FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE EXISTS ( SELECT 1 FROM bond WHERE bond.molecule_id = atom.molecule_id AND bond.bond_type = '-' ) ) AS single_bonds;\t----- bird -----\ttoxicology"
  ],
  [
    "Among the molecules which contain \"cl\" element, which of them are carcinogenic?",
    "SELECT DISTINCT T1.`molecule_id` FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`element` = 'cl' AND T2.label = '+'\t----- bird -----\ttoxicology"
  ],
  [
    "Among the molecules which contain \"c\" element, which of them are not carcinogenic?",
    "SELECT m.label FROM molecule m JOIN ( SELECT DISTINCT a.molecule_id FROM atom a WHERE a.element = 'c' ) md ON m.molecule_id = md.molecule_id WHERE NOT EXISTS ( SELECT 1 FROM connected c JOIN atom a ON c.atom_id2 = a.atom_id WHERE a.element = 'c' );\t----- bird -----\ttoxicology"
  ],
  [
    "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.",
    "percentage ---------- 0.5\t----- bird -----\ttoxicology"
  ],
  [
    "What is the molecule id of bond id TR001_1_7?",
    "SELECT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_1_7'\t----- bird -----\ttoxicology"
  ],
  [
    "How many elements are contained in bond_id TR001_3_4?",
    "SELECT COUNT(DISTINCT T1.`element`) FROM atom AS T1 WHERE T1.`molecule_id` = (SELECT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_id` = 'TR001_3_4')\t----- bird -----\ttoxicology"
  ],
  [
    "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?",
    "SELECT DISTINCT T3.`bond_type` FROM connected AS T1 INNER JOIN atom AS T2 ON (T1.`atom_id` IN ('TR000_1', 'TR000_2') OR (T1.`atom_id` = T2.`atom_id`) AND T1.`atom_id`2 = T2.`atom_id`) INNER JOIN bond AS T3 ON T1.`bond_id` = T3.`bond_id`\t----- bird -----\ttoxicology"
  ],
  [
    "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?",
    "-- What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"? SELECT DISTINCT T1.molecule_id FROM atom AS T1 JOIN connected ON connected.atom_id = T1(atom_id) WHERE T1.atom_id IN ('TR000_4', 'TR000_2')\t----- bird -----\ttoxicology"
  ],
  [
    "What is the element of toxicology for the atom with the ID of TR000_1?",
    "SELECT T1.`element` FROM atom AS T1 WHERE T1.`molecule_id` = ( SELECT `molecule_id` FROM `atom` WHERE `atom_id` = \"TR000_1\")\t----- bird -----\ttoxicology"
  ],
  [
    "Is molecule TR000 is carcinogenic or not?",
    "SELECT * FROM molecule WHERE label = '-' OR EXISTS ( SELECT * FROM connected AS C3 INNER JOIN atom AS A1 ON A1.atom_id = C3.atom_id INNER JOIN atom AS T4 ON T4.atom_id = C3.atom_id2 INNER JOIN bond AS B2 ON B2.bond_id = C3.bond_id WHERE A1.element = 'ca' AND B2.bond_type IS NULL )\t----- bird -----\ttoxicology"
  ],
  [
    "Find the percentage of atoms with single bond.",
    "-- Find the percentage of atoms with single bond. SELECT CAST(SUM(CASE WHEN T2.`bond_type` = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.`bond_id`) AS percentage FROM connected T1 JOIN atom T3 ON T1.`atom_id` = T3.`atom_id` JOIN bond T2 ON T1.`bond_id` = T2.`bond_id`;\t----- bird -----\ttoxicology"
  ],
  [
    "How many carcinogenic molecules that consisted of Nitrogen?",
    "SELECT FROM WHERE GROUP BY HAVING ORDER BY JOIN ON COUNT SUM MAX | MIN (when joined and then selected)\t----- bird -----\ttoxicology"
  ],
  [
    "Which molecule consisted of Sulphur atom with double bond?",
    "-- Which molecule consisted of Sulphur atom with double bond? SELECT T4.label, T1.element, T2.bond_type FROM connected AS T3 JOIN atom AS T1 ON T3.atom_id = T1.atom_id -- Join atom and another atom of the same molecule JOIN bond AS T2 ON T3.bond_id = T2.bond_id JOIN molecule AS T4 ON T4.molecule_id = T1.molecule_id AND T4.molecule_id = T2.molecule_id WHERE T1.element = 's' -- Select atom which is sulphur only AND T2.bond_type = '='; -- Evidence: -- (label, element., bond_type.) -- e.g. -- ('S', 's', '='), -- ('H2SO4', 's', '=') -- Let's check in the query below if all sulphur atoms have a double bond SELECT distinct T3.molecule_id , COUNT(*) AS count_for_each_molecule_which_sulphur_has_double_bond FROM connected AS T3 JOIN atom AS T1 ON T3.atom_id = T1.atom_id -- Select sulphur atoms ONLY and related bond WHERE T3.bond_type = '=' AND T1.element = 's' GROUP BY T3.molecule_id; -- Evidence: -- (molecule_id, count_for_each_molecule_which_sulphur_has_double_bond) -- e.g. -- (1, 2)\t----- bird -----\ttoxicology"
  ],
  [
    "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "WITH atoms AS ( SELECT T1.`molecule_id`, COUNT(T3.`atom_id`) as `atoms` , P2.`label` FROM connected AS C INNER JOIN atom AS A ON C.`atom_id`=A.`atom_id` LEFT OUTER JOIN bond AS B1 ON C.`bond_id`=B1.`bond_id` GROUP BY (SELECT T1.`molecule_id`) ) SELECT M1.molecule_id, label FROM atoms M1 INNER JOIN M molecule M2 WHERE (atoms) > 5 AND P2.label = '-'\t----- bird -----\ttoxicology"
  ],
  [
    "List all the elements with double bond, consisted in molecule TR024.",
    "-- List all the elements with double bond, consisted in molecule TR024. -- Corrected SQL: SELECT T3.element FROM ( SELECT * FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id ) JOIN atom AS T3 ON T3.atom_id = T1.atom_id2 AND T1.bond_id = ? -- added the actual molecule ID and bond_type filter WHERE T2.molecule_id = 'TR024' AND T2.bond_type = '='; -- removed the table alias for better readability\t----- bird -----\ttoxicology"
  ],
  [
    "Which carcinogenic molecule have the highest number of atoms consisted in it?",
    "SELECT m.molecule_id, m.label, a.count AS max_atoms FROM molecule m JOIN ( SELECT mol.molecule_id, COUNT(a.atom_id) AS count FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule mol ON b.molecule_id = mol.molecule_id GROUP BY mol.molecule_id ) as a ON m.molecule_id = a.molecule_id ORDER BY max_atoms DESC LIMIT 1;\t----- bird -----\ttoxicology"
  ],
  [
    "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.",
    "-- step 1 query INSERT INTO atom VALUES ('h', 1, 'h'); INSERT INTO bond VALUES (1, 1, '#'); INSERT INTO connected VALUES (1, 2, 1); INSERT INTO molecule VALUES (1,'+'); -- run percentage query SELECT (SELECT COUNT(T1.element) FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'h' AND T3.bond_type = '#' AND (SELECT label FROM molecule) = '+') * 100.0 / ( SELECT COUNT(DISTINCT T4.molecule_id)FROM bond AS T3 JOIN connected AS T2 ON T3.bond_id = T2.bond_id JOIN atom AS T1 ON T2.atom_id = T1.atom_id JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'h' AND T3.bond_type = '#' ) AS percentage;\t----- bird -----\ttoxicology"
  ],
  [
    "How many of the molecules are carcinogenic?",
    "-- How many of the molecules are carcinogenic? SELECT COUNT(DISTINCT T1.label) AS num_carcinogenic_molecules FROM molecule AS T1 WHERE T1.molecule_id IN ( SELECT T2.molecule_id FROM atom AS T2 WHERE T2.atom_id = '95907' )\t----- bird -----\ttoxicology"
  ],
  [
    "Among the molecules between TR004 to TR010, how many of them has single bonds?",
    "SELECT COUNT(*) FROM bond WHERE `bond_type` = '-' AND `molecule_id` IN ( SELECT `molecule_id` FROM molecule WHERE `molecule_id` BETWEEN 'TR004' AND 'TR010' )\t----- bird -----\ttoxicology"
  ],
  [
    "In the molecule TR008, how many carbons are present?",
    "SELECT COUNT(*) as carbon_count FROM atom AS T1 JOIN connected AS T2 ON T1.`atom_id`=T2.`atom_id` WHERE T1.element = 'c' GROUP BY T1.molecule_id;\t----- bird -----\ttoxicology"
  ],
  [
    "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?",
    "SELECT D.element FROM atom D, molecule C, connected E WHERE D.molecule_id=C.molecule_id AND D.atom_id=E.atom_id AND D.atom_id != \"TR004_7\" AND C.label = '-' AND E.atom_id2= 'TR004_7'\t----- bird -----\ttoxicology"
  ],
  [
    "What is the total number of molecules with double bonded oxygen?",
    "-- Querying database to count molecules with double bonded oxygen SELECT COUNT(T1.atom_id) AS num_molecules FROM atom AS T1 INNER JOIN connected AS Ta ON T1.atom_id = Ta.atom_id INNER JOIN bond AS Tb ON Ta.bond_id = Tb.bond_id WHERE T1.element = 'o' AND Tb.bond_type = '=';\t----- bird -----\ttoxicology"
  ],
  [
    "in molecules with triple bonds, how many of them are not carcinogenic?",
    "SELECT COUNT(DISTINCT M.`molecule_id`) FROM molecule AS M INNER JOIN atom AS A1 ON M.`molecule_id` = A1.`molecule_id` INNER JOIN connected AS C ON C.`atom_id` = A1.`atom_id` INNER JOIN connected AS C2 ON C2.`atom_id2` = A1.`atom_id` INNER JOIN bond AS B ON B.`bond_id` = C.`bond_id` WHERE B.`bond_type` = '#' AND M.`label` = '-'\t----- bird -----\ttoxicology"
  ],
  [
    "List the element and bond type included in the molecule with molecule ID of TR016.",
    "SELECT T1.element, T4.bond_type FROM atom T1 INNER JOIN connected T2 ON T2.atom_id = T1.atom_id INNER JOIN bond T4 ON T4.molecule_id = 'TR016' AND T4.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR016';\t----- bird -----\ttoxicology"
  ],
  [
    "What is the atom ID of double bonded carbon in TR012 molecule?",
    "-- What is the atom ID of double bonded carbon in TR012 molecule? SELECT DISTINCT T1.atom_id FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id JOIN connected AS T3 ON T2.atom_id2 = T3.atom_id JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T1.element = 'c' AND T4.bond_type = '=' ORDER BY T1.molecule_id\t----- bird -----\ttoxicology"
  ],
  [
    "List the atom ID of the carcinogenic molecule that contains oxygen?",
    "SELECT A.`atom_id` FROM connected AS T1 JOIN atom AS A ON T1.`atom_id` = A.`atom_id` JOIN molecule AS M ON A.`molecule_id` = M.`molecule_id` WHERE M.label = '+' AND A.element ='o'\t----- bird -----\ttoxicology"
  ],
  [
    "Which are the cards that have incredibly powerful foils.",
    "SELECT c.*, COALESCE(st.translation, ct.name) AS translated_name, -- Select one code is fine for English version card info for our case. e.code AS base_set_code, -- Collect all legality formats GROUP_CONCAT(DISTINCT l.f2) AS allFormats, -- For each legal format: (the use of comma and || might vary based on the actual SQLite version or usage) (SELECT GROUP_CONCAT(DISTINCT fmt.f2, ',') FROM (SELECT 'Legacy' as f2 UNION ALL SELECT 'Vintage' AS f2 UNION ALL SELECT 'Commander' AS f2) AS fqs(fmt) GROUP BY fmt.f2) AS allFormatsCombined, # Combine Foreign & language Info fd.flavorText AS flavorText, COALESCE(fd.language, 'English') AS nativeLanguage FROM cards c -- Assume ID of table as `cards` LEFT JOIN sets s ON c.setCode = s.code -- Using card's set code to join with actual set data here. # LEFT JOIN set_translations st ON c.uuid = st.setCode LEFT JOIN foreign_data fd ON c.id = fd.`uuid` # Assuming uuid indeed is ID but verify schema for certainty. # Legalities: Include both individual formats & all formats combined LEFT JOIN ( SELECT id, GROUP_CONCAT(DISTINCT l.f2) AS allFormats, -- If it makes more sense to keep format and status split; this section could get updated. CASE WHEN f2 = 'Vintage' THEN 1 ELSE 0 END || CASE WHEN f1 LIKE '%Legacy%' OR f1='Legacy' THEN 1 ELSE 0 END AS lvg, l.f1 AS f1 FROM ( SELECT -- For each combination format and legality (ID) as a comma separated string. id, CONCAT(format , ': ', status) AS f1, status AS f2 FROM legalities ) AS l GROUP BY allFormats, id # Group by the combined formats, ID, and set it should suffice. ) AS LegalStatus ON c.id=LegalStatus.id # Using id instead of `uuid` here since assuming it's ID due to how I read initial schema could also try and rejoin this part using uuid with proper foreign table reference if indeed id & uuid are both keys. GROUP BY c.uuid, translated_name, e.code AS bs, allFormatsCombined AS afc, lvg as lgvg, # For SQL grouping purpose we need to explicitly group by this field flavorText;\t----- bird -----\tcard_games"
  ],
  [
    "What are the borderless cards available without powerful foils?",
    "SELECT DISTINCT D.name FROM foreign_data AS D LEFT JOIN cards AS C ON D.uuid = C.uuid WHERE (C.cardKingdomFoilId IS NULL AND C.cardKingdomId IS NOT NULL);\t----- bird -----\tcard_games"
  ],
  [
    "List the card names with value that cost more converted mana for the face.",
    "SELECT * FROM cards c WHERE ManaCost >= (SELECT AVG(ManaCost) FROM cards) / 100 * (:percentage_above + 1) AND ManaCost <= (SELECT AVG(ManaCost) FROM cards) * 100 / (:percentage_below + 1);\t----- bird -----\tcard_games"
  ],
  [
    "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "List all the mythic rarity print cards banned in gladiator format.",
    "SELECT c.type, -- changed this because we only want the mythic rarity cards which are Sorian or artifacts by default (type is basically just two kinds of artifacs but in this case) so instead use card_rarity which is not currently existing in your schema, assuming you meant it to be there c.text, l.format FROM cards AS c # Changed this join because `rules` will make less sense as \"Ruling\", hence I changed it back and then joined cards table by \"legalities\" since no direct link between them but now I changed it back, you should change it (see line under comment for an example). -- JOIN rules has been removed JOIN legalities AS l ON c.id = l.uuid # Corrected column name WHERE c.card_rarity LIKE 'Mythic'; # Changed this comparison because that will select only the cards we're looking for, not sure how it fits however in your actual schema with no such card like 'Mythic' exists but rather it's either Sorcery or Artifact. -- changed WHERE clause to use the column `card_rarity` we added and used LIKE (using the '%' symbol) instead of '=' to select any rows that match \"Mythic\" because now it matches Sorian mythic, and artifacts aren't currently defined on a card type so for clarity sake let's say we're looking at artifacts here since 'Sorian' is clearly an 'sorcery'.\t----- bird -----\tcard_games"
  ],
  [
    "For artifact type of cards that do not have multiple faces on the same card, state its legalities for vintage play format.",
    "SELECT s.* FROM sets s JOIN set_translations st ON st.setCode = s.code JOIN legalities l ON l.uuid = c.uuid WHERE l.format = 'vintage' AND s.totalSetSize > ( SELECT COUNT(id) FROM cards as ct WHERE ct.type = 'Artifact' AND ct.set_id = s.id );\t----- bird -----\tcard_games"
  ],
  [
    "List all the card id and artist with unknown power which are legal for commander play format.",
    "SELECT c.card_id AS CARD_ID, c.artist, l.status AS LEGAL_STATUS FROM cards c JOIN sets s ON c.set_code = s.code JOIN set_translations st ON s.code = st.setCode JOIN legalities l ON c.uuid = l.uuid WHERE c.format = 'Commander' AND l.status = 'Legal';\t----- bird -----\tcard_games"
  ],
  [
    "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "SELECT c.name, c.artist, ( SELECT r.date FROM rulings r WHERE r.uuid = c.uuid LIMIT 1 ) AS ruling_date, CASE COUNT(CASE WHEN ft.uuid IS NOT NULL THEN 1 ELSE NULL END) WHEN 0 THEN 'non-promotional' ELSE 'promotional' END AS is_promotional FROM cards c JOIN foreign_data ft ON c.uuid = ft.uuid GROUP BY c.name, c.artist;\t----- bird -----\tcard_games"
  ],
  [
    "State the alternative languages available for card named Annul numbered 29.",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Name all the cards which have alternative language in Japanese.",
    "SELECT DISTINCT r.date AS ruling_date, c.name AS card_name FROM rulings AS r JOIN cards AS c ON r.uuid = c.uuid WHERE EXISTS ( SELECT 1 FROM set_translations AS stt, sets AS ss, foreign_data AS fd WHERE fd.language LIKE 'Japanese' AND stt.translation LIKE '%JAPAN%' AND c.id = fd.id AND stt.setCode = ss.code );\t----- bird -----\tcard_games"
  ],
  [
    "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "SELECT (COUNT(S.id) / COUNT(DISTINCT C.id)) * 100 AS chinese_simplified_cards_percentage FROM set_translations S JOIN sets T ON S.setCode = T.code JOIN cards C ON T.code = C.setCode WHERE S.language = 'Chinese Simplified';\t----- bird -----\tcard_games"
  ],
  [
    "List all the sets available in Italian translation. State the total number of cards per set.",
    "SELECT s.name AS setName, d.totalCardNum, r.id AS rulingId, r.date AS date FROM ( SELECT DISTINCT code AS setCode FROM sets WHERE type = 'expansion' ) AS t JOIN sets s ON t.setCode = s.code JOIN foreign_data d ON s.code = d.code # Corrected column name here LEFT JOIN ( SELECT sc.setCode, st.translation AS rulingId, r.id AS rulingId, r.date AS date FROM set_translations st LEFT JOIN rulings r ON st.id = r.id ) e ON s.code = e.setCode AND (e.rulingId IS NOT NULL OR e.rulingId = 0) WHERE e.translation IN ('Italian');\t----- bird -----\tcard_games"
  ],
  [
    "How many types of cards does the artist Aaron Boyd illustrated about card art?",
    "SELECT DISTINCT type FROM cards WHERE text LIKE '%Aaron Boyd%';\t----- bird -----\tcard_games"
  ],
  [
    "What is the keyword found on card 'Angel of Mercy'?",
    "SELECT GROUP_CONCAT(DISTINCT T3.keyword) AS keywords FROM cards AS T1 JOIN set_translations AS T2 ON T1.uuid = T2.set_uuid AND T1.setCode = T2.setCode LEFT JOIN multiverseid AS T3 ON EXISTS ( SELECT 1 FROM multiverseid M WHERE T3.id IN (SELECT card_id FROM multiverseid WHERE keyword = T1.keyword) ) GROUP BY T3.keyword;\t----- bird -----\tcard_games"
  ],
  [
    "How many cards have infinite power?",
    "SELECT COUNT(*) FROM cards WHERE POWER = '*';\t----- bird -----\tcard_games"
  ],
  [
    "What type of promotion is of card 'Duress'?",
    "PRAGMA foreign_keys=OFF; // do your thing here PRAGMA foreign_keys=ON;\t----- bird -----\tcard_games"
  ],
  [
    "What is the border color of card \"Ancestor's Chosen\"?",
    "SELECT distinct f.`name` -- I'm assuming border could be a property related to expansion/editions FROM foreign_data f WHERE f.name like '%Ancestor%Chosen%';\t----- bird -----\tcard_games"
  ],
  [
    "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
    "SELECT T1.originaltype FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen'\t----- bird -----\tcard_games"
  ],
  [
    "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
    "SELECT C1.name, CASE WHEN (RT.uuid = '1F5DE1CE-4DCD-B2FE-D7B0-C8BC9BF7BE45') THEN 1 ELSE 0 END AS angel_of_mercy_id FROM cards C1 JOIN rulings RT ON RT.uuid = C1.uuid;\t----- bird -----\tcard_games"
  ],
  [
    "How many cards of legalities whose status is restricted have text boxes?",
    "SELECT COUNT(T2.variations) AS \"# of variations\", T1.flavorText AS \"flavorText\", # ... other columns here ... FROM cards AS T1 JOIN cards_translations AS T2 ON T1.uuid=T2.uuid;\t----- bird -----\tcard_games"
  ],
  [
    "What is the description about the ruling of card \"Condemn\"?",
    "SELECT c.id AS card_id, r.text AS ruling_text, f.favorText AS flavor FROM cards c JOIN rulings r ON c.uuid = r.uuid JOIN foreign_data f ON c.uuid = f.uuid WHERE c.name = 'Ancestor''s Chosen';\t----- bird -----\tcard_games"
  ],
  [
    "How many cards of legalities whose status is restricted are found in a starter deck?",
    "SELECT COUNT(*) FROM legalities JOIN cards ON cards.uuid = legalities.uuid WHERE status = \"Restricted\" AND isStarter = 1;\t----- bird -----\tcard_games"
  ],
  [
    "What is the status of card \"Cloudchaser Eagle\"?",
    "SELECT l.status FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.name = 'Cloudchaser Eagle';\t----- bird -----\tcard_games"
  ],
  [
    "What is the type of card \"Benalish Knight\"?",
    "SELECT c.type, fd.name AS foreign_text FROM cards c LEFT JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Benalish Knight';\t----- bird -----\tcard_games"
  ],
  [
    "What is the rule of playing card \"Benalish Knight\"?",
    "SELECT MAX(CASE WHEN l.status = 'Legal' THEN 1 ELSE -1 END) OVER (PARTITION BY c.format) as legal_status, l.status, c.name FROM cards c JOIN FOREIGN_DATA fd ON c.uuid = fd.uuid JOIN LEGALITIES l ON c.uuid = l.uuid WHERE c.name LIKE '%' + 'Benalish Knight' + '%';\t----- bird -----\tcard_games"
  ],
  [
    "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "What is the percentage of borderless cards?",
    "SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN cards.code ELSE NULL END) * 100.0 / COUNT(*)) AS borderless_percentage FROM cards;\t----- bird -----\tcard_games"
  ],
  [
    "How many cards that illusrtated in German have been reprinted?",
    "SELECT COUNT(*) FROM cards AS c WHERE c.uuid IN ( SELECT fd uuid FROM foreign_data fd INNER JOIN sets s ON fd.uuid = s.uuid WHERE s.isForeignOnly = 1 AND s.language = \"German\" ) AND c.id IN (SELECT id from set-translations)\t----- bird -----\tcard_games"
  ],
  [
    "How many borderless cards are illustrated in Russian?",
    "SELECT COUNT(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.Language = 'Russian' AND sets.type LIKE '%borderless%' AND (sets.isFoilOnly | isNonfoilOnly) & 1 != 0 -- this should filter cards that do not have any text; -- and we only care about borderless cards which are also illustrated in Russian language;\t----- bird -----\tcard_games"
  ],
  [
    "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "SELECT DISTINCT s.Name FROM cards c JOIN set_translations st ON 1 = 1 JOIN sets s ON st.setCode = s.code WHERE st.translation ILIKE '%Zendikar%' and translation_language = 'English'\t----- bird -----\tcard_games"
  ],
  [
    "How many cards are there with toughness of 99?",
    "SELECT COUNT(*) FROM cards WHERE toughness = 99;\t----- bird -----\tcard_games"
  ],
  [
    "Name the cards that were illustrated by Aaron Boyd.",
    "SELECT -- DROP TABLE cards; (you can use CREATE OR REPLACE TABLE to replace existing table) -- Table: set_translations CREATE TABLE IF NOT EXISTS set_translations ( id INTEGER PRIMARY KEY, language TEXT NOT NULL, setCode TEXT NOT NULL, translation TEXT, uuid TEXT ); -- Table: sets CREATE TABLE IF NOT EXISTS sets ( id INTEGER PRIMARY KEY, code TEXT NOT NULL ); -- Table: foreign_data CREATE TABLE IF NOT EXISTS foreign_data ( id INTEGER PRIMARY KEY, type TEXT NOT NULL, subtype TEXT, uuid TEXT UNIQUE ); -- Table: cards CREATE TABLE IF NOT EXISTS cards ( id INTEGER PRIMARY KEY, uuid TEXT NOT NULL UNIQUE ); -- Table: legalities CREATE TABLE IF NOT EXISTS legalities ( id INTEGER PRIMARY KEY, format TEXT, status TEXT, uuid TEXT UNIQUE, FOREIGN KEY (uuid) REFERENCES cards(uuid) ); -- Table: rulings CREATE TABLE IF NOT EXISTS rulings ( id INTEGER PRIMARY KEY, date TEXT, text TEXT, uuid TEXT UNIQUE, FOREIGN KEY (uuid) REFERENCES cards(uuid) );\t----- bird -----\tcard_games"
  ],
  [
    "How many black border cards are only available on mtgo?",
    "SELECT c.uuid FROM cards c JOIN legalities l ON c(uuid = l.uuid) WHERE l.status = 'Legal' AND l.format IN('duel', 'legacy', 'modern');\t----- bird -----\tcard_games"
  ],
  [
    "List down all the card IDs with converted mana cost of 0.",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "What are the card layout of cards with keyword of flying?",
    "SELECT s.name AS setName, COUNT(DISTINCT c.id) AS numCards FROM cards c INNER JOIN sets s ON c.id = s.id # Fix: Joining on uuid (id) columns GROUP BY s.name;\t----- bird -----\tcard_games"
  ],
  [
    "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "SELECT COUNT(*) FROM ( SELECT c.* FROM cards c WHERE `type` = 'Monster - Dragon' AND subtype != 'Dragon' ) AS subquery;\t----- bird -----\tcard_games"
  ],
  [
    "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.",
    "SELECT s.id AS set_id, c.id AS card_id FROM sets s JOIN cards c ON s.code = c.setCode;\t----- bird -----\tcard_games"
  ],
  [
    "What are the cards belong to duel deck a? List the ID.",
    "SELECT foreign_data.uuid FROM legalities AS l JOIN foreign_data AS c ON l.uuid = c.uuid JOIN set_translations st ON sets.code = st.setCode JOIN sets s ON st.setCode = s.code WHERE s.name = 'Duel Deck A';\t----- bird -----\tcard_games"
  ],
  [
    "List the edhrecRank for cards with frame version 2015.",
    "SELECT fd.id, fd.name, fd.flavorText FROM foreign_data AS fd JOIN sets AS s ON (s.code = 'Golgari');\t----- bird -----\tcard_games"
  ],
  [
    "List down the name of artists for cards in Chinese Simplified.",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "What are the cards that only available in paper and Japanese language?",
    "SELECT cards.id, cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE FOREIGN_DATA.language = 'Japanese';\t----- bird -----\tcard_games"
  ],
  [
    "How many of the banned cards are white border?",
    "SELECT cards.type FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = \"vintage\" AND legalities.status = \"Banned\";\t----- bird -----\tcard_games"
  ],
  [
    "List down the uuid for legacy cards and the foreign language of these cards.",
    "SELECT l.uuid AS legacy_card_uuid, fd.language AS foreign_language FROM legalities l JOIN cards c ON l.uuid = c.uuid JOIN foreign_data fd ON c.uuid = fd.uuid WHERE l.format = 'legacy';\t----- bird -----\tcard_games"
  ],
  [
    "Write down the ruling of Beacon of Immortality.",
    "WITH Beacon_UUID AS ( SELECT uuid FROM cards WHERE name = 'Beacon of Immortality' ) SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM Beacon_UUID);\t----- bird -----\tcard_games"
  ],
  [
    "How many cards are having future frame version and what are the legality status of these cards?",
    "SELECT COALESCE(T4.status, '') AS status, COALESCE(T3.type, '') AS type FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode AND T2.language IS NOT NULL LEFT JOIN cards T3 ON T2.id = T3.id LEFT JOIN foreign_data T4 ON T3.uuid = T4.uuid LEFT JOIN legalities T5 ON T3.uuid = T5.uuid LEFT JOIN rulings Ruling ON T3.uuid = Ruling.uuid GROUP BY type, status UNION SELECT COALESCE(T4.status, '') AS status, COALESCE(T3.type, '') AS type FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode AND T2.language IS NOT NULL LEFT JOIN cards T3 ON T2.id = T3.id LEFT JOIN foreign_data T4 ON T3.uuid = T4.uuid LEFT JOIN legalities T5 ON T3.uuid = T5.uuid WHERE T4.status IN ( SELECT DISTINCT COALESCE(T4.status, '') AS status FROM sets AS T1 LEFT JOIN set_translations T2 ON T1.code = T2.setCode AND T2.language IS NOT NULL LEFT JOIN cards T3 ON T2.id = T3.id LEFT JOIN foreign_data T4 ON T3.uuid = T4.uuid LEFT JOIN legalities T5 ON T3.uuid = T5.uuid WHERE T1.type = 'product' AND T3.frameVersion = 'future' AND T3.status NOT IN ('legal') )\t----- bird -----\tcard_games"
  ],
  [
    "What are the cards for set OGW? State the colour for these cards.",
    "SELECT c.*, cvt.Color, r.Rarity -- I found rarity relationship with variation first FROM cards c JOIN variations v ON c.uuid = v.card_uuid LEFT JOIN card_variations cv ON c.uuid = cv.card_uuid -- assuming variations may not have color/rarity info LEFT JOIN colors cvt ON cv.color_id = cvt.id LEFT JOIN rarity_types r ON cv.rarity_id = r.id\t----- bird -----\tcard_games"
  ],
  [
    "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
    "SELECT st.translation FROM sets AS s JOIN cards AS c ON s.code = c.setCode JOIN set_translations AS st ON c.uuid = st.id WHERE s.code='10E' AND c.convertedManaCost=5;\t----- bird -----\tcard_games"
  ],
  [
    "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "SELECT c.name, r.date AS ruling_date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.type LIKE 'Creature%';\t----- bird -----\tcard_games"
  ],
  [
    "What are the colors of cards from ID 1-20? What are the format of these cards?",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "SELECT c.id, st.translation FROM cards AS c JOIN ( SELECT s.`id`, fd.`language` FROM sets AS s JOIN set_translations st ON (s.code = st.setCode) ) AS ft ON (c.id = ft.id AND ft.language IN ('Japanese', 'French', 'German', 'Italian', 'Spanish')) WHERE (c.`type` IN ('Creature', 'Artifact'));\t----- bird -----\tcard_games"
  ],
  [
    "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
    "SELECT c.name, fd.type AS card_type, c.text AS card_text, r.date AS ruling_date FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;\t----- bird -----\tcard_games"
  ],
  [
    "On how many cards designed by John Avon is its foil non-powerful?",
    "SELECT 'DROP TABLE IF EXISTS cards; ' || 'DROP TABLE IF EXISTS legalities; ' || 'DROP TABLE IF EXISTS sets; ' || 'DROP TABLE IF EXISTS set_translations; ' || 'DROP TABLE IF EXISTS rulings; ' INTO sqlite_master; CREATE TABLE cards ( id INTEGER PRIMARY KEY AUTOINCREMENT, flavor_text TEXT NOT NULL, language TEXT NOT NULL CHECK(language IN ('Japanese', 'French', 'German', 'Italian', 'Spanish', 'Portuguese (Brazil)')), multiverse_id INTEGER NOT NULL, name TEXT NOT NULL, text TEXT, type TEXT NOT NULL, uuid TEXT PRIMARY KEY ); CREATE TABLE legalities ( id INTEGER PRIMARY KEY AUTOINCREMENT, format TEXT NOT NULL CHECK(format IN ('vintage', 'legacy', 'commander', 'duel', 'modern', 'penny')), status TEXT NOT NULL CHECK(status IN ('Legal', 'Banned', 'Restricted')), uuid TEXT UNIQUE, -- changed to uuid with unique constraint card_uuid TEXT NOT NULL, FOREIGN KEY (card_uuid) REFERENCES cards(uuid) ); CREATE TABLE sets ( id INTEGER PRIMARY KEY AUTOINCREMENT, base_set_size INTEGER NOT NULL, block TEXT NOT NULL, booster TEXT NOT NULL, code TEXT NOT NULL PRIMARY KEY, -- added as primary key to enforce uniqueness is_foil_only INTEGER NOT NULL CHECK(is_foil_only IN (0, 1)), is_foreign_only INTEGER NOT NULL CHECK(is_foreign_only IN (0, 1)), is_non_foil_only INTEGER NOT NULL CHECK(is_non_foil_only IN (0, 1)), is_online_only INTEGER NOT NULL CHECK(is_online_only IN (0, 1)), is_partial_preview INTEGER NOT NULL CHECK(is_partial_preview IN (0, 1)), keyrune_code TEXT, mcm_id INTEGER NOT NULL, mcm_id_extras TEXT, mcm_name TEXT, mtgo_code TEXT, name TEXT NOT NULL, parent_code TEXT NOT NULL, release_date DATE, -- changed from not null to not required tcg_player_group_id INTEGER NOT NULL, total_set_size INTEGER NOT NULL, type TEXT NOT NULL ); CREATE TABLE set_translations ( id INTEGER PRIMARY KEY AUTOINCREMENT, language TEXT NOT NULL CHECK(language IN ('Spanish', 'Russian', 'Portuguese (Brazil)', 'Korean', 'Japanese', 'Italian')), set_code TEXT NOT NULL REFERENCES sets(code), translation TEXT ); CREATE TABLE rulings ( id INTEGER PRIMARY KEY AUTOINCREMENT, date DATE, -- changed from not null to not required text TEXT, card_uuid TEXT NOT NULL, FOREIGN KEY (card_uuid) REFERENCES cards(uuid) );\t----- bird -----\tcard_games"
  ],
  [
    "How many white bordered cards are powerful?",
    "SELECT COUNT(*) FROM ( SELECT c1.* FROM cards c1 INNER JOIN rulings r ON c1.uuid = r.uuid WHERE c1.borderColor = 'white' ) AS subset INNER JOIN legalities l ON subset.uuid = l.uuid;\t----- bird -----\tcard_games"
  ],
  [
    "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?",
    "SELECT * FROM cards WHERE artist = 'Märta Lundberg' AND (availability = 'mtgo' OR artwork = 'watermark') AND setCode IN ('XLN', 'M19');\t----- bird -----\tcard_games"
  ],
  [
    "How many cards with a 1993 frame version and available on paper have a sensitive content warning?",
    "SELECT c.id AS CardId, st.translation FROM cards c INNER JOIN sets s ON c.setid = s.id INNER JOIN set_translations st ON s.code = st.setCode AND c.language = 'Italian' WHERE (c.availability = 'paper') AND (c.type = 'PMPS') AND (s.name IS NOT NULL); -- Filter out sets without a name\t----- bird -----\tcard_games"
  ],
  [
    "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "SELECT c.manaCost, cf.frame AS frame, s.name AS setName FROM cards c JOIN sets s ON c.setCode = s.code JOIN card_faces cf ON c.id = cf.cardId;\t----- bird -----\tcard_games"
  ],
  [
    "How much unconverted mana do all the cards created by Rob Alexander cost in total?",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Lists all types of cards available in arena.",
    "SELECT REPLACE(CASE WHEN c.subtypes LIKE '%none%' THEN '' ELSE c.subtypes END, 'none', 'constant_to_replaced') AS replaced_subtypes FROM cards c;\t----- bird -----\tcard_games"
  ],
  [
    "Lists the set code of all cards translated into Spanish.",
    "SELECT DISTINCT T1.code FROM sets AS T1 JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Spanish';\t----- bird -----\tcard_games"
  ],
  [
    "What percentage of legendary frame effect cards have a maximum starting maximun hand\nsize of +3?",
    "SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM cards WHERE frameEffects = 'legendary') as result FROM cards WHERE frameEffects = 'legendary' AND hand = '+3';\t----- bird -----\tcard_games"
  ],
  [
    "What is the percentage of Story Spotlight cards that also have a text box? List them by their ID.",
    "SELECT COUNT(id) FROM cards WHERE id IS NOT NULL AND text IS NOT NULL;\t----- bird -----\tcard_games"
  ],
  [
    "Calculate the percentage of cards in Spanish. List them by name.",
    "SELECT name, ROUND((COUNT(*) / (SELECT COUNT(DISTINCT id) FROM foreign_data))*100, 2) AS spanish_card_percentage FROM foreign_data WHERE language = 'Spanish' GROUP BY name;\t----- bird -----\tcard_games"
  ],
  [
    "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.",
    "SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.baseSetSize = 309;\t----- bird -----\tcard_games"
  ],
  [
    "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "SELECT COUNT(*) FROM ( SELECT s.code FROM sets s WHERE s.block = 'Commander' ) c JOIN set_translations st ON c.code = st.setCode WHERE st.language = 'Portuguese (Brasil)';\t----- bird -----\tcard_games"
  ],
  [
    "Lists by ID all Creature-type cards with legal status.",
    "SELECT c.id AS Cards_Id, -- Other needed columns from cards. l.id + r.id AS combined_ID, c.uuid AS card_uuid, l.format AS format, l.status AS status, r.text AS ruling_text, -- Other needed columns from joined tables. FROM cards c LEFT JOIN legalities l ON c.uuid = l.uuid LEFT JOIN rulings r ON c.uuid = r.uuid;\t----- bird -----\tcard_games"
  ],
  [
    "Lists all types of cards in German.",
    "CAST(r.date AS DATE) - CAST(s.releaseDate AS DATE)\t----- bird -----\tcard_games"
  ],
  [
    "How many null power cards contain info about the triggered ability",
    "release_date DATE NOT NULL, total_set_size INTEGER, card_count INTEGER\t----- bird -----\tcard_games"
  ],
  [
    "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability\" that do not have multiple faces.",
    "SELECT c.* FROM cards AS c WHERE NOT ( SELECT 1 FROM legalities AS l WHERE c.uuid = l.uuid AND l.format IN ('vintage','legacy', 'commander', 'duel', 'modern', 'penny') ) AND ( SELECT 1 FROM rulings AS r WHERE c.uuid = r.uuid AND r.text != \"This is a triggered mana ability\" )\t----- bird -----\tcard_games"
  ],
  [
    "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "SELECT D.id FROM foreign_data D JOIN cards C ON D.uuid = C.uuid WHERE C.id IN ( SELECT id FROM cards WHERE artist = 'Erica Yang' AND name = 'watermark');\t----- bird -----\tcard_games"
  ],
  [
    "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "SELECT DISTINCT c.name, fd.translation FROM cards c JOIN set_translations st ON st.setCode = 'your_set_code' JOIN foreign_data fd ON fd.uuid = c.uuid WHERE fd.language = 'French';\t----- bird -----\tcard_games"
  ],
  [
    "How many cards with print rarity have ruling text printed on 10/01/2009?",
    "SELECT c.* FROM cards AS c WHERE c.uuid IN ( SELECT uuid FROM foreign_data UNION SELECT uuid FROM rulings );\t----- bird -----\tcard_games"
  ],
  [
    "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "SELECT s.code, st.language FROM sets AS s INNER JOIN set_translations AS st ON s.code = st.setCode WHERE s.baseSetSize = 180;\t----- bird -----\tcard_games"
  ],
  [
    "What percentage of cards with format commander and legal status do not have a content warning?",
    "SELECT (SUM(CASE WHEN hasContentWarning = 1 THEN 1 ELSE 0 END)) / (SELECT COUNT(*) FROM legalities WHERE status = 'Legal' AND format = 'commander') * 100 AS Percentage;\t----- bird -----\tcard_games"
  ],
  [
    "What percentage of cards without power are in French?",
    "SELECT COUNT(*) OVER (PARTITION BY language = 'French' ORDER BY (CASE WHEN flavorText IS NULL THEN '*' ELSE flavorText END)) AS total FROM foreign_data;\t----- bird -----\tcard_games"
  ],
  [
    "What percentage of Japanese translated sets are expansion sets?",
    "SELECT (COUNT(DISTINCT st.setCode) FILTER (WHERE s.type = 'expansion')) * 100 / COUNT(DISTINCT st.setCode) FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE st.language = 'Japanese';\t----- bird -----\tcard_games"
  ],
  [
    "What kind of printing is on the card that Daren Bader created?",
    "SELECT DISTINCT L.format FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.artist = 'Daren Bader' AND L.status != 'Banned' AND L.status != 'Restricted';\t----- bird -----\tcard_games"
  ],
  [
    "How many color cards with no borders have been ranked higher than 12000 on EDHRec?",
    "SELECT c.id FROM cards c WHERE EXISTS ( SELECT 1 FROM legalities l JOIN set_translations st ON l.uuid = cardData.uuid AND l.uuid != NULL -- This last filter depends on logic you used somewhere else, so you might need to remove or change it. WHERE c.id = cardData.id AND card_data.uuid = c.uuid ) AND EXISTS ( SELECT 1 FROM legalities l JOIN set_translations st ON l.uuid = cardData.uuid AND l.uuid != NULL -- This last filter depends on logic you used somewhere else, so you might need to remove or change it. WHERE c.id = cardData.id AND fd.language = 'Set Language' ) AND EXISTS ( SELECT 1 FROM legalities l JOIN set_translations st ON l.uuid = cardData.uuid AND l.uuid != NULL WHERE c.id = (SELECT id FROM cards WHERE uuid=card_data.uuid) AND er.rank > 12000 );\t----- bird -----\tcard_games"
  ],
  [
    "How many cards are oversized, reprinted, and printed for promotions?",
    "CREATE INDEX idx_set_trans_code ON set_translations(code); CREATE INDEX idx_card_uuid ON cards(uuid); CREATE INDEX idx_sets_code ON sets(code);\t----- bird -----\tcard_games"
  ],
  [
    "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.",
    "SELECT C.name FROM cards as C JOIN legalities as L ON C.uuid = L.uuid WHERE L.status = 'Legal' AND L.format IN ('Arena League', 'vintage', 'legacy', 'commander', 'duel', 'modern', 'penny') ORDER BY C.name LIMIT 3;\t----- bird -----\tcard_games"
  ],
  [
    "What is the language of the card with the multiverse number 149934?",
    "SELECT DISTINCT COALESCE( ( SELECT S.translation FROM set_translations AS S WHERE C.multiverseid = 149934 AND S.setCode == 'ZNR' LIMIT 1 ), null ) , ( SELECT F.language FROM foreign_data AS F WHERE C.uuid = ? LIMIT 1; ), NULL) As translation FROM cards WHERE multiverseid = 149934;\t----- bird -----\tcard_games"
  ],
  [
    "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.",
    "-- Improved SQL considering versions SELECT s.code AS set_code, v.set_id AS card_set_id FROM cards c INNER JOIN sets s ON s.id = c.set_id INNER JOIN versions v ON v.card_id = c.id;\t----- bird -----\tcard_games"
  ],
  [
    "What proportion of cards do not have a text box with a normal layout?",
    "SELECT C.id, S.name AS set_name, L.status AS legality_status FROM cards AS C JOIN sets AS S ON C.setCode = S.code LEFT JOIN legalities AS L ON C.uuid = L.uuid;\t----- bird -----\tcard_games"
  ],
  [
    "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?",
    "SELECT SETS.code AS set_code, SETS.name AS set_name FROM sets WHERE EXISTS ( SELECT 1 FROM set_translations STL WHERE STL.setCode = SETS.code AND STL.translation Is Not NULL );\t----- bird -----\tcard_games"
  ],
  [
    "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.",
    "SELECT name FROM ( SELECT name, ROW_NUMBER() OVER (ORDER BY name) AS row_num FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ) as ordered_sets WHERE row_num <= 3;\t----- bird -----\tcard_games"
  ],
  [
    "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC';\t----- bird -----\tcard_games"
  ],
  [
    "What is the name of set number 5 and its translation?",
    "SELECT T1.name AS setName, COALESCE(T2.translation, T1.code) AS translation FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.id = T2.setCode AND T2.language = 'English' WHERE T1.id = 5;\t----- bird -----\tcard_games"
  ],
  [
    "What is the language and expansion type of set number 206?",
    "SELECT code FROM sets WHERE id = 206;\t----- bird -----\tcard_games"
  ],
  [
    "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "SELECT * FROM legalities_get_sets_info(\"the_set_id\");\t----- bird -----\tcard_games"
  ],
  [
    "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
    "SELECT s.id FROM sets AS s JOIN set_translations AS st ON st.setCode = s.code WHERE s.isForeignOnly = 0 AND s.isFoilOnly = 1 AND s.isNonFoilOnly = 0 AND st.language = 'Japanese';\t----- bird -----\tcard_games"
  ],
  [
    "Which Russian set of cards contains the most cards overall?",
    "SELECT (SELECT GREATEST(max(totalSetSize), 0) FROM sets WHERE name LIKE '%Rus%' OR code = 'RU' GROUP BY totalSetSize) AS max_cardset_size_from_russian_sets, T2.language AS lang_name FROM sets AS T INNER JOIN set_translations AS T1 ON T.code = T1.setCode WHERE T.name LIKE '%Rus%' OR T1.translation LIKE '%Russian%' GROUP BY T2.language;\t----- bird -----\tcard_games"
  ],
  [
    "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?",
    "SELECT 100 * ( SELECT COUNT(*) FROM ( select cd.uuid from foreign_data cd left join set_translations st on fd.`uuid` = st.setCode /* fix line 1 */ left join cards c on cd.`uuid` = c`uuid` where st.language = 'Chinese Simplified' ) AS data_alias /* alias the subquery for field names */ ) / ( SELECT COUNT(*) FROM foreign_data fd join set_translations st on fd.`uuid` = st.setCode /* correct joins order and fix line 1*/ );\t----- bird -----\tcard_games"
  ],
  [
    "How many sets are available just in Japanese and not in Magic: The Gathering Online?",
    "SELECT sets.id FROM set_translations JOIN sets ON ((set_translations.setCode = sets.code) AND (set_translations.language='Japanese')) WHERE (sets.mtgoCode IS NULL OR sets.mtgoCode='')=False EXCEPT SELECT * from ( SELECT sets.id FROM sets WHERE mtgoCode LIKE '' )q1;\t----- bird -----\tcard_games"
  ],
  [
    "How many card border with black color ? List out the card id.",
    "SELECT id FROM cards WHERE borderColor = 'black'\t----- bird -----\tcard_games"
  ],
  [
    "How many cards have frame effect as extendedart? List out the id of those cards.",
    "SELECT id FROM cards WHERE frameEffects = 'extendedart';\t----- bird -----\tcard_games"
  ],
  [
    "Among black card borders, which card has full artwork?",
    "SELECT DISTINCT c.*, fd.* FROM cards AS c LEFT JOIN sets AS s ON c.id = s.id AND s.type = 'FullArt' LEFT JOIN foreign_data AS fd ON fd.`uuid` = c.`uuid` WHERE (COALESCE(c.borderColor, '') = 'black' OR c.bordercolor IS NULL) AND s.id IS NOT NULL;\t----- bird -----\tcard_games"
  ],
  [
    "Point out the language of set id \"174\"?",
    "SELECT SC.language FROM set_translations AS ST JOIN sets AS S ON ST.setCode = S.code JOIN cards AS C ON SC.uuid = C.uuid WHERE ST.id IN (174) AND C.uuid IS NOT NULL;\t----- bird -----\tcard_games"
  ],
  [
    "List out the set name of the set code \"ALL\".",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Which foreign language used by \"A Pedra Fellwar\"?",
    "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar';\t----- bird -----\tcard_games"
  ],
  [
    "State the set code of the set with release date of 07/13/2007?",
    "SELECT IFNULL(st.translation, s.name) AS name FROM sets s LEFT JOIN set_translations st ON (s.code = st.setCode AND st.language='English') WHERE s.releaseDate = '2007-07-13';\t----- bird -----\tcard_games"
  ],
  [
    "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".",
    "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');\t----- bird -----\tcard_games"
  ],
  [
    "Give the code of sets have expansion type of 'expansion'?",
    "SELECT c.uuid, fd.flavorText, l.format, st.setCode, sd.set_translation -- fix: column name in correct table FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid JOIN legalities l ON c.uuid = l.uuid JOIN set_translations st ON 'M2ES' = st.setCode -- JOIN set_sd ON fd.id = sd.id will make sense if you really need to get translations, otherwise, remove it ORDER BY s.name;\t----- bird -----\tcard_games"
  ],
  [
    "Name the foreign name of the card that has boros watermark? List out the type of this card.",
    "SELECT c.name, c.type, -- Add other required fields as needed FROM cards AS c INNER JOIN sets s ON c.set_code = s.code INNER JOIN legalities L ON c.uuid = L.uuid INNER JOIN foreign_data fd ON fd.uuid = c.uuid AND (fd.watermark = 'Mirran' OR fd.watermark = 'Phyrexian') WHERE s.block IN ('Tempest Remastered', 'Sorin vs. Tibalt');\t----- bird -----\tcard_games"
  ],
  [
    "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
    "SELECT T2.language, T1.flavorText, T5.type FROM foreign_data AS T2 JOIN sets AS T4 ON T2.multiverseid = T4.multiverseid JOIN cards AS T1 ON T2.uuid = T1.uuid LEFT JOIN set_translations AS T5 ON T4.code = T5.setCode LEFT JOIN rulings AS TRules ON T1.uuid = TRules.uuid LEFT JOIN legalities AS TLegalities ON T1.uuid = TLegalities.uuid WHERE T2.flavorText LIKE '%color pie%'\t----- bird -----\tcard_games"
  ],
  [
    "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?",
    "SELECT COUNT(*) AS horror_percent FROM ( SELECT * FROM cards WHERE name = 'Abyssal Horror' ) as horror_abyssals;\t----- bird -----\tcard_games"
  ],
  [
    "Give the code of sets have expansion commander type?",
    "SELECT * FROM legalities WHERE status = 'Legal' AND LOWER(format) LIKE '%modern%';\t----- bird -----\tcard_games"
  ],
  [
    "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
    "SELECT S.name AS foreign_name, C.type FROM cards AS C JOIN set_translations AS ST ON C.uuid = ST.setCode JOIN sets AS S ON ST.setCode = S.code WHERE C.watermark = 'Abzan';\t----- bird -----\tcard_games"
  ],
  [
    "What is the language of the card that has azorius watermark? List out the type of this card.",
    "SELECT cards.name as card_name, sets.type as set_type FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON cards.id = sets.id WHERE legalities.status = 'Legal' AND sets.name LIKE '%Command%'\t----- bird -----\tcard_games"
  ],
  [
    "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?",
    "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller';\t----- bird -----\tcard_games"
  ],
  [
    "How many cards available in paper have a positive starting maximum hand size?",
    "SELECT COUNT(*) FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE COALESCE(c.hand, 0) > 0 AND UPPER(c.type || ' ' || c.name || ' ' || c.text) LIKE '%PAPER%';\t----- bird -----\tcard_games"
  ],
  [
    "Please list the names of the cards that have a text box.",
    "SELECT name FROM cards;\t----- bird -----\tcard_games"
  ],
  [
    "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?",
    "SELECT s.name AS set_name, cd.unconverted_mana_cost AS unconvertedmanaCost , FROM cards c JOIN foreign_data cf ON c.uuid = cf.uuid AND cf.flavorText <> '' # Foreign language text JOIN sets s ON s.id = c.set_id AND s.code != 'EN' # This is a card from non-English set. It has flavor Text. The EN (English) version should be in main_cardFaces table and can retrieve main mana cost here. WHERE c.name = ANY(['Ancestor\\'s Chosen']); # Cards with names like ['Ancestor''s Chosen']\t----- bird -----\tcard_games"
  ],
  [
    "Among the cards with a white border color, how many of them have unknown power?",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.",
    "PRAGMA foreign_keys=1; INSERT INTO cards (id, name, mana_cost, multiverseid, image_url, isPromo) VALUES (114, 'Original Card Name', '{0}', 123456, null, false); DROP TABLE IF EXISTS set_translations; CREATE TABLE set_translations AS SELECT id as language FROM cards WHERE 1=0; PRAGMA foreign_keys = 1; -- this line must be executed before executing next command ALTER TABLE set_translations ADD CONSTRAINT fk_set_code FOREIGN KEY (language) REFERENCES sets(code) ON DELETE CASCADE ON UPDATE RESTRICT;\t----- bird -----\tcard_games"
  ],
  [
    "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "-- Create legalities table CREATE TABLE IF NOT EXISTS legalities ( id, column2 -- Add any additional columns... -- referencing cards(uuid) in legalities table FOREIGN KEY (uuid) REFERENCES cards(uuid), format, status); -- create rulings table CREATE TABLE IF NOT EXISTS rulings ( id, date, text -- referenced by set UUID - can be used as rule for card with card.id equal to -- Card.id of record in ruling table; ,\t----- bird -----\tcard_games"
  ],
  [
    "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "SELECT cd.name AS card_name, cd.flavorText AS flavor_text, c.type AS card_type, l.format AS format, l.status AS status FROM foreign_data cd JOIN cards c ON cd.uuid = c.uuid JOIN legalities l ON c.uuid = l.uuid;\t----- bird -----\tcard_games"
  ],
  [
    "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?",
    "-- SELECT ALL columns where language is English SELECT cards.name, flavor_texts.text AS EnglishTranslation, sets.code AS setCode FROM cards inner JOIN flavor_texts ON cards.uuid = flavor_texts.uuid INNER JOIN sets ON cards.id = sets.id -- Note: we can simply use the id foreign-key to refer to cards WHERE flavor_texts.language = 'English';\t----- bird -----\tcard_games"
  ],
  [
    "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "SELECT convertedManaCost FROM cards c WHERE name = 'Serra Angel' UNION SELECT convertedManaCost FROM cards c WHERE name = 'Shrine Keeper';\t----- bird -----\tcard_games"
  ],
  [
    "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
    "SELECT cards.name AS Artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.flavorText LIKE '%Batra, Dark Destroyer%';\t----- bird -----\tcard_games"
  ],
  [
    "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.",
    "SELECT c.* FROM cards AS c JOIN legalities l ON c.uuid = l.uuid AND l.format IN ('vintage', 'legacy', 'commander') WHERE sets.type NOT like 'prom%' AND name = \"some name here\"\t----- bird -----\tcard_games"
  ],
  [
    "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "SELECT DISTINCT s.name, st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE language = 'Italian' AND s.name = 'Ancestor''s Chosen' AND EXISTS ( SELECT 1 FROM set_translations st2 WHERE CHARINDEX(st2.setCode, '%ch%') > 0 OR (UPPER(st2.translation) LIKE '%ANCESTOR%s%' COLLATE Latin1_General_CI_AS ) AND SET_TRANS_Language IN ('English', 'Italian') )\t----- bird -----\tcard_games"
  ],
  [
    "How many translations are there for the set of cards with \"Angel of Mercy\" in it?",
    "SELECT COUNT(tt.`setCode`) FROM ( SELECT * FROM set_translations JOIN sets ON set_translations.`setCode` = sets.code ) tt WHERE tt.`translation` LIKE '%Angel of Mercy%' OR ( SELECT sets.name FROM sets WHERE sets.name LIKE 'Magic %' AND sets.totalSetSize < 300 LIMIT 1 ) IS NOT NULL;\t----- bird -----\tcard_games"
  ],
  [
    "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
    "SELECT c.name FROM cards c INNER JOIN foreign_data fd ON c.uuid = fd.uuid JOIN sets s ON fd.id = s.id LEFT JOIN set_translations st ON s.code = st.setCode WHERE (s.translation OR (st.setCode IS NULL AND s.code IS NOT NULL)) = 'Hauptset Zehnte Edition' ORDER BY c.name ASC;\t----- bird -----\tcard_games"
  ],
  [
    "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "near \"@\" : syntax error\t----- bird -----\tcard_games"
  ],
  [
    "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "SELECT * FROM set_translations s WHERE s.translation LIKE '%Hauptset Zehnte Edition%'\t----- bird -----\tcard_games"
  ],
  [
    "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
    "SELECT s.baseSetSize FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE LOWER(s.name) LIKE '%haupt%' AND LOWER(st.translation) LIKE '%hauptsä%';\t----- bird -----\tcard_games"
  ],
  [
    "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "SELECT s.setCode FROM set_translation AS st JOIN sets AS s ON st.setCode = s.code WHERE s.name GLOB 'Eighth Edition*' AND s.language='English' AND st.translation IS NOT NULL # Optional if you want non-null values only.\t----- bird -----\tcard_games"
  ],
  [
    "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "SELECT CASE WHEN EXISTS ( SELECT 1 FROM sets s JOIN set_translations st ON s.code = st.setCode AND st.language IS NULL WHERE (SELECT mtgoCode FROM sets WHERE name = 'Angel of Mercy') = (SELECT translation FROM set_translations WHERE setCode = s.code) AND s.id > 0 AND mtgoCode IS NOT NULL ) THEN 'true' ELSE 'false' END;\t----- bird -----\tcard_games"
  ],
  [
    "When was the set of cards with \"Ancestor's Chosen\" released?",
    "CREATE TABLE card_translations ( id INT, set_code VARCHAR(50), card_name TEXT) SELECT s.releaseDate FROM sets s JOIN (`card_translations` ct ON s.code = ct.set_code) WHERE ct.card_uuid = 'some_card_id';\t----- bird -----\tcard_games"
  ],
  [
    "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
    "SELECT s.type, s.name, st.setCode AS set_code, st.translation AS set_name_translation FROM ( SELECT type, * FROM sets WHERE type='' OR name != 'Hauptset [Year]th Edition' ) s LEFT JOIN (SELECT * FROM set_translations) st ON -- no matching condition between s and st will be applied here because of left join operation with `ON` clause empty, which effectively converts it to plain old SQL inner join with the rest of query logic s.code = st.setCode;\t----- bird -----\tcard_games"
  ],
  [
    "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "SELECT COUNT(DISTINCT s.id) FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.block = 'Ice Age' AND st.language = 'Italian';\t----- bird -----\tcard_games"
  ],
  [
    "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "SELECT s.isForeignOnly FROM sets AS s JOIN set_translations st ON s.code = st.setCode WHERE (SELECT name FROM cards WHERE uuid = (SELECT id FROM foreign_data WHERE uuid = cards.uuid)) IN ('Name1', 'Name2')\t----- bird -----\tcard_games"
  ],
  [
    "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 10?",
    "SELECT sets.code, sets.name, sets.releaseDate, set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL AND sets.baseSetSize < 10;\t----- bird -----\tcard_games"
  ],
  [
    "How many cards in the set Coldsnap have a black border color?",
    "SELECT c.name AS card_name, GROUP_CONCAT(s.name, SEPARATOR ', ') AS set_names FROM cards c JOIN sets s ON c.multiverseid = s.id WHERE c.uuid IN (SELECT uuid FROM foreign_data); -- changed the query to filter based on existence in foreign_data --- OR using EXISTS clause for better performance if optimizer doesn't know what to do with subqueries: SELECT c.name AS card_name, s.name AS set_name FROM cards c JOIN sets s ON c.multiverseid = s.id AND EXISTS ( SELECT 1 FROM foreign_data fd WHERE fd.uuid = c.uuid);\t----- bird -----\tcard_games"
  ],
  [
    "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "SELECT foreign_data.name, CASE WHEN (LENGTH(foreign_data.mana_cost) - LENGTH( REPLACE(foreign_data.mana_cost, '0', ''))) = 0 THEN 0 ELSE CAST((LENGTH(foreign_data.mana_cost) / 3 + (COUNT(T2.digit) - 1)) AS INTEGER) END AS converted_mana_cost FROM foreign_data T1 JOIN cards ON T1.uuid = cards.id WHERE sets.code = 'coldsnap' GROUP BY T1.name ORDER BY CONVERTED_MANA_COST DESC LIMIT 1;\t----- bird -----\tcard_games"
  ],
  [
    "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "SELECT -- Select specific columns here based on your requirements. c.uuid, f.flavorText, -- Additional columns as needed. FROM cards c JOIN foreign_data f ON c.uuid = f.uuid WHERE c.SETTYPE = \"Mirran\";\t----- bird -----\tcard_games"
  ],
  [
    "What is card number 4 in the set Coldsnap?",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "SELECT count(power) AS unknown_power_cards FROM ( SELECT power FROM cards WHERE name = 'Coldsnap' AND convertedManaCost > 5 AND (power = '*' OR power IS NULL) ) sub;\t----- bird -----\tcard_games"
  ],
  [
    "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "SELECT fd.flavorText AS italian_flavor_text FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Italian';\t----- bird -----\tcard_games"
  ],
  [
    "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.",
    "SELECT DISTINCT T2.language FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL;\t----- bird -----\tcard_games"
  ],
  [
    "What's the German type of the card \"Ancestor's Chosen\"?",
    "SELECT d.text FROM cards AS c INNER JOIN foreign_data AS d ON c.uuid = d.uuid WHERE d.language = 'German'\t----- bird -----\tcard_games"
  ],
  [
    "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "SELECT r.text AS italian_ruling FROM sets s JOIN cards c ON s.code = c.setCode AND s.name IS NOT NULL JOIN set_translations st ON s.code = st.setCode WHERE s.name = 'Coldsnap' and s.setCode is not null and c.setCode is not null;\t----- bird -----\tcard_games"
  ],
  [
    "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "SELECT c.cConvertedManaCost AS ItalianMinCost, s.name FROM cards c JOIN set_translations st ON c.setCode = st.setCode AND st.locale='en' JOIN sets x ON st.setCode = x.code GROUP BY c.setId HAVING MIN(c.cGeneratedCost) AND x.name = 'Coldsnap';\t----- bird -----\tcard_games"
  ],
  [
    "When was the ruling for the card 'Reminisce' created?",
    "SELECT c.uuid, MAX(r.date) AS recent_ruling_date, c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid AND c.name = (SELECT name FROM cards WHERE uuid = c.uuid) -- This should be 'Reminisce' GROUP BY c.uuid, c.name;\t----- bird -----\tcard_games"
  ],
  [
    "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "SELECT CAST(SUM(CASE WHEN c2.type IN ('planeswalker', 'creature') AND c2.convertedManaCost = 7 AND c2.card_under_coldsnap_ruling != 1 THEN 1 ELSE 0 END) AS real) / COALESCE( (SELECT COUNT(*) FROM cards AS ca5 JOIN sets AS s ON EXISTS (SELECT * FROM sets sa WHERE 1=sa.id) WHERE ca5.card_under_coldsnap_ruling = 0 AND ca5.name NOT IN (\"list_of_names_excluded_per_query\")), 0 ) FROM cards AS c2 JOIN foreign_data AS fd ON EXISTS ( SELECT * FROM foreign_data fd3 WHERE fd3.uuid = c2.uuid )\t----- bird -----\tcard_games"
  ],
  [
    "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "SELECT CAST(SUM(CASE WHEN cardKingdomId = cardKingdomFoilId THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT cardKingdomId AS percentage_incredibly_powerful_cards_name FROM cards WHERE name = 'Coldsnap'\t----- bird -----\tcard_games"
  ],
  [
    "What's the code for the set which was released on 2017/7/14?",
    "SELECT name FROM sets WHERE releaseDate = '2017-07-14';\t----- bird -----\tcard_games"
  ],
  [
    "List the keyrune code for the set whose code is 'PKHC'.",
    "-- Be aware that keyruneCode is not unique and can be NULL. SELECT T1.keyruneCode FROM sets AS T1 INNER JOIN set_translations AS T2 -- Join condition on code = setCode, avoiding direct column alias from T1 ON T1.code = T2.setCode WHERE T2.translation IS NULL AND T1.code = 'PKHC';\t----- bird -----\tcard_games"
  ],
  [
    "For the set which had 'SS2' as the code, what is its magic card market id?",
    "SELECT cards.mcmId FROM sets INNER JOIN foreign_data ON sets.id = foreign_data.multiverseid INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE sets.name = 'SS2';\t----- bird -----\tcard_games"
  ],
  [
    "What's the magic card market name for the set which was released on 2017/6/9?",
    "SELECT c.name, c.rarity, d.language FROM cards c JOIN foreign_data d ON c.`uuid` = d.`uuid` LEFT JOIN legalities l ON c.`uuid` = l.`uuid` WHERE l.status='Legal'\t----- bird -----\tcard_games"
  ],
  [
    "For the set \"From the Vault: Lore\", what is its expansion type?",
    "SELECT name, type FROM sets WHERE name = 'From the Vault: Lore';\t----- bird -----\tcard_games"
  ],
  [
    "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "SELECT parentCode AS parent_code_from_question FROM sets WHERE name = 'Commander 2014 Oversized';\t----- bird -----\tcard_games"
  ],
  [
    "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.",
    "SELECT c.id, COALESCE(r.text, '(no ruling available)') AS ruling_text, c.hasContentWarning AS content_warning_status FROM cards c LEFT JOIN rulings r ON c.uuid = r.uuid AND r.date IS NOT NULL WHERE (c.id IN ( SELECT id FROM cards WHERE artist = 'Jim Pavelec' )) OR c.hasContentWarning = 1;\t----- bird -----\tcard_games"
  ],
  [
    "What was the release date for the set which card \"Evacuation\" in it?",
    "SELECT s.releaseDate FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE st.id IN ( SELECT c.uuid AS uuid FROM cards c WHERE name = 'Evacuation' )\t----- bird -----\tcard_games"
  ],
  [
    "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
    "SELECT baseSetSize FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Rinascita di Alara' ) ORDER BY baseSetSize DESC LIMIT 1;\t----- bird -----\tcard_games"
  ],
  [
    "List the expansion type of the set \"Huitième édition\".",
    "SELECT DISTINCT s.type FROM sets s JOIN set_translations t ON s.code = t.setCode WHERE t.translation = 'Huitième édition';\t----- bird -----\tcard_games"
  ],
  [
    "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "SELECT S.id, S.name, set_translations.translation AS Translation FROM sets S JOIN set_translations ST ON S.code = ST.setCode WHERE S.name = 'Magic 2014' AND S.type = 'expansion' ORDER BY RANDOM() LIMIT 1;\t----- bird -----\tcard_games"
  ],
  [
    "How many translations of the name of the set \"Salvat 2011\"?",
    "SELECT COUNT(*) FROM set_translations st JOIN sets s ON st.setCode = s.code WHERE s.name = 'Salvat 2011';\t----- bird -----\tcard_games"
  ],
  [
    "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "SELECT s.name FROM cards AS c INNER JOIN sets AS s ON c.multiverseid = s.mcmId INNER JOIN foreign_data AS fd ON c.uuid = fd.uuid WHERE fd. id = 'mirran' -- changed to search a specific type of card\t----- bird -----\tcard_games"
  ],
  [
    "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.",
    "SELECT s.id AS set_id, SUM(CASE WHEN c.type = 'creature' THEN 1 * (CASE WHEN c.manaCost IS NOT NULL THEN c.manaCost ELSE 0 END) ELSE CASE WHEN c.cardManaCost IS NOT NULL THEN c.cardManaCost ELSE 1 END END) AS ConvertedMana FROM sets s INNER JOIN cards c ON s.id = (SELECT id FROM cards WHERE type = 'legendary' AND set_id = s.id LIMIT 1) WHERE s.name = 'Journey into Nyx Hero''s Path' GROUP BY s.id ORDER BY ConvertedMana DESC LIMIT 1;\t----- bird -----\tcard_games"
  ],
  [
    "What is the release date for the set \"Ola de frío\"?",
    "SELECT ts.translation, s.releaseDate FROM set_translations ts JOIN sets s ON ts.setCode = s.code WHERE ts.translation = 'Ola de frío';\t----- bird -----\tcard_games"
  ],
  [
    "What was the expansion type for the set which card \"Samite Pilgrim\" in it?",
    "SELECT s.type FROM sets s JOIN cards c ON s.id = c.id WHERE c.name='Samite Pilgrim'\t----- bird -----\tcard_games"
  ],
  [
    "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
    "SELECT ( -- some logic to calculate final result here 10 * 5 ) AS FinalResult;\t----- bird -----\tcard_games"
  ],
  [
    "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?",
    "SELECT ST.`translation` FROM `set_translations` AS ST JOIN (SELECT * FROM `sets` WHERE `name` = 'Mirrodin') AS S ON (S.`code` = ST.`setCode`) WHERE ST.`language` = 'Chinese Simplified';\t----- bird -----\tcard_games"
  ],
  [
    "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?",
    "SELECT ROUND( CASE WHEN s.isNonFoilOnly = 1 AND s.uuid = ? THEN 1 ELSE 0 END ::float / COUNT(*), 2) * 100 AS average_percentage_non_foil_only FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.uuid = ? GROUP BY (CASE WHEN s.isNonFoilOnly = 1 AND s.uuid = ? THEN 1 ELSE 0 END ::int)\t----- bird -----\tcard_games"
  ],
  [
    "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?",
    "SELECT s.code, COALESCE(CAST((s.totalSetSize + c.baseSetSize) AS REAL), 0.00) * 100.0 / COUNT(c.id) AS online_only_percentage, (s.totalSetSize + ABS(c.baseSetSize)) AS total_base_set_size FROM sets s LEFT JOIN cards c ON s.id = c.set_id WHERE s.name LIKE '(Portuguese (Brazil))%' GROUP BY s.code;\t----- bird -----\tcard_games"
  ],
  [
    "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?",
    "SELECT id FROM ( SELECT id, COUNT(*) AS duplicate_count, STRINGAGG(id, ',') OVER (PARTITION BY id ORDER BY type, artist) AS string_agg FROM cards WHERE artist = 'Aleksi Briclot' AND (type = 'basic' OR type = 'revised basic') ) WHERE duplicate_count <= 1;\t----- bird -----\tcard_games"
  ],
  [
    "What is the unique id of the set that has the highest number of cards?",
    "SELECT id FROM sets AS s1 WHERE baseSetSize = ( SELECT MAX(baseSetSize) FROM sets );\t----- bird -----\tcard_games"
  ],
  [
    "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?",
    "SELECT c.uuid FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE NOT (fd.watermark IN ('mirran', 'phyrexian', 'golgari', 'dimir', 'izzet', 'set'));\t----- bird -----\tcard_games"
  ],
  [
    "What is the most common visual frame effects among the incredibly powerful foils?",
    "SELECT MAX(frameEffects) AS mostCommonVisualFrameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;\t----- bird -----\tcard_games"
  ],
  [
    "How many cards with unknown power that can't be found in foil is in duel deck A?",
    "SELECT id FROM cards WHERE power = '*';\t----- bird -----\tcard_games"
  ],
  [
    "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "SELECT s.code, SUM(s.totalSetSize) as highest_total_set_size FROM sets s INNER JOIN -- or LEFT JOIN/RIGHT JOIN depending on your needs ( SELECT code FROM sets WHERE type = 'commander' ) ss ON s.code = ss.code GROUP BY s.code ORDER BY highest_total_set_size DESC LIMIT 1;\t----- bird -----\tcard_games"
  ],
  [
    "In duels, what are the top 10 cards with the highest uncoverted mana cost?",
    "INSERT INTO set_translations (setCode, language, translation) VALUES ('mySet', 'Spanish', 'My Set');\t----- bird -----\tcard_games"
  ],
  [
    "When was the oldest mythic card released and what are its legal play formats?",
    "SELECT c.id, c.name AS card_name, l.format as legal_format FROM cards c JOIN legalities l ON c.UUID = l.UUID AND (l.status = 'Legal' OR l.status IS NULL);\t----- bird -----\tcard_games"
  ],
  [
    "How many cards did Volkan BaÇµa illustrated whose foreign language is in French?",
    "SELECT COUNT(uuid) FROM cards WHERE \"watermark\" = 'Volkan Baga' AND \"language\" = 'French';\t----- bird -----\tcard_games"
  ],
  [
    "How many rare enchantment Abundance cards are there whose play format status are all legal?",
    "SELECT COUNT(fd.id) FROM foreign_data fd JOIN cards c ON fd.`uuid` = c.`uuid` JOIN legalities l ON c.`uuid` = l.`uuid` WHERE fd.flavorText = 'flavor Text.' AND c.types = 'Enchantment' AND l.status = 'Legal' AND c.name = 'Abundance';\t----- bird -----\tcard_games"
  ],
  [
    "Which of the play formats has the highest number of banned status? Indicate the play format and the name of the card.",
    "SELECT L.format AS \"Format\", C.name AS \"Associated Card Name\" FROM legalities L JOIN cards C ON L.uuid = C.uuid WHERE L.status IN ('Banned', 'Restricted') AND NOT (L.status = 'Legal' AND C.name IS NULL) GROUP BY format HAVING COUNT(DISTINCT status) > 1 ;\t----- bird -----\tcard_games"
  ],
  [
    "What is the language of the \"Battlebond\" set?",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.",
    "SELECT y.revised_date_string AS revised_date_string, COUNT(*) AS count FROM ( SELECT DISTINCT strftime('%Y-%m', l.date) AS revised_date_string FROM cards c JOIN rulings r ON c.uuid=r.'uuid' LEFT JOIN legalities l ON c.uuid=l.'uuid') y GROUP BY y.revised_date_string;\t----- bird -----\tcard_games"
  ],
  [
    "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?",
    "SELECT MAX(status) FROM ( SELECT * FROM cards WHERE frameVersion = '1997' AND artist = 'D. Alexander Gregory' AND hasContentWarning = 1 ) AS subquery JOIN legalities L ON subquery.uuid = L.uuid WHERE L.format = 'legacy';\t----- bird -----\tcard_games"
  ],
  [
    "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "WITH edh_format_check AS ( SELECT id, array('Legacy', 'vintage') bFormats, CASE WHEN EXISTS ( SELECT 1 FROM legalities l WHERE id = card_id AND format = ANY(bFormats) AND status='Banned' ) THEN 'Not Allowed to Play in EDH' ELSE '' END AS bannedFormat FROM cards WHERE id IN (123456, 987654) ) SELECT name,bannedFormat FROM edh_format_check ;\t----- bird -----\tcard_games"
  ],
  [
    "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "List the artists who illustrated cards with black borders which are available only in arena.",
    "SELECT a.translation AS illustration_artist, d.name AS name_from_cards FROM set_translations a JOIN sets s ON a.set_code = s.code JOIN foreign_data d ON s.id=d.multiverseid;\t----- bird -----\tcard_games"
  ],
  [
    "Find the uuid of cards in which the old school format is restricted or banned.",
    "SELECT cuuid FROM ( SELECT cards.uuid AS cUUID, FROM cards JOIN legalities ON C.UUID = LEGAIESTATUS = LEGALIESTATUS='legal' WHERE format NOT IN ('vintage', 'legacy ''commander') UNION SELECT cuid FROM ( SELECT b.uuid2 AS uuid FROM card AS a INNER SELECT b.uid AS UUID2 FROM FROM cards INNER JOIN legalities ON B.UUID = LEGAIESTATUS AND a formats IN ('vintage' legacy commander' status not equals to legal) group_by as x select rownum() cuuid FROM (SELECT COUNT(uuid)=uuid, UUID IS NULL AS b , SELECT uuid ISNULL FROM C) b GROUP BY a\t----- bird -----\tcard_games"
  ],
  [
    "Among the card designed by Matthew D. Wilson, how many are available only in the paper?",
    "SELECT COUNT(DISTINCT s.code) FROM sets s INNER JOIN cards c ON s.uuid = c.uuid WHERE c.artist = 'Matthew D. Wilson';\t----- bird -----\tcard_games"
  ],
  [
    "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "SELECT * FROM ( SELECT r.*, MAX(r.date) OVER (PARTITION BY r.id ORDER BY r.date DESC) AS max_date FROM ( SELECT uuid FROM cards WHERE artist = 'Kev Walker' ) c INNER JOIN rulings r ON c.uuid = r.uuid ) s WHERE s.max_date = s.date;\t----- bird -----\tcard_games"
  ],
  [
    "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "error: No SQL found in the input string\t----- bird -----\tcard_games"
  ],
  [
    "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "-- Foreign key links CREATE TABLE card_flavor_texts ( id INTEGER PRIMARY KEY, language TEXT, multiverse_id INT, name TEXT, text TEXT, type TEXT, uuid TEXT UNIQUE, FOREIGN KEY (uuid) REFERENCES cards(uuid), FOREIGN KEY (multiverse_id) REFERENCES foreign_data(multiverse_id) ); -- Foreign key links CREATE TABLE legalities ( id INTEGER PRIMARY KEY, format TEXT, status TEXT, status_short TEXT, is_ban_restricted BOOLEAN, uuid TEXT UNIQUE, FOREIGN KEY (uuid) REFERENCES cards(uuid) ); -- Foreign key links CREATE TABLE rulings ( id INTEGER PRIMARY KEY, date DATE, -- YYYY-MM-DD text TEXT, uuid TEXT UNIQUE, FOREIGN KEY (uuid) REFERENCES cards(uuid) );\t----- bird -----\tcard_games"
  ],
  [
    "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "SELECT cards.name FROM legalities JOIN cards ON legalities.`uuid` = cards.`uuid` WHERE legalities.status = 'Banned';\t----- bird -----\tcard_games"
  ],
  [
    "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "SELECT ( SELECT Reputation FROM users WHERE DisplayName = 'Harlan' ) AS Harlan_Reputation, ( SELECT Reputation FROM users WHERE DisplayName = 'Jarrod Dixon' ) AS Jarrod_Dixon_Reputation WHERE ( SELECT Reputation FROM users WHERE DisplayName = 'Harlan' ) > ( SELECT Reputation FROM users WHERE DisplayName = 'Jarrod Dixon' )\t----- bird -----\tcodebase_community"
  ],
  [
    "Please list the display names of all the users whose accounts were created in the year 2014.",
    "SELECT DISPLAYNAME FROM users WHERE STRFTIME('%Y', CREATIONDATE) = '2014';\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users last accessed the website after 2014/9/1?",
    "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01';\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the display name of the user who has the most number of views?",
    "SELECT u.DisplayName FROM users u ORDER BY u.Views DESC LIMIT 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?",
    "SELECT COUNT(DISTINCT u.Id) FROM users AS u JOIN votes AS v ON u.Id = v.UserId WHERE u.UpVotes > 100 AND v.DownVotes > 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users with more than 10 views created their account after the year 2013?",
    "SELECT COUNT(*) FROM users WHERE Views > 10 AND STRFTIME('%Y', `CreationDate`) = 2013;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many posts does the user csgillespie own?",
    "SELECT COUNT(DISTINCT OwnerUserId) AS PostCount FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');\t----- bird -----\tcodebase_community"
  ],
  [
    "Please list the titles of the posts owned by the user csgillespie?",
    "SELECT p.Title FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' AND p.OwnerDisplayName IS NOT NULL;\t----- bird -----\tcodebase_community"
  ],
  [
    "Who is the owner of the post \"Eliciting priors from experts\"?",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "SELECT p.Title, ph.Max_ViewCount FROM posts p JOIN ( SELECT post_id, MAX(view_count) as Max_ViewCount FROM posts WHERE owner_user_id = (SELECT id FROM users WHERE display_name = 'csgillespie') ) AS ph ON p.id = ph.post_id;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the display name of the user who is the owner of the most valuable post?",
    "DROP PROCEDURE IF EXISTS getuserofmaxfavpostval; CREATE PROCEDURE getuserofmaxfavpostval() LANGUAGE sql BEGIN DECLARE max_fav INT; SET max_fav = (SELECT MAX(p.FavoriteCount) FROM posts p); SELECT u.DisplayName, p.OwnerUserId FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.FavoriteCount = max_fav; END;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the total number of comments of all the posts owned by csgillespie?",
    "SELECT SUM(p.CommentCount) AS Total_Comment_Count FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community"
  ],
  [
    "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
    "-- SQLite-friendly alternative to the old SQL SELECT ( SELECT SUM(p.AnswerCount) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' ) AS csgillespie_max_answer;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "SELECT u.DisplayName FROM posts p RIGHT JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Examples for teaching: Correlation does not mean causation'\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the posts owned by csgillespie, how many of them are root posts?",
    "-- Count how many of these owned csgillespie's posts are root posts. SELECT COUNT(*) FROM ( SELECT id FROM posts WHERE ParentId IS NULL AND OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'csgillespie') ) AS p;\t----- bird -----\tcodebase_community"
  ],
  [
    "Please list the display names of all the users who owns a post that is well-finished.",
    "SELECT t.DisplayName FROM users t INNER JOIN posts p ON t.Id = p.OwnerUserId WHERE p.ClosedDate IS NOT NULL;\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "SELECT COUNT(Score) FROM postsOwnedByElderUsers;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "SELECT u.Location FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Eliciting priors from experts';\t----- bird -----\tcodebase_community"
  ],
  [
    "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "SELECT ph.Body FROM posts AS ph JOIN tags AS t ON t.ExcerptPostId = ph.Id WHERE t.TagName = 'bayesian';\t----- bird -----\tcodebase_community"
  ],
  [
    "From which post is the most popular tag excerpted from? Please give the body of the post.",
    "SELECT Body FROM posts p WHERE id = ( SELECT s.id FROM ( SELECT p.id , t.Count FROM posts AS p JOIN tags AS t ON p.id = t.ExcerptPostId GROUP BY p.id ORDER BY t.Count DESC ) s LIMIT 1 )\t----- bird -----\tcodebase_community"
  ],
  [
    "How many badges has the user csgillespie obtained?",
    "-- Now get badges from this particular user without duplicates SELECT DISTINCT id FROM badges WHERE userid IN ( SELECT id FROM users WHERE displayname = 'csgillespie')\t----- bird -----\tcodebase_community"
  ],
  [
    "Please list the names of the badges obtained by csgillespie.",
    "SELECT Name FROM badges WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'csgillespie' ) ORDER BY (SELECT COUNT(*) FROM posts) DESC;\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?",
    "SELECT COUNT(b.Id) AS Number_of_badges_earned_in_2011 FROM badges b JOIN users u ON b.UserId = u.Id WHERE strftime('%Y', b.Date) = '2011' AND u.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the display name of the user who has obtained the most number of badges?",
    "SELECT u.DisplayName AS \"username\", s.Count AS \"badge_count\" FROM ( SELECT b.UserId, COUNT(b.Id) AS Count, ROW_NUMBER() OVER (ORDER BY COUNT(b.Id) DESC) AS rn FROM badges b GROUP BY b.UserId ) s JOIN users u ON s.UserId = u.Id WHERE s.rn = 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the average score of the posts owned by the user csgillespie?",
    "SELECT AVG(p.Score) as AverageScore FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the average number of badges obtained by a user with over 200 views?",
    "SELECT COUNT(DISTINCT b.Id), COUNT(DISTINCT u.DisplayName) FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Views > 200;\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the posts with a score of over 20, what is the percentage of them being owned by an elder user?",
    "SELECT ROUND( CAST((SUM(CASE WHEN u.Age > 65 THEN 1 ELSE 0 END) / SUM(1)) * 100 AS INT) ) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 20;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many votes did the user No.58 take on 2010/7/19?",
    "SELECT count(*) FROM votes vi INNER JOIN users vu ON vi.UserId = vu.Id WHERE vu.id = 58 AND vi.CreationDate LIKE '%2010-07-19%';\t----- bird -----\tcodebase_community"
  ],
  [
    "Indicate the creation date of the maximum number of votes.",
    "SELECT h.creationdate FROM ( SELECT v.id , COUNT(*) as vote_total FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.VoteTypeId IN (2, 3) GROUP BY v.Id ) t JOIN ( SELECT id , MAX(vote_total) as max_votes FROM ( SELECT v.id , COUNT(*) as vote_total FROM posts p JOIN votes v ON p.Id = v.PostId WHERE v.VoteTypeId IN (2, 3) GROUP BY v.Id ) s GROUP BY id ) h ON t.id = h.id ORDER BY max_votes DESC LIMIT 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "Give the number of \"Revival\" badges.",
    "SELECT COUNT(DISTINCT Id) FROM badges WHERE Name = 'Revival';\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the title for the post which got the highest score comment?",
    "SELECT Title FROM( SELECT Title FROM posts AS p JOIN comments AS c ON p.Id = c.PostId GROUP BY p.Title ORDER BY MAX(c.Score) DESC LIMIT 1 ) AS highest_scoring_post;\t----- bird -----\tcodebase_community"
  ],
  [
    "For the post which got 1910 view counts, how many comments does it get?",
    "SELECT COUNT(*), p.CommentCount FROM posts p WHERE p.ViewCount = 1910 GROUP BY p.Id;\t----- bird -----\tcodebase_community"
  ],
  [
    "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "Give the only one comment text of the post with parent id 107829.",
    "-- Corrected query SELECT post.Title AS Post_Title, post.Body AS Post_Body, com.Text AS The_Comment FROM posts post JOIN comments com ON post.Id = com.PostId WHERE post.ParentId = 107829 AND com.Score > 0;\t----- bird -----\tcodebase_community"
  ],
  [
    "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "SELECT DISTINCT p.ClosedDate IS NULL FROM comments c INNER JOIN users u ON c.UserId = u.Id AND u.Id = 23853 INNER JOIN posts p ON c.PostId = p.id;\t----- bird -----\tcodebase_community"
  ],
  [
    "For the owner user of post No. 65041, what is his/her reputation points?",
    "SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = '65041')\t----- bird -----\tcodebase_community"
  ],
  [
    "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 16561;\t----- bird -----\tcodebase_community"
  ],
  [
    "Provide the display name of the user who made the vote No.6347.",
    "SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.Id = 6347;\t----- bird -----\tcodebase_community"
  ],
  [
    "Give the number of votes for the post about data visualization.",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms';\t----- bird -----\tcodebase_community"
  ],
  [
    "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "SELECT CAST(PostCount AS REAL) / VoteCount FROM ( SELECT COUNT(DISTINCT p.Id) AS PostCount, COUNT(v.Id) AS VoteCount FROM posts p JOIN users u ON p.OwnerUserId = u.id JOIN votes v ON p.id = v.PostId AND u.id = v.UserId WHERE p.OwnerUserId = 24 ) FinalQuery;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "Write the contents of comments with a score of 17.",
    "SELECT 'Corrected SQL' AS Message, ( SELECT Text FROM comments WHERE Score = 17 LIMIT 1 ) AS Output; -- Verification Evidence\t----- bird -----\tcodebase_community"
  ],
  [
    "Which user has the website URL listed at 'http://stackoverflow.com'",
    "SELECT DISTINCT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the badge name that user 'SilentGhost' obtained?",
    "SELECT b.Name AS BadgeName FROM users u JOIN badges b ON u.Id = b.UserId WHERE u.DisplayName LIKE '%SilentGhost%';\t----- bird -----\tcodebase_community"
  ],
  [
    "Name the user that commented 'thank you user93!'",
    "SELECT users.DisplayName FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Text = 'thank you user93!';\t----- bird -----\tcodebase_community"
  ],
  [
    "Write all comments made by user 'A Lion.'",
    "SELECT Text FROM comments AS c JOIN users AS u ON c.UserId = u.Id WHERE u.DisplayName = 'A Lion' AND c.UserDisplayName IS NOT NULL;\t----- bird -----\tcodebase_community"
  ],
  [
    "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "SELECT u.Reputation FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Title = 'Understanding what Dassault iSight is doing?';\t----- bird -----\tcodebase_community"
  ],
  [
    "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
    "SELECT Text, CreationDate, UserId, UserDisplayName FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE Title = 'How does gentle boosting differ from AdaBoost?' ) AND Text IS NOT NULL;\t----- bird -----\tcodebase_community"
  ],
  [
    "Name 10 users with the badge name 'Necromancer.'",
    "SELECT u.Views, u.UpVotes ,u.LastAccessDate FROM users u JOIN badges b ON u.id = b.UserId WHERE b.Name = 'Necromancer'\t----- bird -----\tcodebase_community"
  ],
  [
    "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "SELECT LastEditorDisplayName AS Editor FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data';\t----- bird -----\tcodebase_community"
  ],
  [
    "List the title of posts which were edited by Vebjorn Ljosa.",
    "SELECT DISTINCT p.Title, ph.Text AS EditedTitle FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE ph.UserId IN ( SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa' );\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
    "SELECT SUM(p.Score) AS Total_Score, v.WebsiteUrl as Yevgeny_Website FROM posts p JOIN users u ON p.LastEditorUserId = u.Id AND u.DisplayName = 'Yevgeny' JOIN users v ON p.OwnerUserId = v.Id;\t----- bird -----\tcodebase_community"
  ],
  [
    "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "SELECT c.* FROM comments c JOIN postHistory ph ON c.PostId = ph.PostId WHERE c.Text LIKE 'Why square the difference instead of taking the absolute value in standard deviation?'\t----- bird -----\tcodebase_community"
  ],
  [
    "How much is the total bounty amount of the post titled about 'data'",
    "SELECT SUM(TotalBounty) AS TotalBountyAmount FROM ( SELECT u.DisplayName, SUM(v.BountyAmount) AS TotalBounty FROM users u JOIN votes v ON u.Id = v.UserId WHERE u.Id IN ( -- Step 3: Get Ids of posts that contain 'data' in title. SELECT p.Id FROM posts p WHERE Title LIKE '%data%' ) GROUP BY u.DisplayName ) AS Contributors;\t----- bird -----\tcodebase_community"
  ],
  [
    "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "SELECT u.DisplayName FROM votes v JOIN users u ON v.UserId = u.Id WHERE v.BountyAmount = 50 AND v.PostId IN (SELECT Id FROM posts WHERE Title LIKE '%variance%');\t----- bird -----\tcodebase_community"
  ],
  [
    "Calculate the average view count of posts tagged as 'humor' and write the title and the comments of the posts alongside their scores if applicable.",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "Give the total number of comments posted by user ID 13.",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "Which user ID has the highest reputation?",
    "SELECT u.Id AS \"User_Id\", MAX(b.Reputation) AS \"Reputation\" FROM users AS u INNER JOIN badges AS b ON u.Id = b.UserId GROUP BY u.Id;\t----- bird -----\tcodebase_community"
  ],
  [
    "Which user ID has the lowest view?",
    "SELECT MIN(Views) FROM users;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users are awarded with supporter badge during year 2011?",
    "-- FIXED SQL CODE SELECT COUNT(*) FROM ( SELECT users.id FROM users JOIN badges ON users.id=badges.UserId WHERE badges.`Name`='Supporter' AND STRFTIME('%Y', badges.Date)= '2011' ) AS supportUsersFor2011;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users are awarded with more than 5 badges?",
    "SELECT COUNT(*) FROM ( SELECT u.Id FROM users u JOIN badges b ON u.Id = b.UserId GROUP BY u.Id HAVING COUNT(b.Name) > 5 ) AS user_groups;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users from New York have a teacher and supporter badge?",
    "SELECT users.* FROM users JOIN badges ON users.Id = badges.UserId AND badges.Name IN (\"Supporter\", \"Teacher\") WHERE users.Location = \"New York\" AND users.Id NOT IN ( SELECT u.Id FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name != \"Supporter\" AND b.Name != \"Teacher\" )\t----- bird -----\tcodebase_community"
  ],
  [
    "Which user created post ID 1 and what is the reputation of this user?",
    "SELECT DISTINCT p.`Title`, u.DisplayName AS UserWhoCreatedThisPost, u.Reputation AS ReputationOfUserWhoCreatedByCreationOfThePost1 FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Id = 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "Which user have only one post history per post and having at least 1000 views?",
    "SELECT DISTINCT u.Id AS UserId FROM users AS u INNER JOIN posts p ON u.Id = p.OwnerUserId INNER JOIN posthistory ph ON p.Id = ph.PostId GROUP BY u.Id HAVING COUNT(DISTINCT ph.UserId) = 1 AND MAX(p.ViewCount) >= 1000;\t----- bird -----\tcodebase_community"
  ],
  [
    "Which users have posted the most comments. List out the user's badge?",
    "SELECT u.DisplayName AS DisplayName, IFNULL(b.Name, 'Unknown') AS Badge FROM users u INNER JOIN comments c ON u.Id = c.UserId LEFT JOIN badges b ON u.Id = b.UserId;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users from India have the teacher badges?",
    "SELECT COUNT(users.Id) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE users.Location LIKE '%India%' AND badges.Name LIKE 'Teacher'\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the percentage difference of student badges given during 2010 and 2011?",
    "SELECT CAST((b2010.badge_count - b2011.badge_count) / (SELECT COUNT(*) FROM badges WHERE strftime('%Y', Date) = 2010 AND Name = 'Students') * 100 AS DECIMAL(10, 2)) AS Percentage_Difference FROM ( SELECT COUNT(Name) AS badge_count, CASE WHEN strftime('%Y', Date) = 2010 THEN 1 ELSE 0 END AS students_badge_2010_total FROM badges WHERE Name = 'Students' AND strftime('%Y', Date) BETWEEN '2010-01-01' AND '2010-12-31' ) b2010 JOIN ( SELECT COUNT(Name) AS badge_count, CASE WHEN strftime('%Y', Date) = 2011 THEN 1 ELSE 0 END AS students_badge_2011_total FROM badges WHERE Name = 'Students' AND strftime('%Y', Date) BETWEEN '2011-01-01' AND '2011-12-31' ) b2011 ON TRUE;\t----- bird -----\tcodebase_community"
  ],
  [
    "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
    "SELECT COUNT(DISTINCT C.userId) FROM posts P JOIN comments C ON P.id = C.postid WHERE P.id = 3720;\t----- bird -----\tcodebase_community"
  ],
  [
    "List out all post that are related to post ID 61217 and what is the popularity of this post?",
    "SELECT postLinks.RelatedPostId, p1.ViewCount AS ViewCountOfParent, p2.ViewCount AS ViewCountOfChild FROM postLinks INNER JOIN posts AS p1 ON postLinks.PostId = p1.Id INNER JOIN posts AS p2 ON postLinks.RelatedPostId = p2.Id;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the score and the link type ID for post ID 395?",
    "SELECT COALESCE(p.Score, 0) AS Score, pl.LinkTypeId FROM posts p LEFT JOIN postLinks pl ON p.Id = pl.PostId AND p.Id = '395' WHERE p.Id = '395';\t----- bird -----\tcodebase_community"
  ],
  [
    "List out all post ID with score more than 60 and list out all the user ID that created these post.",
    "SELECT p.Id, u.Id AS Owner_UId FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score > 60;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the sum of favourite count gained by user ID 686 in 2011?",
    "SELECT SUM(favorite_count) FROM ( SELECT p.FavoriteCount AS favorite_count FROM posts p WHERE YEAR(p.CreationDate) = 2011 AND p.OwnerUserId = 686 )\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "SELECT CAST(MIN(T1.UpVotes * 1.0 / T2.post_count) AS DECIMAL(10,2)) FROM users T1 JOIN ( SELECT OwnerUserId, COUNT(Id) AS post_count FROM posts GROUP BY OwnerUserId ) T2 ON T1.Id = T2.OwnerUserId WHERE T2.post_count > 10;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users obtained the \"Announcer\" badge?",
    "SELECT COUNT(DISTINCT b.UserId) AS num_users FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Announcer';\t----- bird -----\tcodebase_community"
  ],
  [
    "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.",
    "SELECT tb.`Name` FROM badges AS tb -- corrected table alias to avoid ambiguity WHERE tb.Date = '2010-07-19 19:39:08'\t----- bird -----\tcodebase_community"
  ],
  [
    "How many positive comments are there on the list?",
    "SELECT COUNT(*) FROM comments c WHERE Score > 60;\t----- bird -----\tcodebase_community"
  ],
  [
    "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
    "-- Query type: SELECT statement (SQLite) SELECT COALESCE(comments.Text, '') AS Text, COALESCE(posts.Title, '') AS Title, COALESCE(users.Id, 0) AS OwnerUserId FROM comments INNER JOIN posts ON posts.Id = comments.PostId INNER JOIN users ON users.Id = comments.UserId WHERE comments.CreationDate BETWEEN '2010-07-19 19:16:00' AND '2010-07-19 19:25:59'\t----- bird -----\tcodebase_community"
  ],
  [
    "How many posts have a score of 10 on the list?",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "What are the names of badges that users who have the highest reputation obtained?",
    "SELECT DISTINCT Name FROM badges WHERE badges.UserId = ( SELECT UserId FROM users ORDER BY Reputation DESC LIMIT 1 );\t----- bird -----\tcodebase_community"
  ],
  [
    "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.",
    "SELECT u.Reputation FROM users AS u INNER JOIN badges b ON u.Id = b.UserId WHERE strftime('%Y-%m-%d %H:%M:%S', '2010-07-19 19:39:08') == b.Date -- corrected SQL AND b.Name = 'Popular Question'; --strftime() or date() could be used here but using string equality seems better than any other functions.\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "SELECT B.Name FROM badges AS B JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'Pierre'\t----- bird -----\tcodebase_community"
  ],
  [
    "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "SELECT b.Date AS DateObtainedBadge FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY';\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users",
    "SELECT CAST( COUNT(DISTINCT B.UserId) AS float ) * 100 / ( SELECT count(distinct Id) as TotalUsers from Users ) as PercentageOfTeachers FROM badges B WHERE B.Name = 'Teacher'\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.",
    "SELECT (COUNT(T1.uid) * 100.0) / COUNT(T2.id) FROM ( SELECT u.Id AS uid, b.Name AS badge_name FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer' AND u.Age BETWEEN 13 AND 18 ) T1 JOIN ( SELECT id, Name AS badge_name FROM badges WHERE Name = 'Organizer' ) T2 ON T1.badge_name = T2.badge_name\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM",
    "SELECT (SUM(CASE WHEN T2.VoteTypeId = 2 THEN T2.BountyAmount ELSE 0 END) - SUM(CASE WHEN T2.VoteTypeId = 3 THEN T2.BountyAmount ELSE 0 END)) / COUNT(DISTINCT T1.PostId) AS \"Comment's rating score\" FROM comments T1 JOIN votes T2 ON T1.PostId = T2.PostId WHERE T1.CreationDate = '2010-07-19 19:19:56.0';\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?",
    "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE comments.CreationDate = '2010-07-19 19:37:33.0' AND comments.UserId IS NOT NULL\t----- bird -----\tcodebase_community"
  ],
  [
    "List out the age of users who located in Vienna, Austria obtained the badge?",
    "SELECT users.Age FROM users WHERE Location = 'Vienna, Austria' INTERSECT SELECT badges.UserId FROM badges;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many adults who obtained the badge Supporter?",
    "SELECT DISTINCT u.* FROM badges b JOIN users u ON b.UserId = u.Id WHERE (b.Name = 'Supporter') AND (u.Age BETWEEN 19 AND 65) AND (u.Age IS NOT NULL);\t----- bird -----\tcodebase_community"
  ],
  [
    "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.",
    "WITH BadgeAwardedDate AS (SELECT Id FROM badges WHERE Date = '2010-07-19 19:39:08.0'), UsersWithBadges AS ( SELECT u.Id, u.Views FROM users u JOIN BadgeAwardedDate b ON u.Id = b.Id) SELECT SUM(u.Views) FROM UsersWithBadges u;\t----- bird -----\tcodebase_community"
  ],
  [
    "What are the name of badges that users who have the lowest reputation obtained?",
    "SELECT DISTINCT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MIN(Reputation) FROM users);\t----- bird -----\tcodebase_community"
  ],
  [
    "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "SELECT t.Name FROM badges as t JOIN users u ON t.UserId = u.Id AND u.DisplayName = 'Sharpie'\t----- bird -----\tcodebase_community"
  ],
  [
    "How many elders obtained the \"Supporter\" badge?",
    "SELECT COUNT(DISTINCT b.UserId) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age > 65;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the name of user with the ID of 30?",
    "SELECT u.DisplayName FROM users u WHERE u.Id = 30;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users were from New York?",
    "SELECT COUNT(*) FROM users WHERE LOWER(Location) LIKE '%new york%' OR LOWER(Location) LIKE '%ny%';\t----- bird -----\tcodebase_community"
  ],
  [
    "How many votes were made in 2010?",
    "SELECT COUNT(Id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010';\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users were adult?",
    "SELECT COUNT(DISTINCT Id) FROM users WHERE Age BETWEEN 19 AND 65;\t----- bird -----\tcodebase_community"
  ],
  [
    "Which users have the highest number of views?",
    "SELECT Users.DisplayName, MAX(Users.Views) FROM users JOIN badges ON users.id = badges.userId WHERE badges.Name IN ('Supporter', 'Editor', 'Scholar') GROUP BY Users.DisplayName ORDER BY Users.Views DESC;\t----- bird -----\tcodebase_community"
  ],
  [
    "Calculate the ratio of votes in 2010 and 2011.",
    "SELECT SUM(CASE WHEN YEAR(v2.creationdate) = 2010 THEN 1 ELSE 0 END) / NULLIF( COUNT(DISTINCT CASE WHEN YEAR(v2.creationdate) = 2011 THEN v2.id ELSE NULL END), 0 ) FROM votes v1 JOIN votes v2 ON v1.postid = v2.postid;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the name of tags used by John Stauffer's?",
    "# Add GROUP BY before ORDER by. SELECT u.DisplayName, t.TagName as \"Tags Used By\", p.Title AS \"Post Title\" FROM users u INNER JOIN posts p ON u.Id = p.OwnerUserId LEFT JOIN postHistory ph ON p.Id = ph.PostId LEFT JOIN tags t ON p.Id = t.ExcerptPostId WHERE u.DisplayName = 'John Stauffer' GROUP BY t.TagName # group by the tags before selecting ORDER BY COUNT(t.Count) DESC # Corrected to be grouped first.\t----- bird -----\tcodebase_community"
  ],
  [
    "How many posts were created by Daniel Vassallo?",
    "SELECT COUNT(p.Id) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Daniel Vassallo';\t----- bird -----\tcodebase_community"
  ],
  [
    "How many votes were made by Harlan?",
    "SELECT COUNT(*) as VotesMadeByHarlan FROM votes JOIN users on users.Id = votes.UserId WHERE users.DisplayName = 'Haralan';\t----- bird -----\tcodebase_community"
  ],
  [
    "Which post by slashnick has the most answers count? State the post ID.",
    "SELECT p.Id FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName = 'slashnick' ORDER BY p.AnswerCount DESC;\t----- bird -----\tcodebase_community"
  ],
  [
    "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "SELECT (MAX(CASE WHEN u.DisplayName = 'Harvey Motulsky' THEN p.ViewCount ELSE 0 END) + MAX(CASE WHEN u.DisplayName = 'Noah Snyder' THEN p.ViewCount ELSE 0 END)) AS HighestViewTotal, u.DisplayName as AuthorWithHighestPopularityPostBelongsTo FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE (u.DisplayName = 'Harvey Motulsky' OR u.DisplayName = 'Noah Snyder') GROUP BY u.DisplayName;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many posts by Matt Parker have more than 4 votes?",
    "SELECT COUNT(DISTINCT p.Id) FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN votes v ON p.Id = v.PostId WHERE u.DisplayName = 'Matt Parker' AND v.VoteTypeId = 3;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many negative comments did Neil McGuigan get in his posts?",
    "SELECT COUNT(CASE WHEN c.Score < 60 THEN c.Id END) FROM comments c WHERE EXISTS (SELECT * FROM users u WHERE c.UserId = u.Id AND u.DisplayName LIKE '%Neil McGuigan%')\t----- bird -----\tcodebase_community"
  ],
  [
    "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "SELECT t1.TagName FROM tags AS T1 JOIN postLinks AS PL2 ON T1.ExcerptPostId = PL2.PostId WHERE (SELECT COUNT(*) FROM posts p WHERE p.Id = PL2.PostId AND p.OwnerUserId = (SELECT id FROM users u WHERE u.Displayname = 'Mark Meckes')) GROUP BY TagName;\t----- bird -----\tcodebase_community"
  ],
  [
    "List all the name of users that obtained the Organizer Badges.",
    "SELECT u.DisplayName FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer';\t----- bird -----\tcodebase_community"
  ],
  [
    "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "SELECT (COUNT(p.PostId) * 100.0 / COUNT(c.PostId)) AS percentage FROM ( SELECT DISTINCT p.PostId, t.TagName FROM posts p LEFT JOIN tags t ON p.Tags = t.TagName AND t.Count > 0 WHERE FIND_IN_TABLE(t.TagName, 'R') IS NOT NULL ) AS subquery ;\t----- bird -----\tcodebase_community"
  ],
  [
    "Calculate the difference in view count from post posted by mornington and view count from posts posted by Amos.",
    "SELECT SUM(CASE WHEN OwnerDisplayName = 'Mornington' THEN ViewCount ELSE 0 END) AS mornington_views, SUM(CASE WHEN OwnerDisplayName = 'Amos' THEN ViewCount ELSE 0 END) AS amos_views FROM posts;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users received commentator badges in 2014?",
    "SELECT COUNT(DISTINCT u.Id) FROM users AS u INNER JOIN badges AS b ON u.Id =b.UserId WHERE (b.Date LIKE '%2014%') AND b.Name = 'commentator'\t----- bird -----\tcodebase_community"
  ],
  [
    "How many posts were created on 21st July, 2010?",
    "SELECT COUNT(Id) FROM posts WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2012-07-21 23:59:59' GROUP BY CreaionDate;\t----- bird -----\tcodebase_community"
  ],
  [
    "What are the display names and ages of user who got the highest in views?",
    "SELECT DISTINCT u.DisplayName, u.Age FROM users AS u JOIN posts AS p ON u.Id = p.OwnerUserId WHERE p.Views = (SELECT MAX(Views) FROM posts)\t----- bird -----\tcodebase_community"
  ],
  [
    "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "-- Corrected SQL to query last edit date and last editor user ID for a given post title SELECT p.LastEditDate, p.LastEditorUserId FROM posts p WHERE p.Title = 'Detecting a given face in a database of facial images';\t----- bird -----\tcodebase_community"
  ],
  [
    "How many negative comments were given by user ID 13?",
    "select count(*) from comments c join users u on c.UserId=13 -- Add conditions where c.Score < 60;\t----- bird -----\tcodebase_community"
  ],
  [
    "Describe the post title which got positive comments and display names of the users who posted those comments.",
    "SELECT p.Id as PostId FROM comments c JOIN posts p ON p.Id = c.PostId WHERE c.Score > 60;\t----- bird -----\tcodebase_community"
  ],
  [
    "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "Provide the users' display names and available website URLs of the post with favorite count of more than 150.",
    "-- SQLite format for sql queries BEGIN TRANSACTION; CREATE TABLE users ( id INTEGER PRIMARY KEY, reputation INT, creationDate TEXT, displayName TEXT, lastAccessDate TEXT, websiteUrl TEXT, location TEXT, aboutMe TEXT, views INT, upVotes INT, downVotes INT, accountId INT, age INT, profileImageUrl TEXT ); CREATE TABLE posts ( id INTEGER PRIMARY KEY, parent_id INTEGER, creationDate TEXT, title TEXT, displayName TEXT, lastEditorUserId INTEGER, editorDisplayName TEXT, postTypeId INT, typeId INT ); CREATE TABLE votes ( id INTEGER PRIMARY KEY, postId INTEGER references posts(id), voteTypeId INT, creationDate TEXT, userId INTEGER references users(id), bountyAmount INTEGER ); CREATE INDEX i_id ON users (id); INSERT INTO users VALUES(1, '', 'Chris', 'Chris','', '', '', '',0,0,0,0,'',''); INSERT INTO users VALUES ( 2, '', '', '', '', '' , '10', '20', 0, 100, ''); INSERT INTO users VALUES ( 3, '', '', '/', 40, 4, 0, 300, ''); CREATE TABLE badges ( id INTEGER PRIMARY KEY, userId INTEGER references users(id) ); CREATE TABLE comments ( id INTEGER PRIMARY KEY, postId INTEGER references posts(id), userId INTEGER references users(id), comment TEXT ); CREATE TABLE tags ( id INTEGER PRIMARY KEY, tagName TEXT, count INT, excerptPostId INTEGER references posts(id), wikiPostId INTEGER references posts(id) ); CREATE TABLE postHistory ( id INTEGER PRIMARY KEY, postId INTEGER references posts(id), userId INTEGER references users(id), history TEXT ); CREATE TABLE votes ( id INTEGER PRIMARY KEY, postId INTEGER references posts(id), voteTypeId INT, creationDate TEXT, userId INTEGER references users(id), bountyAmount INTEGER ); INSERT INTO badges VALUES(1,1); INSERT INTO badges VALUES(2,2); INSERT INTO comments VALUES (1,1, 1,''); INSERT INTO comments VALUES (2,2, 2,''); INSERT INTO posts VALUES ( 1, '', '', 'Chris', '', '', '' , 0, 1), ( 2, '', 'John', '' , '', '' , '' , 1); ALTER TABLE posts ADD COLUMN lastEditorUserId INTEGER; COMMIT; CREATE INDEX i_postid on posts (id);\t----- bird -----\tcodebase_community"
  ],
  [
    "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
    "SELECT -- use MAX(LastEditDate) to avoid 'no such column' COALESCE(MAX(ph.LastEditDate), '2021-01-01 00:00:00.0') AS LastEditDate, COUNT(DISTINCT p.PostId) AS PostHistoryCount FROM posts p JOIN posthistory ph ON p.Id = ph.PostId WHERE p.Title LIKE '%What is the best introductory Bayesian statistics textbook?%' AND ph.LastEditDate IS NOT NULL # exclude lines that do not have LastEdit date in post history GROUP BY p.Title # Group by Title\t----- bird -----\tcodebase_community"
  ],
  [
    "Describe the last accessed date and location of the users who received the outliers badge.",
    "-- Modified SQL aligned with corrected task understanding SELECT DISTINCT u.LastAccessDate AS Last_Access_Date, u.Location AS Location, b.Name AS Badge_Name, h.CreationDate AS Date_Obtained FROM badges b JOIN users u ON b.UserId = u.Id LEFT JOIN postHistory h ON u.id = h.userid AND b.name = 'Outliers' WHERE b.Name LIKE 'Outliers' ORDER BY Last_Access_Date DESC;\t----- bird -----\tcodebase_community"
  ],
  [
    "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
    "select p.Title, CASE WHEN sum(VT.VoteTypeId = 2) OVER (PARTITION BY VT.PostId) - sum(VT.VoteTypeId = 3) OVER (PARTITION BY VT.PostId) > 0 THEN sum(VT.VoteTypeId = 2) OVER (PARTITION BY VT.PostId) - sum(VT.VoteTypeId = 3) OVER (PARTITION BY VT.PostId) ELSE 0 END AS VoteCount from posts p JOIN votes VT ON P.Id = VT.PostId where VT.VoteTypeId IN (2, 3) -- considering only upvote and downvotes for calcualation\t----- bird -----\tcodebase_community"
  ],
  [
    "List the post IDs and badge names of the user Samuel in 2013.",
    "-- SQL Type: SELECT SELECT DISTINCT c.PostId, b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id INNER JOIN comments c ON YEAR(c.CreationDate) = 2013 AND c.UserId = u.Id; WHERE YEAR(b.Date) = 2013 AND LOWER(u.DisplayName) = 'samuel';\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the owner's display name of the most popular post?",
    "SELECT DISTINCT u.DisplayName FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id ORDER BY p.ViewCount DESC LIMIT 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "SELECT # Type SQL (for selecting data)\t----- bird -----\tcodebase_community"
  ],
  [
    "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".",
    "SELECT DISTINCT p.Title, pl.LinkTypeId FROM postLinks pl INNER JOIN posts p ON p.Id = pl.RelatedPostId AND p.Title != 'What are principal component scores?'\t----- bird -----\tcodebase_community"
  ],
  [
    "Describe the display name of the parent ID for child post with the highest score.",
    "SELECT DISTINCT OwnerDisplayName FROM posts p JOIN ( SELECT p.Id, MAX(CAST(SUM(r.Score) AS REAL)) as max_score -- Fix this SQL by converting integer to float FROM posts p -- use correct table name here instead of ph which is a typical short cut for table postHistory in SQL language JOIN comments r ON cast(p.id AS INTEGER)= r.PostId -- Also fix it up above. GROUP BY p.Id ) AS score_max ON p.ParentId = id WHERE ParentId IS NOT NULL\t----- bird -----\tcodebase_community"
  ],
  [
    "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.",
    "SELECT u.DisplayName, u.WebsiteUrl, SUM(v.BountyAmount) AS TotalBounty FROM votes v INNER JOIN users u ON v.UserId = u.Id WHERE v.VoteTypeId = 8 AND v.BountyAmount IS NOT NULL GROUP BY u.DisplayName, u.WebsiteUrl ORDER BY TotalBounty DESC LIMIT 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "What are the titles of the top 5 posts with the highest popularity?",
    "SELECT p.Title, COUNT(*) as Post_count_2 FROM posts p JOIN postLinks pl on p.id=pl.postid WHERE p.ClosedDate IS NULL GROUP BY p.Title ORDER BY COUNT(*) DESC LIMIT 5;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many tags have post count between 5,000 to 7,000?",
    "FROM tags t JOIN posts p ON p.id = t.excerptpostid\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the owner user id of the most valuable post?",
    "SELECT OwnerUserId FROM posts p WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts );\t----- bird -----\tcodebase_community"
  ],
  [
    "How old is the most influential user?",
    "-- How old is the most influential user? SELECT DATEDIFF('day', MAX(u1.CreationDate), julianday(datetime('now'))) AS Age FROM users u2 JOIN users u1 ON u2.Id = (SELECT MAX(Users.Id) FROM Users)\t----- bird -----\tcodebase_community"
  ],
  [
    "How many posts with votes that were created in 2011 have a bounty of 50?",
    "SELECT COUNT(p.Id) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE p.CreationDate LIKE '2011%' AND v.BountyAmount = 50;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the id of the youngest user?",
    "-- Final SQL query: SELECT Id FROM users WHERE Age = (SELECT MIN(Age) AS min_age FROM users);\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the score of the post with the most popular tag?",
    "WITH tag_count AS ( -- subquery with max-count for each post's tags SELECT t2.Id, MAX(t1.Count) as max_count , p.Score, p.Id FROM ( SELECT COUNT(t3.excerptPostId) as total_counts FROM posts p inner join tags t3 ON t3.excerptpostId = p.id GROUP BY t3.EscrapePostid ) AS count_by_post INNER JOIN tags t1 ON count_by_post.total_counts =t1.Count and count_by_post.id=t1.excerptpostid left join posts p on (count_by_post.id=p.id) group by Id, p.Score , count_by_post.Id ), max_scores AS ( -- subquery with max-score for each post regardless of tags SELECT id, MAX(Score) as maxscore FROM Posts GROUP BY Id ) SELECT ts.maxscore FROM Post TS LEFT JOIN Tag_count tc ON ts.id=tc.Id and ts.score = tc.Score group by ts.Id ORDER BY COUNT(tc.max_count) DESC LIMIT 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "SELECT CAST(SUM(CASE WHEN p.AnswerCount <= 2 THEN 1 ELSE 0 END) AS REAL) / 12 AS AverageMonthlyLinksCreated FROM postLinks pl JOIN posts p ON pl.PostId = p.Id WHERE STRFTIME('%Y', pl.CreationDate) = '2010';\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the posts that were voted by user 1465, what is the id of the most valuable post?",
    "-- Among the posts that were voted by user 1465, what is the id of the most valuable post? SELECT p.Id FROM posts p WHERE p.Id IN ( SELECT v.PostId FROM votes v WHERE v.UserId = 1465 ) ORDER BY p.FavoriteCount DESC;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the title of the post with the oldest post link?",
    "SELECT t.Title FROM posts AS t WHERE (SELECT CreationDate FROM postLinks WHERE PostId = t.Id) IS NOT NULL AND (SELECT MIN(CreationDate) FROM postLinks WHERE PostId = t.Id) = (SELECT MAX(CreationDate) FROM postLinks pl INNER JOIN posts p ON pl.PostId = p.Id WHERE pl.PostId = t.Id);\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the display name of the user who acquired the highest amount of badges?",
    "SELECT users.DisplayName, badges.Name AS BadgeCounts FROM ( SELECT users.Id, COUNT(badges.Name) AS Name FROM badges JOIN users ON badges.UserId = users.Id GROUP BY badges.UserId ) u JOIN badges ON u.Id = badges.UserId ORDER BY u.Name DESC;\t----- bird -----\tcodebase_community"
  ],
  [
    "When did \"chl\" cast its first vote in a post?",
    "SELECT MIN(vote.CreationDate) AS VoteDate FROM users u JOIN votes vote ON u.Id = vote.UserId AND u.DisplayName = 'chl';\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the date when the youngest user made his or her first post?",
    "SELECT MIN(p.CreationDate) AS FirstPostDate FROM posts p WHERE p.OwnerUserId IN ( SELECT OwnerUserId FROM users u WHERE u.Age = ( -- Min-age that we are looking for. SELECT Age -- Min-age group that we want to select. FROM users GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1) -- This is the min-age group that we want to select. HAVING COUNT(*) >= 1)\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the display name of the user who acquired the first Autobiographer badge?",
    "WITH getAutobigraphyUser AS ( SELECT u.DisplayName ,b.Date FROM badges b INNER JOIN users u ON u.Id = b.UserId WHERE b.Name = 'Autobiographer' ORDER BY b.Date DESC LIMIT 1 ) SELECT * FROM getAutobigraphyUser;\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "SELECT COUNT(*) FROM users JOIN posts ON users.Id = posts.OwnerUserId WHERE Location = 'United Kingdom' AND FavoriteCount >= 4;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the average number of posts voted by the oldest users?",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "Who has the highest reputation? Please give the display name.",
    "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?",
    "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;\t----- bird -----\tcodebase_community"
  ],
  [
    "Please list all display names of users who are adults.",
    "WITH AdultUserIds AS ( SELECT Id FROM users WHERE Age >= 19 AND Age <= 65 ) SELECT DISTINCT DisplayName FROM users WHERE Id IN (SELECT Id FROM AdultUserIds);\t----- bird -----\tcodebase_community"
  ],
  [
    "How many posts did Jay Stevens have in 2010?",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "SELECT MAX(p.ViewCount) FROM posts p JOIN users u ON u.Id=p.OwnerUserId WHERE u.DisplayName='Harvey Motulsky'\t----- bird -----\tcodebase_community"
  ],
  [
    "Which post has the highest score? Please give its id and title's name.",
    "SELECT p.Id, p.Title FROM posts p WHERE p.Score = ( SELECT MAX(Score) FROM posts );\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the average score of Stephen Turner's posts?",
    "SELECT AVG(p.Score) FROM posts as p JOIN users as u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner';\t----- bird -----\tcodebase_community"
  ],
  [
    "Please list the users' display names whose posts had over 20000 views in 2011.",
    "SELECT DISTINCT U.DisplayName FROM users AS U JOIN ( SELECT OwnerUserId, SUM(PostHistory.ViewCount) AS SumView FROM posts INNER JOIN posthistory ON posts.Id = posthistory.PostId AND YEAR(posts.CreationDate) = 2011 WHERE PostHistoryTypeId = 4 AND ViewCount > 20000 GROUP BY OwnerUserId )AS P ON U.Id = P.OwnerUserId AND P.SumView > 20000\t----- bird -----\tcodebase_community"
  ],
  [
    "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "SELECT MIN(CAST(SUBSTRING(COALESCE(users.CreationDate, ''), 1, 4) AS INT)) as MinReputationYear FROM users WHERE Reputation > 1000;\t----- bird -----\tcodebase_community"
  ],
  [
    "Identify the percentage of teenage users.",
    "SELECT (COUNT(Id) * 100.0)/ ( SELECT COUNT(Id) FROM users ) AS percentYoungTeenagers FROM users WHERE Age BETWEEN 13 AND 18;\t----- bird -----\tcodebase_community"
  ],
  [
    "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "SELECT SUM(p.ViewCount) AS total_views, ph.UserDisplayName FROM posts p JOIN postHistory ph ON p.Id = ph.PostId WHERE p.Title = 'Computer Game Datasets' AND p.OwnerUserId = ph.UserId ORDER BY creationDate DESC LIMIT 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "Identify the total number of posts with views above average.",
    "SELECT COUNT(*) AS total_count FROM ( SELECT p.Id FROM posts p JOIN ( SELECT postId, AVG(ViewCount) AS avg_viewcount FROM posts GROUP BY postId ) AS avg_posts ON p.id = avg_posts.postId WHERE p.ViewCount > avg_posts.avg_viewcount ) AS above_avgPosts;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many comments were added to the post with the highest score?",
    "SELECT COUNT(c.id) FROM comments c JOIN posts p ON c.postid = p.id WHERE p.id = ( SELECT MAX(id) FROM posts )\t----- bird -----\tcodebase_community"
  ],
  [
    "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.",
    "SELECT p.* FROM posts AS p WHERE ViewCount > 35000 AND CommentCount = 0;\t----- bird -----\tcodebase_community"
  ],
  [
    "Identify the display name and location of the user, who was the last to edit the post with ID 183.",
    "-- Identify the display name and location of the user, who was the last to edit the post with ID 183. SELECT u.DisplayName AS 'OwnerDisplayName', ph.UserDisplayName FROM posts p INNER JOIN postHistory ph ON p.Id = ph.PostId WHERE p.LastEditDate IS NOT NULL -- Ensure LastEditorUserId is not null in users table. AND p.lasteditoruserid = ph.UserID -- Filter LastEditorUserId from both tables to avoid extra rows for this record. -- Ensure LastEditorUserId is not null in users table INNER JOIN users u ON ph.userid = u.Id WHERE p.ID = 183 -- We are getting specific here so the limit is effectively redundant. ORDER BY ph.CreationDate DESC; -- First, order by CreationDate and then we can select max LastEditDate for that user -- Take first record, in case there exists more than one last edit per post with same creation date. LIMIT 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "Identify the latest badge awarded to the user with the display name Emmett.",
    "sqlite3> ERROR near token: \"FROM\": corrected error: SELECT b1.* FROM badges AS b1 JOIN ( SELECT MAX(Date) as Date FROM badges ) T ON b1.Date = T.Date;\t----- bird -----\tcodebase_community"
  ],
  [
    "Identify the number of adult users who have cast over 5000 upvotes.",
    "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;\t----- bird -----\tcodebase_community"
  ],
  [
    "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "SELECT ABS( strftime('%s', ( SELECT Date FROM badges WHERE UserId= ( SELECT Id FROM users WHERE DisplayName ='Zolomon' ))) - ( strftime('%s', ( SELECT CreationDate FROM users WHERE DisplayName ='Zolomon'))) ) AS badgeDurations;\t----- bird -----\tcodebase_community"
  ],
  [
    "Identify the number of posts and comments left by the user, who has the latest created user account.",
    "-- Create table users with corrected columns and data types CREATE TABLE users ( Id INTEGER PRIMARY KEY, Reputation INT, CreationDate DATE, DisplayName TEXT, LastAccessDate DATE, WebsiteUrl TEXT, Location TEXT, AboutMe TEXT, Views INT, UpVotes INT, DownVotes INT, AccountId TEXT, -- changed from BYTEA to TEXT Age REAL, ProfileImageUrl TEXT ); -- Create table comments with corrected columns and data types CREATE TABLE comments ( Id INTEGER PRIMARY KEY, PostId INTEGER, Score INT, Text TEXT, CreationDate DATE, UserId INTEGER, UserDisplayName TEXT ); -- Identify the number of posts and comments left by the user, who has the latest created user account. SELECT u.Id AS UserId, COUNT(p.Id) AS NumPosts, COUNT(c.Id) AS NumComments FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN comments c ON p.Id = c.PostId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users) GROUP BY u.Id;\t----- bird -----\tcodebase_community"
  ],
  [
    "Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "SELECT p.Title, ph.UserDisplayName AS display_name_of_latest_commenter, c0.Text AS LatestCommenttext -- Changed 'postHistory' to 'c0' FROM posts p INNER JOIN ( SELECT PostId, MAX(CreationDate) AS MaxCreationdate FROM comments GROUP BY PostId ) c1 ON p.Id = c1.PostId INNER JOIN ( SELECT PostId, CreationDate FROM comments ) c2 ON c1.MaxCreationdate = c2.CreationDate AND p.Id = c2.PostId -- Apply inner join twice, one per table for max creation date check then apply actual values LEFT JOIN postHistory ph ON ph.PostId = p.Id;\t----- bird -----\tcodebase_community"
  ],
  [
    "How many users were awarded with 'Citizen Patrol' badge?",
    "SELECT COUNT(DISTINCT u.id) FROM users u JOIN badges b ON u.id = b.userid WHERE b.name = 'Citizen Patrol';\t----- bird -----\tcodebase_community"
  ],
  [
    "Count the number of posts with a tag specified as 'careers'.",
    "SELECT COUNT(*) FROM posts p INNER JOIN tags t ON p.id = t.ExcerptPostId AND t.TagName = 'careers';\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "SELECT u.Reputation, u.Views FROM users u WHERE DisplayName='Jarrod Dixon';\t----- bird -----\tcodebase_community"
  ],
  [
    "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "-- Corrected SQL SELECT * FROM ( -- Filter comments left by users on the post SELECT SUM(CASE WHEN c.UserId IS NOT NULL THEN 1 ELSE 0 END) as comments_count FROM comments c JOIN posts p ON c.PostId = p.Id WHERE LOWER(p.Title)='clustering 1d data' AND c.Text IS NOT NULL )\t----- bird -----\tcodebase_community"
  ],
  [
    "When did the user known as 'IrishStat' create his or her account?",
    "SELECT CreationDate AS \"Account Created\" FROM users WHERE DisplayName = 'IrishStat';\t----- bird -----\tcodebase_community"
  ],
  [
    "Identify the number of posts that offer a bounty amount over 30.",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "SELECT CAST(COUNT(CASE WHEN posts.Score > 50 THEN 1 END) AS REAL) / MAX(users.Reputation) * 100 FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.Id = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1)\t----- bird -----\tcodebase_community"
  ],
  [
    "How many posts have a score less than 20?",
    "SELECT COUNT(Id) FROM posts WHERE Score < 20;\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';\t----- bird -----\tcodebase_community"
  ],
  [
    "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "SELECT users.Reputation, users.UpVotes FROM comments JOIN users ON comments.UserId = users.Id WHERE comments.Text LIKE '%fine, you win :)%';\t----- bird -----\tcodebase_community"
  ],
  [
    "Give the texts commented on the post about linear regression.",
    "error: No SQL found in the input string\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "SELECT MAX(T2.Score) FROM posts T1 JOIN comments T2 ON T1.ID = T2.PostId WHERE T1.ViewCount BETWEEN 100 AND 150;\t----- bird -----\tcodebase_community"
  ],
  [
    "List the creation date and age of the user that commented with webiste.",
    "-- List the creation date and age of the user that commented with website. SELECT u.CreationDate AS 'User Creation Date', u.Age, p.Title FROM users u JOIN comments c ON u.Id = c.UserId AND c.WebsiteUrl IS NOT NULL AND c.WebsiteUrl LIKE '%http://%' JOIN posts p ON c.PostId = p.Id;\t----- bird -----\tcodebase_community"
  ],
  [
    "In comments with 0 score, how many of the posts have view count lower than 5?",
    "SELECT COUNT(DISTINCT p.PostId) FROM ( SELECT Id AS PostId FROM posts WHERE ViewCount < 5 AND Id IN ( SELECT c.PostId FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 ) ) p;\t----- bird -----\tcodebase_community"
  ],
  [
    "In posts with 1 comment, how many of the comments have 0 score?",
    "SELECT COUNT(DISTINCT c.Id) FROM comments c JOIN posts p ON c.PostId = p.Id WHERE c.Score = 0 AND p.CommentCount = 1;\t----- bird -----\tcodebase_community"
  ],
  [
    "Among products comments with 0 score, what is the total number of users ages 40 years old?",
    "SELECT COUNT(DISTINCT c.UserId) From comments as c JOIN users as u on u.id =c.userid;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "SELECT C.Id AS CommentId, C.Text FROM comments C JOIN ( SELECT Id FROM posts WHERE Title = 'Group differences on a five point Likert item' ) P ON C.PostId = P.Id AND C.Text IS NOT NULL;\t----- bird -----\tcodebase_community"
  ],
  [
    "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?",
    "SELECT u.UpVotes FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Text = 'R is also lazy evaluated.';\t----- bird -----\tcodebase_community"
  ],
  [
    "List the comments commented by the user with a username of Harvey Motulsky.",
    "SELECT c.Text, c.CreationDate FROM comments AS c JOIN users AS u ON c.UserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky';\t----- bird -----\tcodebase_community"
  ],
  [
    "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.",
    "SELECT u.DisplayName FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score BETWEEN 1 AND 5 AND u.DownVotes = 0;\t----- bird -----\tcodebase_community"
  ],
  [
    "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "SELECT (COUNT(DISTINCT v.UserId) / (SELECT COUNT(DISTINCT c.UserId) FROM comments c)) * 100 AS '%' FROM votes v -- Correct count now possible by using the Votes table's columns indirectly to query through 'users' associated with posts and score ranges JOIN posts p ON v.PostId = p.Id;-- Direct join between Votes & Posts Table via their PostId relation correctly accounting for Score related operations in percentage queries.\t----- bird -----\tcodebase_community"
  ],
  [
    "Please list all the superpowers of 3-D Man.",
    "SELECT sp.power_name FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id IN (SELECT id FROM superhero WHERE superhero_name = '3-D Man');\t----- bird -----\tsuperhero"
  ],
  [
    "How many superheroes have the super power of \"Super Strength\"?",
    "SELECT COUNT(*) AS total_count FROM hero_power hp JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength';\t----- bird -----\tsuperhero"
  ],
  [
    "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "-- SQL Type: SELECT Statement SELECT COUNT(T2.`id`) FROM `superhero` T2 INNER JOIN `hero_power` T3 ON T2.`id` = T3.`hero_id` INNER JOIN `superpower` T1 ON T1.`id` = T3.`power_id` WHERE T1.`power_name` = 'Super Strength' AND T2.`height_cm` > 200;\t----- bird -----\tsuperhero"
  ],
  [
    "Please list the full names of all the superheroes with over 15 super powers.",
    "SELECT s.full_name, COUNT(DISTINCT sp.power_name) FROM superhero AS s INNER JOIN hero_power AS hp ON s.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.full_name IS NOT NULL GROUP BY s.full_name HAVING COUNT(DISTINCT sp.power_name) > 15;\t----- bird -----\tsuperhero"
  ],
  [
    "How many superheroes have blue eyes?",
    "SELECT COUNT(T2.`id`) FROM colour AS T1 JOIN superhero AS T2 ON T1.`id` = T2.`eye_colour_id` WHERE T1.colour = 'Blue';\t----- bird -----\tsuperhero"
  ],
  [
    "What is the colour of Apocalypse's skin?",
    "SELECT c.id FROM superhero s JOIN colour c ON s.skin_colour_id = c.id WHERE s.superhero_name = 'Apocalypse'\t----- bird -----\tsuperhero"
  ],
  [
    "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "SELECT COUNT(*) FROM superhero JOIN colour ON eye_colour_id = id AND colour = 'Blue' JOIN hero_power ON superhero.id = hero_id JOIN superpower ON power_id = id AND power_name = 'Agility';\t----- bird -----\tsuperhero"
  ],
  [
    "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "DROP TABLE IF EXISTS color; CREATE TABLE color ( id INTEGER PRIMARY KEY, colour TEXT NOT NULL ); INSERT INTO color (id, colour) VALUES (1, 'Yellow'), (2, 'Red'), (3, 'White/Red'), (4, 'White'), (5, 'Violet'); DROP TABLE IF EXISTS superhero; CREATE TABLE superhero ( id INTEGER PRIMARY KEY, name TEXT NOT NULL, gender_id INTEGER, eye_colour_id INTEGER, hair_colour_id INTEGER, skin_colour_id INTEGER, race_id INTEGER, publisher_id INTEGER, alignment_id INTEGER ); INSERT INTO superhero (id, name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id) VALUES (1, 'Doom Patrol Robot', NULL, 4, 2, 5, NULL, NULL, NULL), (2, 'Green Arrow', NULL, 4, 3, 5, NULL, NULL, NULL), (3, 'Flash II', NULL, 4, 3, 5, NULL, NULL, NULL), (4, 'Nightwing', NULL, 4, 2, 1, NULL, NULL, NULL), (5, 'Superboy', NULL, 4, 2, 1, NULL, NULL, NULL), (6, 'Titans Deathstroke', NULL, 4, 3, 5, NULL, NULL, NULL), (7, 'Young Justice Speed Force Kid', NULL, 4, 3, 5, NULL, NULL, NULL); DROP TABLE IF EXISTS hero_attribute; CREATE TABLE hero_attribute ( id INTEGER PRIMARY KEY, hero_id INTEGER, attribute_id TEXT NOT NULL, attribute_value INTEGER DEFAULT 0 ); INSERT INTO hero_attribute (id, hero_id, attribute_id, attribute_value) VALUES (1, 3, 'Blur', -1), (2, 2, 'Agility', -1), (3, 4, 'Peak Physical Conditioning', -1), (4, 6, 'Speed Force Energy Absorption', -1), (5, 7, 'Master Strategist', -1); DROP TABLE IF EXISTS hero_power; CREATE TABLE hero_power ( id INTEGER PRIMARY KEY, power_id TEXT NOT NULL, hero_id INTEGER ); INSERT INTO hero_power (id, power_id, hero_id) VALUES (1, 5, 6), (2, 8, 7), (3, 'Superhuman Strength', 4), (4, 'Agility Boost', 6);\t----- bird -----\tsuperhero"
  ],
  [
    "How many superheroes are published by Marvel Comics?",
    "SELECT COUNT(superhero.id) FROM superhero WHERE publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics' );\t----- bird -----\tsuperhero"
  ],
  [
    "Please give the full name of the tallest hero published by Marvel Comics.",
    "SELECT T1.full_name FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND T3.attribute_name = 'Strength' ORDER BY T1.height_cm DESC\t----- bird -----\tsuperhero"
  ],
  [
    "Who is the publisher of Sauron?",
    "SELECT DISTINCT p.publisher_name FROM superhero AS s INNER JOIN publisher AS p ON s.publisher_id = p.id WHERE s.superhero_name = 'Sauron';\t----- bird -----\tsuperhero"
  ],
  [
    "Among the superheroes from Marvel Comics, how many of them have blue eyes?",
    "SELECT COUNT(*) FROM superhero WHERE eye_colour_id = ( SELECT id FROM colour WHERE colour = 'Blue' ) AND publisher_id IN ( SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics' );\t----- bird -----\tsuperhero"
  ],
  [
    "What is the average height of the superheroes from Marvel Comics?",
    "SELECT AVG(T1.height_cm) AS avg_height FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id WHERE T2.publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero"
  ],
  [
    "Among the superheroes from Marvel Comics, what is the percentage of those who have the super power of \"Super Strength\"?",
    "SELECT ( CAST( COUNT(DISTINCT hp.power_id) AS REAL ) / COUNT(s.id) ) * 100 AS percentage FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND sp.power_name = 'Super Strength'\t----- bird -----\tsuperhero"
  ],
  [
    "How many superheroes did DC Comics publish?",
    "SELECT COUNT(id) FROM superhero WHERE full_name IS NOT NULL AND publisher_id = ( SELECT id FROM publisher WHERE publisher_name = 'DC Comics' )\t----- bird -----\tsuperhero"
  ],
  [
    "Which publisher published the slowest superhero?",
    "-- Using a subquery for speed values, then join with publisher SELECT T1.publisher_name FROM publisher AS T1 JOIN superhero AS T2 ON T1.id = T2.publisher_id WHERE T2.id IN ( SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute AS HA JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Speed' ) )\t----- bird -----\tsuperhero"
  ],
  [
    "How many gold-eyed superheroes did Marvel Comics publish?",
    "SELECT COUNT(*) as gold_eye_power_superhero_counts FROM superhero AS T1 INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T4.colour = 'Gold' AND T1.publisher_id IN ( SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics' );\t----- bird -----\tsuperhero"
  ],
  [
    "What is the publisher's name of Blue Beetle II?",
    "-- What is the publisher's name of Blue Beetle II? SELECT T3.publisher_name FROM superhero AS T1 JOIN alignment AS T2 ON T1.alignment_id = T2.id JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T1.full_name LIKE '%Blue Beetle II%' AND T2.alignment = 'Good';\t----- bird -----\tsuperhero"
  ],
  [
    "How many superheroes with blonde hair are there?",
    "SELECT COUNT(superhero.id) AS superpowers_count FROM superhero WHERE superhero.hair_colour_id IN ( SELECT `id` FROM colour WHERE `colour` = 'Blond' )\t----- bird -----\tsuperhero"
  ],
  [
    "Who is the dumbest superhero?",
    "SELECT superhero_name, MIN(attribute_value) AS min_intelligence FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' GROUP BY superhero_name;\t----- bird -----\tsuperhero"
  ],
  [
    "What is Copycat's race?",
    "SELECT T1.race FROM race AS T1 JOIN superhero AS T2 ON T1.id = T2.race_id WHERE T2.id IN (SELECT id FROM superhero WHERE superhero_name = 'Copycat') AND T2.superhero_name = 'Copycat';\t----- bird -----\tsuperhero"
  ],
  [
    "How many superheroes have durability of less than 50?",
    "SELECT COUNT(superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;\t----- bird -----\tsuperhero"
  ],
  [
    "What are the names of the superheroes with the power of death touch?",
    "SELECT s.superhero_name, sp.power_name FROM superhero as s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Death Touch'\t----- bird -----\tsuperhero"
  ],
  [
    "How many female superheroes have a strength value of 100?",
    "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE EXISTS (SELECT gender_id FROM gender WHERE id = T1.gender_id AND value_example = 'Female') AND EXISTS (SELECT attribute_id FROM attribute WHERE id = T2.attribute_id AND name = 'Strength' AND attribute_value = 100);\t----- bird -----\tsuperhero"
  ],
  [
    "What is the name of the superhero that has the most powers?",
    "SELECT superhero_name FROM superhero WHERE id = ( SELECT hero_id FROM hero_power GROUP BY hero_id ORDER BY COUNT(power_id) DESC LIMIT 1 );\t----- bird -----\tsuperhero"
  ],
  [
    "How many vampire superheroes are there?",
    "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id AND T2.race = 'Vampire'\t----- bird -----\tsuperhero"
  ],
  [
    "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "SELECT (SUM(CASE WHEN T2.alignment = 'Bad' THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS percentage_bad_alignment, SUM(CASE WHEN T2.alignment = 'Bad' AND T1.publisher_id IN (SELECT id FROM publisher WHERE publisher_name LIKE '%Marvel%') THEN 1 ELSE 0 END) / COUNT(T1.id) * 100 FROM superhero AS T1 JOIN alignment AS T2 ON T1.`alignment_id` = T2.id;\t----- bird -----\tsuperhero"
  ],
  [
    "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "SELECT (SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics') - (SELECT COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics');\t----- bird -----\tsuperhero"
  ],
  [
    "Give the publisher ID of Star Trek.",
    "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'\t----- bird -----\tsuperhero"
  ],
  [
    "Calculate the average attribute value of all superheroes.",
    "-- Run this query in SQLite: PRAGMA foreign_keys=on; DROP TABLE alignment; CREATE TABLE IF NOT EXISTS alignment( `alignment_id` TEXT PRIMARY KEY, `alignment` TEXT ); INSERT INTO alignment (`alignment_id`, `alignment`) VALUES ('2', 'Neutral' ); DROP TABLE IF EXISTS attribute; CREATE TABLE attribute ( `id` TEXT PRIMARY KEY, `is_active` bool not null default FALSE , `attribute_name`TEXT ); INSERT INTO attribute(`id`, `attribute_name`) VALUES (3, 'Speed'), (7,'Power'); DROP TABLE hero_attribute; CREATE TABLE IF NOT EXISTS hero_attribute ( `hero_id` TEXT PRIMARY KEY, `attribute_id` TEXT not null PRIMARY KEY , `attribute_value` real ) INSERT INTO hero_attribute (`hero_id`, `attribute_id`,`attribute_value`) VALUES (1,3 ,30), (2,7 ,25); DROP TABLE superpower; -- create supertable and its relationship with publisher DROP TABLE IF EXISTS superhero; CREATE TABLE IF NOT EXISTS superhero ( `id` TEXT PRIMARY KEY, `superhero_name` TEXT , `full_name` TEXT , `gender_id` TEXT, `eye_colour_id`, TEXT, `hair_colour_id`,TEXT, `skin_colour_id`TXT, `race_id` INTEGER ,publisher_id ` REAL , alignment_id`REAL , `height_cm` INTEGER , `weight_kg` REAL ); INSERT INTO superhero (`id`,`superhero_name`, `full_name`, `gender_id`, `eye_colour_id`, `hair_colour_id`, `skin_colour_id`, `alignment_id`, `height_cm`, `weight_kg`) VALUES ( '1','Atlas', null, 8 , NULL,NULL, 3, 1.0, NULL, 2, 180.00, 65); INSERT INTO superhero (`id`,`superhero_name`, `full_name`, `gender_id` , `eye_colour_id`, `hair_colour_id`,`skin_colour_id`, alignment_id '', 'height_cm', `weight_kg`) VALUES ( '2','Chameleon', null, NULL, 3 , NULL, 7 , NULL , NULL ,NULL NULL); -- create hero_power table and its relationship with superhero DROP TABLE IF EXISTS hero_power; CREATE TABLE IF NOT EXISTS hero_power ( `hero_id` TEXT PRIMARY KEY, `power_id` INTEGER ); INSERT INTO hero_power (`hero_id`,'power_id') VALUES (1,1),(2,2); -- create color table and its relationship with superhero DROP TABLE publisher; DROP TABLE alignment ; CREATE TABLE IF NOT EXISTS alignment ( `id` integer PRIMARY KEY , alignment TEXT NOT NULL ); SELECT AVG(T3.`attribute_value`) As `average_attribute_value` FROM hero_attribute AS T1 JOIN attribute AS T2 ON T1.`attribute_id`=T2.`id`\t----- bird -----\tsuperhero"
  ],
  [
    "What is the total number of superheroes without full name?",
    "SELECT COUNT(`full_name`) AS T3 FROM superhero WHERE `full_name` IS NULL;\t----- bird -----\tsuperhero"
  ],
  [
    "What is the eye colour of superhero with superhero ID 75?",
    "SELECT DISTINCT c.faces FROM ( SELECT faces , id FROM colour ) AS c INNER JOIN hero_attribute AS ha ON sc.eye_colour_id = fc.id AND ha.attribute_value!='None' WHERE sc.`id` = '75' GROUP BY `faces` ORDER BY `faces` ASC;\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the superpowers of the superhero called Deathlok.",
    "SELECT DISTINCT S.`power_name` FROM superpower AS S INNER JOIN hero_power AS HP ON S.id = HP.power_id INNER JOIN superhero AS T1 ON HP.hero_id = T1.id;\t----- bird -----\tsuperhero"
  ],
  [
    "What is the average weight of all female superheroes?",
    "SELECT AVG(`weight_kg`) AS avg_weight FROM superhero WHERE `gender_id` = 2;\t----- bird -----\tsuperhero"
  ],
  [
    "List down at least five superpowers of male superheroes.",
    "SELECT DISTINCT S.power_name AS superpowers FROM superpower S JOIN hero_power HP ON S.id = HP.power_id JOIN superhero SH ON HP.hero_id = SH.id GROUP BY S.power_name ORDER BY COUNT(SH.id) DESC LIMIT 5\t----- bird -----\tsuperhero"
  ],
  [
    "Give the name of the alien superheroes.",
    "SELECT DISTINCT superhero_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';\t----- bird -----\tsuperhero"
  ],
  [
    "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "SELECT S.full_name FROM superhero S JOIN colour C ON S.eye_colour_id = C.id WHERE S.height_cm BETWEEN 170 AND 190 AND C.id IS NOT NULL; -- filter out heroes with eye color 1 (None)\t----- bird -----\tsuperhero"
  ],
  [
    "What is the superpower of hero ID 56?",
    "SELECT T1.`power_name` FROM superpower AS T1 JOIN hero_power AS T2 ON T1.`id` = T2.`power_id` WHERE T2.`hero_id` = 56\t----- bird -----\tsuperhero"
  ],
  [
    "List down at least five full name of Demi-God superheroes.",
    "SELECT super.`full_name` FROM superhero AS super JOIN race AS r ON super.`race_id` = r.`id` WHERE r.`race` = 'Demi-God' ORDER BY super.`full_name` LIMIT 5;\t----- bird -----\tsuperhero"
  ],
  [
    "How many bad superheroes are there?",
    "SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');\t----- bird -----\tsuperhero"
  ],
  [
    "Identify the race of the superhero who weighed 169 kg.",
    "SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id WHERE s.weight_kg = 169;\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the hair colour of the human superhero who is 185 cm tall.",
    "SELECT S.full_name, C.colour FROM superhero AS S INNER JOIN colour AS C ON S.hair_colour_id = C.id WHERE S.race_id = ( SELECT id FROM race WHERE race = 'human' ) AND S.height_cm = 185;\t----- bird -----\tsuperhero"
  ],
  [
    "What is the eye clolour of the heaviest superhero?",
    "SELECT T2.`colour` FROM superhero AS T1 LEFT JOIN colour AS T2 ON T1.`eye_colour_id` = T2.id WHERE T1.`weight_kg` = ( SELECT MAX(`weight_kg`) FROM `superhero` );\t----- bird -----\tsuperhero"
  ],
  [
    "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "SELECT ROUND( ((COUNT(CASE WHEN T1.publisher_id = 13 THEN 1 END) * 100.0) / COUNT(T1.id)), 2) FROM superhero AS T1 WHERE height_cm BETWEEN 150 AND 180;\t----- bird -----\tsuperhero"
  ],
  [
    "Among the male superheroes, list the full names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "SELECT full_name FROM ( SELECT superhero.* , (weight_kg * 0.79) as average_weight FROM superhero JOIN gender ON superhero.`gender_id` = gender.id WHERE gender.gender = 'Male' ) AS filtered_superhero WHERE weight_kg > average_weight;\t----- bird -----\tsuperhero"
  ],
  [
    "Which power do superheroes have the most of?",
    "SELECT superhero_name, MAX(COUNT(power_id)) AS max_power_count FROM hero_power JOIN superpower ON hero_power.power_id = superpower.id GROUP BY superhero_name;\t----- bird -----\tsuperhero"
  ],
  [
    "Indicate the attribute value of superhero Abomination.",
    "SELECT ha.attribute_value FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE ha.hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Abomination') AND a.attribute_name IN ('Strength', 'Speed', 'Power', 'Intelligence', 'Durability', 'Combat');\t----- bird -----\tsuperhero"
  ],
  [
    "What are the superpowers of heroes with ID 1?",
    "SELECT sp.`power_name` FROM superpower as sp JOIN hero_power hp ON sp.id = hp.power_id WHERE hp.hero_id = 1;\t----- bird -----\tsuperhero"
  ],
  [
    "How many heroes have stealth power?",
    "SELECT COUNT(T1.`id`) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.attribute_value LIKE (SELECT id FROM attribute WHERE attribute_name LIKE 'Stealth')\t----- bird -----\tsuperhero"
  ],
  [
    "What is the hero's full name with the highest attribute in strength?",
    "SELECT superhero.full_name, SUM(attribute.attribute_value) AS strength_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' GROUP BY superhero.full_name ORDER BY strength_value DESC LIMIT 1;\t----- bird -----\tsuperhero"
  ],
  [
    "What is the average of superheroes with no skin colour?",
    "SELECT CAST(SUM(CASE WHEN T2.`colour` IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.`id`) AS percentage_of_superheroes_with_no_skin_colour FROM superhero AS T1 LEFT JOIN colour AS T2 ON T1.`skin_colour_id` = T2.`id`;\t----- bird -----\tsuperhero"
  ],
  [
    "How many superheroes were published by Dark Horse Comics?",
    "SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');\t----- bird -----\tsuperhero"
  ],
  [
    "Which superhero has the most durability published by Dark Horse Comics?",
    "-- New SQL: SELECT DISTINCT T4.`superhero_name` FROM superhero AS T4 INNER JOIN hero_attribute AS T3 ON T4.id = T3.hero_id INNER JOIN attribute AS T2 ON T3.attribute_id = T2.id AND T2.attribute_name = 'durability' LEFT JOIN(hero_attribute AS T5 ON T2.id=T5.attribute_id AND T5.attribute_name='durability') WHERE T4.publisher_id IN ( SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics' ) AND T3.attribute_value IS NOT NULL ORDER BY T5.attribute_value DESC\t----- bird -----\tsuperhero"
  ],
  [
    "What is the eyes colour of Abraham Sapien?",
    "-- Fixup SQL to find Abraham Sapien's eye colour SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien';\t----- bird -----\tsuperhero"
  ],
  [
    "List the name of superheroes with flight power.",
    "SELECT superhero_name, power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'\t----- bird -----\tsuperhero"
  ],
  [
    "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "SELECT colours.colour AS eye_colour, colours2.colour AS hair_colour, colours3.colour AS skin_colour FROM superhero INNER JOIN colour colours ON superhero.eye_colour_id = colours.id INNER JOIN colour colours2 ON superhero.hair_colour_id = colours2.id INNER JOIN colour colours3 ON superhero.skin_colour_id = colours3.id WHERE gender_id IN (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');\t----- bird -----\tsuperhero"
  ],
  [
    "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "error: No SQL found in the input string\t----- bird -----\tsuperhero"
  ],
  [
    "Which group does superhero A-Bomb belong to?",
    "SELECT T1.race FROM race AS T1 JOIN superhero AS T2 ON T2.superhero_name = 'A-Bomb' AND T1.id IN (T2.race_id);\t----- bird -----\tsuperhero"
  ],
  [
    "What is the percentage of blue female superheroes among all female superheroes?",
    "SELECT ROUND( ( SELECT SUM(CASE WHEN colour = 'Blue AND T' THEN 1 ELSE 0 END) FROM (SELECT COUNT(*) AS count , colour FROM superhero WHERE gender_id IN (SELECT id FROM gender WHERE gender = 'Female') GROUP BY colour) r2 ) / ( SELECT COUNT(*) FROM superhero WHERE gender_id IN (SELECT id FROM gender WHERE gender = 'Female')) *100) FROM duddy;\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the hero name and race of Charles Chandler.",
    "SELECT T2.superhero_name, T4.race FROM superhero AS T2 INNER JOIN race AS T4 ON T2.race_id = T4.id WHERE T2.full_name = 'Charles Chandler' LIMIT 1;\t----- bird -----\tsuperhero"
  ],
  [
    "What is the gender of Agent 13 hero?",
    "SELECT T1.`gender` FROM gender AS T1 JOIN superhero AS T2 ON T1.`id` = T2.`gender_id` WHERE T2.`superhero_name` = 'Agent 13';\t----- bird -----\tsuperhero"
  ],
  [
    "Provide superheroes' names who have the adaptation power.",
    "SELECT T1.full_name AS hero_full_name, T3.power_name FROM superhero AS T1JOIN hero_power AS T2 ON T2.hero_id = T1.idJOIN superpower AS T3 ON T3.id = T2.power_id AND T3.power_name= 'Adaptation';\t----- bird -----\tsuperhero"
  ],
  [
    "How many powers does Amazo hero have?",
    "SELECT COUNT(DISTINCT power_name) FROM superpower WHERE id IN ( SELECT power_id FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo') );\t----- bird -----\tsuperhero"
  ],
  [
    "List the powers of Hunter Zolomon.",
    "SELECT T3.`power_name` FROM SUPERHERO AS T1 INNER JOIN HERO_POWER AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN SUPERPOWER AS T3 ON T2.`power_id` = T3.`id` WHERE T1.`full_name` LIKE '%Hunter Zolomon%'\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the heights of the heroes whose eye colours are amber.",
    "WITH eye_colour_id AS ( SELECT id FROM colour WHERE colour = 'Amber' ) SELECT height_cm FROM superhero WHERE eye_colour_id = (SELECT id FROM eye_colour_id);\t----- bird -----\tsuperhero"
  ],
  [
    "List the heroes' names whose eyes and hair colours are both black.",
    "SELECT superhero.superhero_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id AND superhero.hair_colour_id = colour.id WHERE colour.colour = 'Black';\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the eye colours of the heroes whose skin colours are gold.",
    "SELECT s.eye_colour_id, c.colour AS eye_colour, c2.colour AS skin_colour FROM superhero s INNER JOIN colour c ON s.eye_colour_id = c.id INNER JOIN colour c2 ON s.skin_colour_id = c2.id WHERE c2.colour = 'Gold';\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the full names of vampire heroes.",
    "SELECT s.full_name, r.id as id FROM superhero s JOIN race r ON s.race_id=r.id WHERE r.race='Vampire'\t----- bird -----\tsuperhero"
  ],
  [
    "Describe the names of neutral alignment superheroes.",
    "SELECT superhero_name FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Neutral' )\t----- bird -----\tsuperhero"
  ],
  [
    "How many heroes have the highest attribute value in strength?",
    "SELECT COUNT(DISTINCT ha.hero_id) FROM hero_attribute ha JOIN attribute a ON ha.attribute_id = a.id WHERE a.name = 'Strength' AND a.is_primary = 1;\t----- bird -----\tsuperhero"
  ],
  [
    "What are the race and alignment of Cameron Hicks?",
    "SELECT a.alignment, r.race FROM superhero AS T1 INNER JOIN alignment AS a ON T1.alignment_id = a.id INNER JOIN race AS r ON T1.race_id = r.id WHERE T1.superhero_name = 'Cameron Hicks';\t----- bird -----\tsuperhero"
  ],
  [
    "How many percent of female heroes were published by Marvel Comics?",
    "SELECT CAST(SUM(CASE WHEN T1.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T2.publisher_name) FROM gender AS T1 INNER JOIN publisher AS T2 ON T1.id = T2.publisher_id;\t----- bird -----\tsuperhero"
  ],
  [
    "Find the average weight of the heroes who are aliens.",
    "SELECT AVG(superhero.weight_kg) FROM superhero JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien';\t----- bird -----\tsuperhero"
  ],
  [
    "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "-- Final query to get the answer SELECT (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler');\t----- bird -----\tsuperhero"
  ],
  [
    "Calculate the average height for each superhero.",
    "SELECT hero_id, AVG(height_cm) AS height_avg FROM ( SELECT T1.id AS hero_id , T1.height_cm FROM superhero AS T1 ) GROUP BY hero_id\t----- bird -----\tsuperhero"
  ],
  [
    "What is Abomination's superpower?",
    "SELECT-- Type: SELECT SELECT hp.id AS hero_power_id, ...\t----- bird -----\tsuperhero"
  ],
  [
    "Among the superheroes with the race of god/eternal, how many of them are male",
    "SELECT COUNT(T1.id) FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.race_id = 21 AND T2.attribute_value IN ('Male', 'M');\t----- bird -----\tsuperhero"
  ],
  [
    "Which hero was the fastest?",
    "SELECT sh.superhero_name, MAX(ha.attribute_value) as max_speed FROM superhero sh JOIN hero_power hp ON (sh.id = hp.hero_id) JOIN hero_attribute ha ON (hp.hero_id = ha.hero_id AND ha.attribute_name = \"Speed\") GROUP BY sh.superhero_name ORDER BY max_speed DESC LIMIT 1;\t----- bird -----\tsuperhero"
  ],
  [
    "How many superheroes have a neutral alignment?",
    "SELECT COUNT(`superhero`.`id`) AS total_superheros FROM superhero JOIN alignment ON alignment.`id` = superhero.alignment_id UNION ALL SELECT COUNT(superhero.`id`) FROM superhero WHERE `alignment_id` = 3;\t----- bird -----\tsuperhero"
  ],
  [
    "State all of 3-D Man's attributes along with their values.",
    "-- Type: SELECT SELECT T1.`attribute_name`, T2.`attribute_value` FROM attribute AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.attribute_id AND T2.hero_id IN (SELECT id FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power GROUP BY hero_id));\t----- bird -----\tsuperhero"
  ],
  [
    "Which superheroes have blue eyes with brown hair?",
    "SELECT superhero_name FROM superhero JOIN ( SELECT eye_colour_id, hair_colour_id FROM superhero WHERE eye_colour_id = 7 ) AS t ON superhero.eye_colour_id = t.eye_colour_id AND superhero.hair_colour_id = t.hair_colour_id;\t----- bird -----\tsuperhero"
  ],
  [
    "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "SELECT DISTINCT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')\t----- bird -----\tsuperhero"
  ],
  [
    "How many superheroes didn't have any publisher?",
    "SELECT COUNT(*) FROM superhero AS s WHERE s.publisher_id IS NULL OR s.publisher_id NOT IN (SELECT id FROM publisher);\t----- bird -----\tsuperhero"
  ],
  [
    "Calculate the percentage of superheroes with blue eyes.",
    "SELECT ((SELECT COUNT(*) FROM superhero WHERE eye_colour_id = 7) / (SELECT COUNT(*) AS total_superheroes FROM superhero)) * 100.0 AS percentage_of_blue_eyed_superheroes;\t----- bird -----\tsuperhero"
  ],
  [
    "Find the ratio between male superheroes and female superheroes.",
    "SELECT COUNT(CASE WHEN gender_id = 1 THEN 1 END) / COUNT(CASE WHEN gender_id = 2 THEN 1 END) AS ratio FROM superhero;\t----- bird -----\tsuperhero"
  ],
  [
    "Who is the tallest superhero?",
    "SELECT full_name AS superhero_name, height_cm FROM superhero WHERE id IN ( SELECT hero_id FROM hero_attribute GROUP BY hero_id ) ORDER BY height_cm DESC LIMIT 1\t----- bird -----\tsuperhero"
  ],
  [
    "What is the power ID of cryokinesis?",
    "WITH cryokinesis_powers AS ( SELECT sp.id FROM superpower sp WHERE power_name = 'cryokinesis' ) SELECT cp.id FROM cryokinesis_powers cp;\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the name of superhero with superhero ID 294.",
    "SELECT superhero_name FROM superhero WHERE id = 294;\t----- bird -----\tsuperhero"
  ],
  [
    "List the full names of superheroes with missing weight.",
    "SELECT full_name FROM superhero WHERE weight_kg IN (0, NULL) OR weight_kg IS NOT NULL;\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "SELECT T2.`colour` FROM superhero AS T1 JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id` WHERE T1.`full_name` = 'Karen Beecher-Duncan'\t----- bird -----\tsuperhero"
  ],
  [
    "What is the superpowers of the superhero has Helen Parr as their full name?",
    "SELECT sp.power_name AS superpowers FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id JOIN superpower sp ON hp.power_id = sp.id WHERE s.full_name = 'Helen Parr';\t----- bird -----\tsuperhero"
  ],
  [
    "Find the race of the superhero who weighs 108kg and is 188cm tall.",
    "SELECT R.`race` FROM superhero AS S JOIN race AS R ON S.`race_id` = R.id WHERE S.weight_kg=108 AND S.height_cm=188;\t----- bird -----\tsuperhero"
  ],
  [
    "What is the publisher name of the superhero ID 38?",
    "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38;\t----- bird -----\tsuperhero"
  ],
  [
    "What is the race of the superhero with maximum attribute value?",
    "SELECT S.race_id AS race FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id WHERE HA.attribute_value IS NOT NULL GROUP BY S.race_id -- select only distinct race_id values (no need to include id in GROUP BY) HAVING SUM(HA.attribute_value) = ( SELECT MAX(T2.sum_attr) FROM ( SELECT HA1.hero_id, SUM(HA1.attribute_value) AS sum_attr -- corrected function name FROM hero_attribute AS HA1 GROUP BY HA1.hero_id ) AS T2 );\t----- bird -----\tsuperhero"
  ],
  [
    "Give the alignment and superpowers of the superhero named Atom IV.",
    "/* Type: SQLite */ SELECT T2.alignment, T5.power_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T2.id = T1.alignment_id AND T1.name LIKE 'Atom IV' INNER JOIN hero_power AS T3 ON T3.hero_id = T1.id INNER JOIN superpower AS T5 ON T5.id = T3.power_id;\t----- bird -----\tsuperhero"
  ],
  [
    "List down at least five full names of superheroes with blue eyes.",
    "SELECT S.full_name FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id AND C.colour IS NOT NULL WHERE C.colour = 'Blue';\t----- bird -----\tsuperhero"
  ],
  [
    "Calculate the average attribute value of all neutral superheroes.",
    "-- Calculate the average attribute value of all neutral superheroes. SELECT AVG(T2.attribute_value) FROM hero_attribute AS T2 INNER JOIN superhero AS T1 ON T2.hero_id = T1.id WHERE T1.alignment_id = 3;\t----- bird -----\tsuperhero"
  ],
  [
    "List the skin colour of the superheroes with 100 attribute value.",
    "INSERT INTO hero_attribute (hero_id, attribute_id, attribute_value) VALUES (1 , 'Strength', 100); SELECT c.colour FROM colour AS c JOIN superhero s ON c.id = s.skin_colour_id JOIN hero_attribute ha ON s.id = ha.hero_id WHERE ha.attribute_id = 'Strength' AND ha.attribute_value = 100;\t----- bird -----\tsuperhero"
  ],
  [
    "Count the good female superheroes.",
    "SELECT COUNT(*) FROM ( SELECT id FROM superhero WHERE alignment_id = 1 AND gender_id = 2 ) AS good_female_superheroes;\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the names of superheroes with attribute value between 75 to 80.",
    "SELECT T1.`superhero_name`, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON (T1.id = T2.hero_id) WHERE T2.attribute_value BETWEEN 75 AND 80;\t----- bird -----\tsuperhero"
  ],
  [
    "Give the race of the blue-haired male superhero.",
    "SELECT r.race FROM superhero s JOIN race r ON s.race_id = r.id JOIN colour c ON s.hair_colour_id = c.id WHERE c.colour = 'blue' AND s.gender_id = (SELECT id FROM gender WHERE gender = 'male');\t----- bird -----\tsuperhero"
  ],
  [
    "Among the bad superheroes, what is the percentage of female superheroes?",
    "SELECT (((COUNT(c.id) FILTER (WHERE c.alignment_id = 2 AND c.gender_id = 2)) * 100.0) / COUNT(c.id)) AS percentage FROM hero_attribute h1 JOIN superhero c ON h1.hero_id = c.id WHERE h1.attribute_id IN (4, 5, 6) AND c.alignment_id = 2;\t----- bird -----\tsuperhero"
  ],
  [
    "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "SELECT SUM( CASE WHEN T2.id = 7 THEN 1 ELSE 0 END ) - SUM( CASE WHEN T2.id = 1 THEN 1 ELSE 0 END ) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id` WHERE T1.weight_kg = 0;\t----- bird -----\tsuperhero"
  ],
  [
    "How strong is the Hulk?",
    "SELECT attribute_value FROM hero_attribute JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE hero_attribute.hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Hulk') AND attribute.attribute_name = 'Strength';\t----- bird -----\tsuperhero"
  ],
  [
    "List down Ajax's superpowers.",
    "SELECT power_name FROM ( SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax' ) AS superpowers\t----- bird -----\tsuperhero"
  ],
  [
    "How many green-skinned villains are there in the superhero universe?",
    "SELECT/* Script type: SQLite */ /* New query */ SELECT COUNT(*) AS green_skinned_villains -- Count of Villains FROM superhero -- Table contains columns related to Superheroes and it's their alignment category we want here. WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') AND skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green'); -- Directly fetch hero with a green skinned category that has Bad or Malaligned type. /* Script Type */ /* SQLite query */ -- Query Description: -- Counts all bad guys, i.e. villains from superhero universe database and returns the count as \"green_skinned_villains\"\t----- bird -----\tsuperhero"
  ],
  [
    "How many female superheroes are in Marvel Comics?",
    "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female' AND T2.publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero"
  ],
  [
    "Identify superheroes who can control wind and list their names in alphabetical order.",
    "SELECT T2.`superhero_name` FROM hero_power AS T1 JOIN superhero AS T2 ON T1.`hero_id` = T2.`id` WHERE T1.`power_id` IN (SELECT `power_id` FROM superpower WHERE `power_name` = 'Wind Control') ORDER BY T2.`superhero_name` ASC\t----- bird -----\tsuperhero"
  ],
  [
    "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "SELECT DISTINCT(T3.gender) FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T1.power_name = 'Phoenix Force';\t----- bird -----\tsuperhero"
  ],
  [
    "Identify the heaviest superhero in DC Comics.",
    "-- Type: SELECT Query, database_table: superhero SELECT s.* FROM superhero s JOIN ( SELECT id FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') ORDER BY weight_kg DESC LIMIT 1 ) AS heaviest ON s.id = heaviest.id;\t----- bird -----\tsuperhero"
  ],
  [
    "What is the average height of a non-human superhero in Dark Horse Comics?",
    "SELECT COALESCE(T2.race, '<Unknown Race>') AS race, COALESCE(T2.alignment, '<Unknown Alignment>') AS alignment, AVG(T3.height_cm) AS average_height_cm FROM superhero T1 JOIN race T2 ON T2.id = T1.race_id LEFT JOIN superhero T3 ON T3.publisher_name = 'Dark Horse Comics' WHERE T1.full_name IS NOT NULL AND T2.race <> 'Human' AND T3.publisher_name = 'Dark Horse Comics' GROUP BY T3.height_cm\t----- bird -----\tsuperhero"
  ],
  [
    "Count the fastest superheroes.",
    "SELECT T1.`superhero_name` AS fastest_superheroes FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.`id` = T2.`hero_id` WHERE T2.`attribute_id` = (SELECT id FROM attribute WHERE attribute_name = 'Speed') AND T2.`attribute_value` = 100;\t----- bird -----\tsuperhero"
  ],
  [
    "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "SELECT COUNT(CASE WHEN superhero.publisher_id = publisher.id THEN superhero.id END) AS dc_count, COUNT(CASE WHEN superhero.publisher_id IS NULL OR superhero.publisher_id != publisher.id THEN superhero.id END) AS marvel_count, (COUNT(CASE WHEN superhero.publisher_id = publisher.id THEN superhero.id END) - COUNT(CASE WHEN superhero.publisher_id IS NULL OR superhero.publisher_id != publisher.id THEN superhero.id END)) AS difference_in_heroes FROM superhero LEFT JOIN publisher ON superhero.publisher_id = publisher.id;\t----- bird -----\tsuperhero"
  ],
  [
    "Identify the weakest attribute of the Black Panther.",
    "-- Identify the weakest attribute of the Black Panther SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = 'Black Panther' AND T1.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T4.hero_id = T1.hero_id);\t----- bird -----\tsuperhero"
  ],
  [
    "What is Abomination's eye colour?",
    "SELECT T3.`colour` FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id` INNER JOIN colour AS T3 ON T2.`id` = T3.`id` WHERE T1.`superhero_name` = 'Abomination'\t----- bird -----\tsuperhero"
  ],
  [
    "Name the tallest superhero.",
    "SELECT T2.gender, T4.height_cm AS max_height FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.`gender_id`=T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE attribute_name = 'Height' GROUP BY T2.gender ;\t----- bird -----\tsuperhero"
  ],
  [
    "Name the superhero, otherwise known as Charles Chandler.",
    "SELECT s.superhero_name AS name_the_superhero FROM superhero s WHERE s.superhero_name = 'Charles Chandler'\t----- bird -----\tsuperhero"
  ],
  [
    "Among all superheroes created by George Lucas, identify the percentage of female superheroes.",
    "SELECT ROUND( ((SELECT COUNT(superhero_name) FROM superhero WHERE gender_id IN (SELECT id FROM gender WHERE gender = 'Female') AND publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'George Lucas')) * 100.0 / (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'George Lucas'))) , 2) AS percent_female_around_george_lucas\t----- bird -----\tsuperhero"
  ],
  [
    "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.",
    "SELECT ROUND(SUM(CASE WHEN T1.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Good') THEN 1 ELSE 0 END) * 100. / (SELECT COUNT(*) FROM superhero AS T2 INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id WHERE T3.name = 'Marvel Comics')) AS percentage_good_superheroes FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.name = 'Marvel Comics'\t----- bird -----\tsuperhero"
  ],
  [
    "What is the total number of superheroes that have John as their first name?",
    "SELECT COUNT(*) AS total_superheroes FROM superhero WHERE full_name LIKE 'John%'\t----- bird -----\tsuperhero"
  ],
  [
    "Give the hero ID of superhero with the lowest attribute value.",
    "SELECT hero_attribute.hero_id FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE hero_attribute.attribute_value = (SELECT MIN(attribute_value) AS min_attribute_value FROM hero_attribute);\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the full name of the superhero named Alien.",
    "SELECT T1.full_name FROM superhero AS T1 INNER JOIN ( SELECT id, full_name FROM superhero WHERE superhero_name = 'Alien' ) AS T2 ON T1.id = T2.id;\t----- bird -----\tsuperhero"
  ],
  [
    "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
    "SELECT T1.full_name FROM superhero AS T1 JOIN colour AS T2 ON T1.eye_colour_id = T2.id;\t----- bird -----\tsuperhero"
  ],
  [
    "List the attribute value of the superhero named Aquababy.",
    "-- Get race of Aquababy by joining superhero and race tables SELECT r.race FROM superhero AS T1 INNER JOIN race r ON r.id = T1.race_id WHERE T1.name = 'Aquababy' -- Get attribute value of Aquababy by joining hero_attribute and attribute tables SELECT ha.attribute_value FROM hero_attribute ha JOIN attribute attr ON ha.attribute_id=attr.id WHERE ha.hero_id ='aquababy'\t----- bird -----\tsuperhero"
  ],
  [
    "Provide the weight and race of the superhero with superhero ID 40.",
    "SELECT T1.weight_kg, T2.race FROM superhero AS T1 JOIN race AS T2 ON T1.id = 40 WHERE T2.id = T1.race_id\t----- bird -----\tsuperhero"
  ],
  [
    "Calculate the average height of all neutral superheroes.",
    "-- Corrected SQL to calculate the average height of all neutral superheroes. SELECT AVG(T1.height_cm) AS avg_height -- select only needed columns, which is height_cm in this query FROM superhero T1 WHERE T1.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Neutral') -- remove `NULL` value by check is NOT NULL together, SELECT average heights from all neutral superheroes.\t----- bird -----\tsuperhero"
  ],
  [
    "List the hero ID of superheroes have intellegence as their power.",
    "-- SELECT hero ID of superhero has intelligence as their power. SELECT S.id -- Select only the id (hero.id) column from the table. FROM superhero AS S INNER JOIN hero_power AS HP ON S.id = HP.hero_id -- Join the superhero and hero power tables to get the power information INNER JOIN superpower AS SP ON HP.power_id = SP.id -- Join the hero power and superpower tables WHERE S.id IN (SELECT HA1.hero_id -- Use select sub query, because hero_power table is too large. FROM hero_attribute AS HA1 WHERE HA1.attribute_id IN ( SELECT `id` FROM attribute -- Select intelligence from the \"attribute\" table. WHERE `attribute_name` ='Intelligence') ) AND SP.power_name = 'Intelligence' -- Filter the result to get only those with intelligence as their superpower\t----- bird -----\tsuperhero"
  ],
  [
    "Give the eye colour of Blackwulf.",
    "SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T2.id = T1.eye_colour_id INNER JOIN colour AS T3 ON T3.id=5\t----- bird -----\tsuperhero"
  ],
  [
    "List the power of superheroes with height greater than 80% of the average height of all superheroes.",
    "SELECT T1.`power_name`, T2.`height_cm` AS height FROM superpower AS T1 JOIN hero_power AS T3 ON T1.`id` = T3.`power_id` JOIN superhero AS T2 ON T3.`hero_id` = T2.`id` WHERE T2.`height_cm` > (SELECT AVG(`height_cm`) * 0.8 FROM superhero) ORDER BY T2.`height_cm` DESC;\t----- bird -----\tsuperhero"
  ],
  [
    "Please list the reference names of the drivers who are eliminated in the first period in race number 18.",
    "SELECT T1.driverid, T2.constructorid, MAX(T2.q1) AS max_q1_time FROM qualifying AS T1 JOIN constructors AS T2 ON T1.constructorid = T2.constructorid AND T1.raceid = T2.raceid GROUP BY T1.driverid, T2.constructorid ORDER BY max_q1_time DESC;\t----- bird -----\tformula_1"
  ],
  [
    "What is the surname of the driver with the best lap time in race number 19 in the second period?",
    "SELECT D.driverName as name FROM drivers D INNER JOIN qualifying Q on D.driverId = Q.driverid;\t----- bird -----\tformula_1"
  ],
  [
    "Please list the year during which the race is held on circuits in Shanghai.",
    "SELECT DISTINCT r.year FROM races AS r JOIN constructorStandings CS ON r.raceId = CS.raceId;\t----- bird -----\tformula_1"
  ],
  [
    "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "SELECT c.circuitId FROM races AS r JOIN circuits AS c ON r.circuitId = c.circuitId WHERE r.name = \"some race\" AND c.circuitId = 0;\t----- bird -----\tformula_1"
  ],
  [
    "Please give the name of the race held on the circuits in Germany.",
    "-- Enable foreign key constraints if they are disabled. PRAGMA foreign_keys = ON; ALTER TABLE races ADD CONSTRAINT fk_circuitId FOREIGN KEY (circuitId) REFERENCES circuits(circuitid); SELECT DISTINCT r.`raceId` FROM races AS r JOIN circuits AS c ON r.circuitId = c.circuitid WHERE c.country = 'GERMANY';\t----- bird -----\tformula_1"
  ],
  [
    "Please list the positions of the circuits built by the constructor Renault.",
    "SELECT * FROM ( SELECT T3.name AS team_name, (SELECT COUNT(*) FROM constructor_standings t2 WHERE T1.year = t2.year AND (T2.constructorStanding >= t2.constructorStanding)) + 1 AS team_rank, T2.constructorStanding FROM races AS T1 JOIN constructor_standings AS T2 ON T1.raceId = T2.raceId JOIN constructors AS T3 ON T2.constructorId = T3.id ) AS ranker(team_name, team_rank, constructorStanding) WHERE team_name='Renault' ORDER BY team_rank DESC;\t----- bird -----\tformula_1"
  ],
  [
    "How many races in the year 2010 are held on grand prixs outside Asia and Europe?",
    "SELECT COUNT(DISTINCT(races.circuitId)) FROM races JOIN circuits ON races.circuitId = circuits.circuitId;\t----- bird -----\tformula_1"
  ],
  [
    "Please give the names of the races held on the circuits in Spain.",
    "SELECT r.year AS race_year, c.constructor_name AS constructor_name, D.driver_name AS driver_first_name, q.q1 AS quickest_qualifying_time_1, q.q2 AS quickest_qualifying_time_2, q.q3 AS quickest_qualifying_time_3 FROM qualifying q JOIN drivers D ON q.driverId = D.driverId JOIN constructors c ON q.constructorid = c.id JOIN constructorresults cr ON (q.raceId) = cr.RaceId AND (c.id) = cr.constructorId -- Note the added column JOIN races r on (cr.RaceId) = r.raceID -- correct column name 'raceID' instead of `raceid` ORDER BY r.year; -- Added an order by clause for sorting.\t----- bird -----\tformula_1"
  ],
  [
    "What is the location coordinates of the circuits for Australian grand prix?",
    "SELECT distinct c.circuitId FROM circuits c inner join races r on c.circuitId = r.circuitId WHERE r.raceID IN ( SELECT raceId FROM qualifying q inner join status s on q.statusId = s.statusId WHERE s.status IN ('Withdrew', 'Wheel rim', 'Wheel nut', 'Wheel bearing', 'Wheel', 'Water pump') )\t----- bird -----\tformula_1"
  ],
  [
    "Where can I find the information about the races held on Sepang International Circuit?",
    "SELECT url FROM races WHERE circuitId = 1;\t----- bird -----\tformula_1"
  ],
  [
    "Please list the time of the races held on Sepang International Circuit.",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Give the coordinate position for Abu Dhabi Grand Prix.",
    "SELECT d.name AS DriverName, r.position As RacePosition, c.lat,c.lng FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN races cr ON r.raceId = cr.circuitId --fixed join condition if id is 'circuitId' JOIN constructors c ON cr.constructorId = c.constructorid;\t----- bird -----\tformula_1"
  ],
  [
    "Which country is the constructor which got 1 point in the race No. 24 from?",
    "SELECT year FROM races WHERE raceId = 24;\t----- bird -----\tformula_1"
  ],
  [
    "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "SELECT q1 FROM qualifying, races , drivers WHERE (qualifying.raceId = races.RaceID) AND (qualifying.driverid = drivers.Driverid) AND drivers.name = 'Bruno Senna';\t----- bird -----\tformula_1"
  ],
  [
    "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
    "SELECT d.nationality FROM qualifying q JOIN drivers d ON q.driverId = d.driverID WHERE (CAST(SUBSTR(SUBSTR(q.q1, INSTR(q.q1, ':') + 1), 0, -3) AS REAL) * 100 * 60 + CAST(substr(SUBSTR(q.q1, INSTR (q.q1, '.') + 1), 1) AS REAL)) <= 40000 AND q.raceId = 355;\t----- bird -----\tformula_1"
  ],
  [
    "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "SELECT q.q3, d.number FROM qualifying q JOIN drivers d ON q.driverId = d.driverId AND q.constructorId = d.constructorId WHERE q.qualifyposition='P1' AND q.raceid=903;\t----- bird -----\tformula_1"
  ],
  [
    "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "SELECT COUNT(DISTINCT driverId) FROM results WHERE time IS NULL;\t----- bird -----\tformula_1"
  ],
  [
    "Show me the season page of year when the race No. 901 took place.",
    "SELECT S.year as season, r.circuitId ,r.date,res.* FROM races as r JOIN seasons as S on r.year = S.year JOIN results as res on r.raceID = res.raceID WHERE res.raceID IN ( SELECT raceID FROM results WHERE time LIKE '%+0.7' );\t----- bird -----\tformula_1"
  ],
  [
    "For the race happened on 2015/11/29, how many drivers finished the game?",
    "SELECT COUNT(DISTINCT D.driverId) FROM drivers AS D, races AS R, results AS RS WHERE R.year = 2015 AND R.date = '2015-11-29' AND R.raceId = RS.raceId AND RS.driverId = D.driverID AND RS.time IS NOT NULL;\t----- bird -----\tformula_1"
  ],
  [
    "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "WITH qualifying_values AS ( SELECT ql.q1, CASE WHEN INSTR(ql.q2, '.') IS NOT NULL THEN SUBSTR(ql.q2, INSTR(ql.q2, ':')+1) - ABS(CAST(SUBSTR(ql.q2, INSTR(ql.q2, '.') + 1), '.*')) END AS qlq2, CASE WHEN INSTR(ql.q3, '.') IS NOT NULL THEN SUBSTR(ql.q3, INSTR(ql.q3, ':')+1) - ABS(CAST(SUBSTR(ql.q3, INSTR(ql.q3, '.') + 1), '.*')) END AS qllq3 FROM qualifying ql), qualifying_speed AS ( SELECT CASE WHEN (qv.QLQ2 IS NOT NULL AND lv.VAL >0) OR (qv.QLLQ3 IS NOT NULL) THEN CONCAT(SUBSTR(Substring('00', -length(LTRIM(qv.q1)))), ' ', SUBSTR(SUBSTR(qv.qllq3, INSTR(qv.qllq3, '.') + 1), 1)) WHEN (lv.Val IS NULL AND ql.q2 IS NOT EMPTY) OR (qv.QLLQ3 IS NULL) THEN ltrim(ql.qllq3) ELSE '' END AS Speed FROM qualifying_values qv CROSS JOIN LATER JOIN drivers dl ON dr.id = vl.driverid ORDER BY (speed DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "SELECT D.driverid AS DriverId, D.name AS Name, LT.maxLapTime FROM drivers AS D JOIN ( SELECT R.resultsID, MAX(LT.lapTime) as maxLapTime FROM results AS R JOIN lapTimes AS LT ON R.resultsID = LT.resultsID AND raceId = 161 GROUP BY R.resultsID ) AS Q ON D.driverid=Q.resultsID;\t----- bird -----\tformula_1"
  ],
  [
    "For the driver who set the fastest lap speed in race No.933, where does he come from?",
    "SELECT D.forename, D.surname AS name, L.fastestLapSpeed AS fastestlap FROM drivers D JOIN results M ON D.driverId = M.driverId INNER JOIN constructions C ON D.constructorId = C.constructorId LEFT JOIN ( SELECT driverid, MAX(fastestlapspeed) as fastest_laps_from_driver FROM lapTimes group by driverid ) AS L ON L.driverid = D.driverId WHERE M.raceID = 233;\t----- bird -----\tformula_1"
  ],
  [
    "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "SELECT c.circuit_location, q.number, q.q1 FROM qualifying AS q JOIN races r ON q.raceId = r.`raceID` JOIN circuits c ON r.`circuitId` = c.`circuitId`;\t----- bird -----\tformula_1"
  ],
  [
    "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "SELECT T2.url FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorid = T2.constructorid WHERE T1.raceid = 9 ORDER BY T1.points DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "What's Lucas di Grassi's Q1 result in the race No. 345?",
    "SELECT q1, q2, q3 FROM qualifying WHERE (raceId = 345 AND driverId = 1234) OR (raceID IS NULL AND driverID IS NOT NULL AND driverID = 1234) OR (driverID IS NULL AND raceID = 345 AND driverID = 1234);\t----- bird -----\tformula_1"
  ],
  [
    "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
    "SELECT d.nationality FROM qualifying AS q JOIN drivers AS d ON q.driverid = d.driverid WHERE raceid = 347 AND SUBSTR(q.q2, -8) LIKE '01.00|01.09';\t----- bird -----\tformula_1"
  ],
  [
    "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "SELECT DISTINCT q.driverid, d.code AS abbreviation_code FROM qualifying q JOIN drivers d ON q.driverid = d.driverid WHERE q.q1 IN ('', '1:46.960', '1:39.250') AND q.q2 IN ('', '1:38.417', '1:37.347') AND q.q3 IN ('', '1:38.513', '1:47.362');\t----- bird -----\tformula_1"
  ],
  [
    "What is the actual finish time for Bruce McLaren in the race No.743?",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Who finished second in the San Marino Grand Prix in 2006?",
    "SELECT s.year AS season, r.raceId as race_id, d.driverName, q.position FROM seasons s INNER JOIN races r ON s.year = r.year LEFT JOIN qualifying q ON r.raceid = q.qualifyid AND q.status = 'P' LEFT JOIN drivers d ON q.driverid = d.driverID WHERE q.status = 'P' AND q.position != 'F';\t----- bird -----\tformula_1"
  ],
  [
    "Show me the season page of year when the race No. 901 took place.",
    "SELECT year FROM seasons WHERE race_id IN ( SELECT race_Id FROM driverstandings WHERE season = '2017' AND position = 2 );\t----- bird -----\tformula_1"
  ],
  [
    "For the race happened in 2015/11/29, how many drivers finished the game?",
    "# Table: drivers [ (driverId, driver Id.), (name, name. Value examples: ['Sebastian Vettel', 'Max Verstappen', 'Charles Leclerc', 'Renault', 'Mercedes']. ] cursor.execute(''' CREATE TABLE IF NOT EXISTS drivers ( driverid INTEGER PRIMARY KEY, name TEXT NOT NULL); ''') # Table: constructors [ (constructorId, constructor Id.), (name, name. Value examples: ['Ferrari', 'Red Bull Racing', 'Mercedes', 'McLaren']. ] cursor.execute(''' CREATE TABLE IF NOT EXISTS constructors ( constructorid INTEGER PRIMARY KEY, name TEXT NOT NULL); ''') # Table: races [ (raceId, race Id), (number, number.), (name, name.) ] cursor.execute(''' CREATE TABLE IF NOT EXISTS races( raceid INTEGER PRIMARY KEY, name TEXT NOT NULL ) ''')\t----- bird -----\tformula_1"
  ],
  [
    "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
    "SELECT CAST(SUBSTR(ra.datetime, 1, 4) AS INTEGER)\t----- bird -----\tformula_1"
  ],
  [
    "For the driver who set the fastest lap speed, what is his nationality?",
    "SELECT D.driverName, C.constructorName FROM drivers D JOIN ( SELECT driverid, constructorid, raceid, fastestlap as highest_speed_lap FROM constructorresults GROUP BY driverid, constructorid, raceid HAVING MAX(fastestlap) > 200 ) CR ON D.driverID = CR.driverid AND C.constructorID = CR.constructorid JOIN results R ON CR.raceid = R.raceid GROUP BY D.driverName, C.constructorName -- If you are using GROUP BY here.\t----- bird -----\tformula_1"
  ],
  [
    "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "# Table: drivers [ (driverId, driver ID.), (driverRef, Driver Reference.), (name, name.), (dob, DOB (dd/mm/yyyy)), (nationId, Nation.) ] # Table: seasons [ (raceYear, year .) ] # Table: constructor_results [ (constructorId, team Id ), (resultsId, result Id ) ] # Table: races results table. [ (raceId, Race ID), (year, Year), (round, Round) (\"circuitRef\", Circuit Reference.), (name, Race name.) ] # Table: constructors [ (constructorid, Team ID .) ] # Table: Circuits [ (circuitid, circuit Id), (circuitref,\" Race Ref\") ]\t----- bird -----\tformula_1"
  ],
  [
    "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "SELECT CONCAT_WS('', CAST(SUM(CASE WHEN rank_order <= 1 THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*), '%') AS percentage FROM ( select r.*, DENSE_RANK() OVER(order by rt.time is not null desc) as rank_order from results r join races rr on r.raceId=rr.raceId ) ranked_drivers WHERE rr.year = 1983;\t----- bird -----\tformula_1"
  ],
  [
    "Which year was the first Singapore Grand Prix?",
    "SELECT MIN(year) FROM ( SELECT year FROM races WHERE circuitid='singapore' AND year IS NOT NULL )\t----- bird -----\tformula_1"
  ],
  [
    "How many races were there in 2005? Name all the races in descending order.",
    "SELECT DISTINCT r.round AS roundNumber, r.date FROM seasons s JOIN races r ON s.year = 2005;\t----- bird -----\tformula_1"
  ],
  [
    "Name the first race recorded. What are the other races that happened within the same month and year of that race.",
    "SELECT r.* FROM races r, seasonal_insert s WHERE strftime('%Y', r.date) = s.year AND (strftime('%J', r.date)) - STRFTIME('%j', s.first_date);\t----- bird -----\tformula_1"
  ],
  [
    "State the name and date of the last round of race in year 1999.",
    "SELECT S.name AS season, R.date AS date, MAX(RT.positionOrder) as round FROM seasons S LEFT JOIN races R ON S.year = R.year AND R.is_currentRace = 1 LEFT JOIN results RT ON R.raceID = RT.raceID GROUP BY S.name, R.date ORDER BY S.name DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "Which year has the most number of races?",
    "WITH ranked_results AS ( SELECT r.year,COUNT(*) as count FROM races r GROUP BY r.year ) SELECT year FROM ranked_results ORDER BY count DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "Name the races in year 2017 that are not hosted in year 2000.",
    "select distinct r.year from (select s.year from seasons s group by s.year except select year from races where YEAR=2000) yR join Races R on yR.year=r.year where r.year=2017;\t----- bird -----\tformula_1"
  ],
  [
    "In which country was the first European Grand Prix hosted? Name the circuit and location.",
    "SELECT MIN(ra.year) AS min_year, cir.name, cir.location FROM races ra JOIN circuits cir ON ra.circuitId = cir.circuitId WHERE cir.name = 'European Grand Prix' GROUP BY cir.name, cir.location;\t----- bird -----\tformula_1"
  ],
  [
    "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
    "SELECT r.date AS last_british_grand_prix_date FROM races r JOIN circuits c ON r.circuitId = c*circuitId WHERE c.name = 'Brands Hatch' ORDER BY r.year DESC, r.date DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?",
    "SELECT COUNT(*) FROM ( SELECT c.circuitId, r.raceId FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year IN ( SELECT s.year FROM seasons s WHERE s.year <= 2023 -- you can change this to your desired year ) ) AS temp;\t----- bird -----\tformula_1"
  ],
  [
    "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
    "WITH tmp AS ( SELECT d.driverid AS 'driverId', r.racename, COUNT(CASE WHEN l.RaceID != rs.raceid AND l.driverid = ds.driverid THEN 1 END) OVER (PARTITION BY d.driverid, r.year) as scores2 FROM driverStandings ds JOIN drivers d ON ds.driverid = d.driverid JOIN constructorResults cfs On ds.constructorId = cfs.constructorID join racing r on cfs.racing id = r.racind LEFT JOIN lapTimes l ON dd riwdr ID = lf driverrAndd WHERE year = 2010 GROUP by ddriverid, racename ) SELECT * from tmp ORDER by scores2 DESC;\t----- bird -----\tformula_1"
  ],
  [
    "State the driver with the most points scored. Find his full name with that points.",
    "SELECT forename, surname FROM drivers WHERE driverId IN ( SELECT driverId FROM results WHERE points = ( SELECT MAX(points) AS max_points FROM results ) );\t----- bird -----\tformula_1"
  ],
  [
    "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
    "SELECT d.name, SUM(ds.points) as totalPoints FROM drivers d JOIN driverStandings ds ON d.driverId = ds.driver_id WHERE d.raceId IN ( SELECT r.raceid FROM races r WHERE r.racename = 'Chinese Grand Prix' AND r.year = 2017) GROUP BY d.name ORDER BY totalPoints DESC LIMIT 3;\t----- bird -----\tformula_1"
  ],
  [
    "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "SELECT d.name AS driver_name, ra.name AS race_id FROM results r INNER JOIN drivers d ON r.driverId = d.driverId INNER JOIN races ra ON r.raceId = ra.raceId ORDER BY COALESCE(r.fastestLapTime, '+inf') ASC\t----- bird -----\tformula_1"
  ],
  [
    "What is the average lap time for Sebastian Vettel in the 2009 Chinese Grand Prix?",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "SELECT CAST( SUM(CASE WHEN T.year > 2010 OR T.year = 2010 AND r.raceid NOT IN ( SELECT raceID FROM results WHERE position = 1 ) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM ( SELECT year, COUNT(Total) + SUM( CASE WHEN year > 2010 OR year = 2010 AND res.position = 1 THEN 1 ELSE 0 END ) OVER() AS Total, raceid FROM races r JOIN results res ON(res.raceID=r.raceID) ) T;\t----- bird -----\tformula_1"
  ],
  [
    "Name the driver with the most winning. Mention his nationality and what is his average point scores.",
    "SELECT most_winning_driver, nationality_of_most_winning_driver FROM ( SELECT name AS most_winning_driver, D.nationality AS nationality_of_most_winning_driver, SUM(avg_points_score) AS total_avg, COUNT(nationalities) OVER (PARTITION BY nationalities ORDER BY avg_points_score DESC) AS final_score FROM ( SELECT D.name, D.nationality, AVG(R.points) AS avg_points_score, ARRAY_AGG(D.nationality) AS nationalities FROM drivers D JOIN constructorResults CR ON D.driverId = CR.constructorId JOIN results R ON CR.constructorId = R.constructorId AND CR.raceId = R.raceId AND R.statusID IN (1, 2) GROUP BY name, nationality ) AS WinnerDriverInfo WHERE nationalities IS NOT NULL ) WHERE final_score = 1 ORDER BY total_avg DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "How old is the youngest Japanese driver? What is his name?",
    "WITH min_year AS ( SELECT strftime('%Y', d.dob) as year FROM drivers AS d WHERE d.nationality = 'Japanese' ) SELECT d.* FROM drivers AS d WHERE d.nationality = 'Japanese' AND strftime('%Y', d.dob) = (SELECT MIN(year) FROM min_year);\t----- bird -----\tformula_1"
  ],
  [
    "List circuits which host 4 f1 races from year 1990 to 2000.",
    "SELECT c.name, COUNT(q.qualifyId) AS number_times_hosted_a_racing_qualifying, r.raceId FROM races r JOIN qualifying q ON r.raceId = q.raceId JOIN circuits c ON r.circuitId = c.circuitId WHERE CAST(r.year / 1000.0 AS INT) * 1000 + (r.year % 1000) BETWEEN 1990 AND 2000 GROUP BY r.raceId\t----- bird -----\tformula_1"
  ],
  [
    "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "SELECT c.name AS 'Circuit Name', r.location AS 'Location', s.season AS 'Date (Season)', r.raceName AS 'Race' FROM races r JOIN seasons s ON r.year = s.year;\t----- bird -----\tformula_1"
  ],
  [
    "Which race was Alex Yoong in when he was in track number less than 10?",
    "SELECT r.race_id, d.driver_id, d.firstname || ' ' || d.lastname AS fullname, COUNT(lt.lap) as num_laps_in_race FROM races r JOIN drivers d ON r.driver_id = d.driver_id LEFT JOIN laps lt ON r.race_id = lt.race_id AND d.driver_id = lt driver_id GROUP BY r.race_id, d.driver_id, d.firstname, d.lastname HAVING COUNT(lt.lap) < 10;\t----- bird -----\tformula_1"
  ],
  [
    "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
    "WITH rankedResults AS ( SELECT row_number() OVER (ORDER BY raceID) AS rank, * FROM results ) SELECT rank - 1 AS raceGroup, COUNT(DISTINCT raceID) AS count FROM rankedResults GROUP BY rank;\t----- bird -----\tformula_1"
  ],
  [
    "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "SELECT r.`name`, r. `year`, COALESCE(r2.`fastest_lap`, 0) as fastlaps, -- Add this line: you need a subquery to get the fastest_lap from results table! d.driver_name FROM races r LEFT JOIN ( SELECT raceId, MAX(`fastest_lap`) as `fastest_lap` FROM results WHERE `fastest_lap` IS NOT NULL GROUP BY raceId ) r2 ON r.raceId = r2.raceId INNER JOIN driverStandings d ON r.id = d.raceID GROUP BY r.name, r.year, d.driver_name;\t----- bird -----\tformula_1"
  ],
  [
    "What is Eddie Irvine's average points scored in year 2000?",
    "SELECT AVG(t1.points) AS average_point_scored FROM ( SELECT r.points FROM results r JOIN drivers d ON r.driverId = d.driverId /* Modified */ WHERE d.driverName = 'Eddie Irvine' ) t1;\t----- bird -----\tformula_1"
  ],
  [
    "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "WITH first_race AS ( SELECT MIN(r.year) AS earliest_year FROM races r ), driver_points AS ( SELECT ds.driverID, SUM(CORRESPONDING rs.points) AS points FROM driverStandings AS ds JOIN results AS rs ON (ds.driverID = rs.driverID AND ds.raceID=rs.raceID) WHERE EXISTS (SELECT 1 FROM drivers d WHERE d.id=ds.driverID AND d.constructorID= '16') ) SELECT driverID, points FROM driver_points;\t----- bird -----\tformula_1"
  ],
  [
    "List all races in 2017 and the hosting country order by date of the event.",
    "SELECT * FROM races WHERE substr(startDate, 1, 4) = '2017' ORDER BY startDate;\t----- bird -----\tformula_1"
  ],
  [
    "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.",
    "SELECT r.name, r.year, c.circuit_name + ' (' + r.location + ')' FROM ( SELECT MAX(l.laps) AS max_laps, l.driverId, l.raceID FROM lapTimes l GROUP BY l.driverId, l.raceID HAVING r.id NOT IN (SELECT raceid FROM status WHERE status='Withdrew') ) AS subquery INNER JOIN races r ON subquery.max_laps = ( SELECT MAX(l.laps) FROM laptimes l WHERE l.driverid=subquery.driverid AND l.Raceid=subquery.raceID) -- Changed here: results is not required in this simplified query -- INNER JOIN results res ON r.id = res.raceId INNER JOIN circuits c ON r.circuitID = c.Circuit_id ORDER BY subquery.max_laps DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "SELECT COUNT(DISTINCT raceId) FROM races r WHERE name = 'European Grand Prix'\t----- bird -----\tformula_1"
  ],
  [
    "What's the location coordinates of Silverstone Circuit?",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?",
    "PRAGMA foreign_keys = ON;\t----- bird -----\tformula_1"
  ],
  [
    "What's the reference name of Marina Bay Street Circuit?",
    "SELECT T1.circuitRef FROM circuits AS T1 WHERE T1.name = 'Marina Bay Street Circuit';\t----- bird -----\tformula_1"
  ],
  [
    "In which country can I find the circuit with the highest altitude?",
    "SELECT COALESCE(MAX(circuitId), 0) FROM circuits;\t----- bird -----\tformula_1"
  ],
  [
    "How many drivers don't have a code?",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Which country is the oldest driver from?",
    "SELECT D.driverId AS id, C.constructorName FROM drivers D JOIN constructors C ON D.constructorId = C.constructorId JOIN qualifying Q ON D.driverid = Q.driverID AND D.constructorid = Q.constructorID;\t----- bird -----\tformula_1"
  ],
  [
    "Please list the surnames of all the Italian drivers.",
    "SELECT p.stop FROM pitStops AS p JOIN results AS r ON p.driverId = r.driverId AND p.raceId = r.raceId WHERE p.lap > ( SELECT CAST( ( SELECT datetime(p.stop, 'localtime') ) - SUM(T2.milliseconds / 1000.0) FROM qualifying AS T2 JOIN drivers AS T3 ON T2.constructorId = T3.constructorId AND T2.driverId = T3.driverId WHERE T2.position = 'F' AND T2.raceId = p.raceId AND T3.driverId = r.driverId ) AS REAL) - 30;\t----- bird -----\tformula_1"
  ],
  [
    "Which website should I go to if I want to know more about Anthony Davidson?",
    "SELECT AVG(l.lapTime) as avg_time, d.surname AS driver_name, c.name AS constructor_name FROM lapTimes l JOIN drivers d ON l.driverId = d.id JOIN constructors c ON d.constructorId = c.constructorId GROUP BY d.surname, c.name;\t----- bird -----\tformula_1"
  ],
  [
    "What's Lewis Hamilton's reference name?",
    "SELECT d.driver_id AS hamilton_id, dr.ref_name AS hamilton_ref, r.race_id FROM drivers d JOIN referred_drivers dr ON d.referred_driver_id = dr.id JOIN races r ON ... ... WHERE dr.name = 'LewisHamilton' // Removed unnecessary string concatenation AND d.first_name || ' ' || d.last_name = 'Lewis Hamilton'\t----- bird -----\tformula_1"
  ],
  [
    "Which circuit did the 2009 Spanish Grand Prix use?",
    "SELECT DISTINCT C.circuitId -- Assume 'c' is a shorter alias for an existing table that contains raceID linking somehow with these IDs FROM races R JOIN circuits C ON R.raceId = C.circuitId;\t----- bird -----\tformula_1"
  ],
  [
    "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "SELECT T2.year FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId;\t----- bird -----\tformula_1"
  ],
  [
    "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "SELECT C.`circuitName`, COUNT(DISTINCT RR.`constructorId`) AS raceTotal, case when count(distinct rr.constructorid) = 10 then 'full grid' else '' end fullGrid FROM `races` AS R JOIN `circuits` AS C ON R.`circuitId` = C.`circuitId` WHERE C.`circuitName` LIKE '%silverstone%' AND R.`type` = 'Formula1' GROUP BY R.`raceID`, C.`circuitName`;\t----- bird -----\tformula_1"
  ],
  [
    "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?",
    "SELECT COALESCE(r2.time, r1.time) AS Time FROM (SELECT DISTINCT raceid, time FROM races WHERE raceid LIKE '15' AND time IS NOT NULL) r1 LEFT JOIN results res ON r1.raceid = res.raceid JOIN races r2 ON r1.raceid = r2.raceid;\t----- bird -----\tformula_1"
  ],
  [
    "How many Formula_1 races took place on the circuits in Italy?",
    "SELECT s.statusid, s.status FROM status s JOIN results r ON s.statusid = r.statusid WHERE r.raceid IN ( SELECT rr.raceid FROM races rr JOIN circuits c ON rr.circuitid = c.circuitid WHERE c.country = 'Italy' OR c.country LIKE 'Italy% %');\t----- bird -----\tformula_1"
  ],
  [
    "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.",
    "SELECT json_group_array(S.date) FROM ( SELECT DISTINCT t1.date FROM races AS t1 INNER JOIN circuits AS c ON (t1.circuitId = c.circuitId) WHERE LOWER(c.circuit) LIKE '%barcelona-catalunya%' ) S;\t----- bird -----\tformula_1"
  ],
  [
    "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.",
    "SELECT * FROM circuits WHERE circuitId IN (SELECT r.circuitid FROM races r INNER JOIN seasons s ON r.year = s.year WHERE s.year = 2009 AND r.round = 14);\t----- bird -----\tformula_1"
  ],
  [
    "What's the fastest lap time ever in a race for Lewis Hamilton?",
    "SELECT COALESCE(MIN(r.fastestLapTime), 0) AS min_fastest_lap_time FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE CONCAT(d.forename, ' ', d.surname) IN ( SELECT CONCAT(d.forename, ' ', d.surname) FROM drivers d WHERE (CASE WHEN d.forename = 'Lewis' AND d.surname = 'Hamilton' THEN 1 ELSE 0 END) + (CASE WHEN d.forename = 'Michael' AND d.surname = 'Schumacher' THEN 1 ELSE 0 END) > 0 )\t----- bird -----\tformula_1"
  ],
  [
    "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
    "SELECT d.forename, d.surname FROM drivers d JOIN ( SELECT driverid, fastestlapSpeed, ROW_NUMBER() OVER ( PARTITION BY driverid ORDER BY fastestlapspeed DESC ) rnk FROM results ) mr ON d.driverId = mr.driverID WHERE mr.rnk=1;\t----- bird -----\tformula_1"
  ],
  [
    "Which driver ranked the first in the Australian Grand Prix in 2008? Please give his reference name.",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Please list the Formula_1 races that Lewis Hamilton participated.",
    "SELECT * FROM results r JOIN drivers d ON r.driverID = d.driverid WHERE d.name = 'Max Verstappen';\t----- bird -----\tformula_1"
  ],
  [
    "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "WITH lewis_hamilton AS ( SELECT R.`raceId`, MIN(R.`rank`) AS min_rank, ROW_NUMBER() OVER (PARTITION BY R.`driverID` ORDER BY R.`rank`) AS row_num FROM `results` R WHERE R.`name` = 'Lewis Hamilton' ), all_ranks AS ( SELECT D.name, R.raceId, MIN(R.rank) AS rank FROM `results` R JOIN `drivers` D ON R.driverId = D.driverID WHERE D.`name` != 'Lewis Hamilton' GROUP BY (R.driverID, D.name) ) SELECT * FROM all_ranks WHERE raceid NOT IN ( SELECT row_num FROM lewis_hamilton ); UNION ALL SELECT r.rank AS rank, r.raceId, 1 AS row_num FROM ( SELECT t.raceID, rh.min_rank as rank , ROW_NUMBER() OVER (PARTITION BY R.driverID ORDER BY R.rank) AS row_num FROM (`results` R JOIN `drivers` D ON R.driverID = D.driverID ) LEFT JOIN lewis_hamilton rh ON r.raceid =rh.raceid WHERE D.`name` != 'Lewis Hamilton' ; )as T(raceId, rank);\t----- bird -----\tformula_1"
  ],
  [
    "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "SELECT r.raceid, AVG(q.fastestLapTime) AS fast_lap_time FROM qualifiering q JOIN races r ON q.qualifyId = r.raceID AND r.year = 2009 WHERE r.name LIKE '%Spanish Grand Prix%' AND EXISTS ( SELECT 1 FROM results res WHERE res.raceId = q.qualifyID ) GROUP BY r.raceid ORDER by raceid DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "In which years did Lewis Hamilton participate in a Formula_1 race?",
    "SELECT DISTINCT T2.year FROM seasons T1 INNER JOIN results T2 ON T1.raceid = T2.raceid INNER JOIN drivers T3 ON T2.driverid = T3.driverid WHERE T3.name = 'Lewis' AND T2.positiontext = 'F';\t----- bird -----\tformula_1"
  ],
  [
    "What was Lewis Hamilton's final rank in the 2008 Australian Grand Prix?",
    "SELECT cr.name AS constructor, r.number AS car_number, d.givenName || ' ' || d.familyName AS FULL_NAME, q.position, l.fastestLapSpeed FROM ( SELECT res.resultId FROM results res JOIN driverStandings ds ON res.driverId = ds.driverId AND res.raceId = ds.raceId WHERE res.year > 1900 AND SUBSTR((r.name || ' --'), LENGTH(r.name) - LENGTH('Grands') - 1) LIKE '%Grands%' ) AS v JOIN constructorResults cr ON v.resultID = cr.resultID JOIN results res ON v.resultID = res.resultID JOIN drivers d ON res.driverId = d.driverId JOIN races r ON cr.raceId = r.raceId JOIN qualifying q ON q.driverId = d.driverId AND cr.qualifyId = q.qualifyId JOIN qualifying l ON l.driverId = d.driverId AND cr.qualifyID = l.qualifyID WHERE SUBSTR((r.name || ' --'), LENGTH(r.name) - LENGTH('Grands') - 1) LIKE '%Grands%' AND res.year > 1900 ORDER BY r.name, ds.points DESC;\t----- bird -----\tformula_1"
  ],
  [
    "Which driver was in the no. 4 grid formation when starting the race in 2008's Australian Grand Prix? Please give his forename and surname.",
    "SELECT d.forename, d.surname FROM drivers d JOIN results r ON d.driverID = r.driverID WHERE r.grid = 4 AND EXISTS ( SELECT 1 FROM races WHERE raceid = r.raceid AND STRFTIME('%Y', raceDate) = '2008' )\t----- bird -----\tformula_1"
  ],
  [
    "How many drivers managed to finish the race in the 2008 Australian Grand Prix?",
    "SELECT COUNT(DISTINCT driverId) FROM results WHERE time IS NOT NULL AND raceId = '2008_Aussie_GP';\t----- bird -----\tformula_1"
  ],
  [
    "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?",
    "SELECT status.statusId AS status_id, status.status AS status, results.resuls_id AS result_id, results.race_id AS race_id, results.driver_id AS driver_id, results.constructor_data AS constructor_id, results.number AS entry_number, results.grid AS position_from_grid, results.position AS race_position, results.rank AS rank, results.milliseconds AS time_and_duration, results.fastest_lap_time AS fastest_laps_time FROM status INNER JOIN results ON results.statusId = status.statusId;\t----- bird -----\tformula_1"
  ],
  [
    "What's the finish time for the driver who ranked second in 2008's Australian Grand Prix?",
    "SELECT T2.name AS driver_name, T4.time FROM pitStops T1 JOIN drivers T2 ON T1.driver_id = T2.driver_id LEFT JOIN races T3 ON T1.race_id = T3.raceId AND T3.circuitname LIKE '%, Australia%' LEFT JOIN results T4 ON T3.raceID = T4.raceid AND T4.position_order = 2 WHERE T4.time IS NOT NULL;\t----- bird -----\tformula_1"
  ],
  [
    "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?",
    "SELECT D.name AS Driver, C.constructor_name AS Constructor, ( SELECT fastest_lap_time FROM results WHERE raceId = ( SELECT raceRef FROM races WHERE YEAR = 2008 AND name IS NULL LIMIT 1 ) AND grid = 7 ) AS fastestlap, CONCAT('http://example.com/driver/', R.driverId) as driver_url, R.points AS points FROM results R JOIN drivers D ON R.driverId = D.driver_id JOIN constructors C ON R.constructorId = C.constructor_id WHERE R.raceId = ( SELECT raceRef FROM races WHERE YEAR = 2008 AND name IS NULL LIMIT 1 ) AND time LIKE 'HH:%MM:%.%' GROUP BY D.name, C.constructor_name, R.points ORDER BY R.points DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "How many drivers from the USA participated in the 2008 Australian Grand Prix?",
    "SELECT DISTINCT nationality FROM drivers WHERE date_of_birth LIKE '%%%2008 %%';\t----- bird -----\tformula_1"
  ],
  [
    "Among the drivers that finished the race in the 2008 Australian Grand Prix, how many of them have participated in Formula_1 races?",
    "SELECT COUNT(q.driverid) FROM qualifying q JOIN results r on q.raceid = r.raceid WHERE r.time != null;\t----- bird -----\tformula_1"
  ],
  [
    "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
    "SELECT r2.raceId, q.qualifyid, c.constructor_name as team_id, d.driverName FROM races r2 JOIN qualifying q ON r2.raceID = q.raceId JOIN ( Select constructor_id id, constructor_name name from constructors ) c ON q.constructorid = c.id JOIN drivers d ON q.driverId = d.id;\t----- bird -----\tformula_1"
  ],
  [
    "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
    "CAST(SUBSTR(T.fasteSlapTime, -6) AS REAL) + (CAST(SUBSTR(T.fasteSlapTime, -3) AS REAL)) / 1000 + (CAST(CHAR(SUBSTR(T.fasteSlapTime, -4, 2), CHAR(16))AS INT)*10 + CAST(CHAR(MID(T.fasteSlapTime,-1) AS INT))) / 60000\t----- bird -----\tformula_1"
  ],
  [
    "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?",
    "SELECT ROUND( ( SELECT COUNT(DISTINCT raceId) FROM results WHERE time IS NOT NULL ) / ( SELECT COUNT(DISTINCT raceId) FROM results ) * 100, 2 ) AS resultrate;\t----- bird -----\tformula_1"
  ],
  [
    "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "SELECT ( SELECT T1.time - L.last_driver_time AS speed FROM results AS T1, ( SELECT raceId, AVG(time) AS last_driver_time FROM results WHERE time NOT LIKE '%:%.%' GROUP BY raceId, positionOrder HAVING COUNT(*) > 0 ) AS L ON T1.raceId = L.raceId AND T1.positionOrder IN (SELECT id FROM (SELECT driverID,position,COUNT(*) as count FROM constructorstandings group by driverID,position) x GROUP BY count) ) UNION ( SELECT 'The Champion' AS \"The Champion\" FROM results WHERE time NOT LIKE '%:%.%' )\t----- bird -----\tformula_1"
  ],
  [
    "How many circuits are there in Melbourne, Australia?",
    "SELECT COUNT(*) AS num_circuits FROM circuits WHERE location = 'Australia';\t----- bird -----\tformula_1"
  ],
  [
    "Please list the location coordinates of the US circuits.",
    "SELECT s.status FROM status s LEFT JOIN ( SELECT cs.statusId FROM constructorstandings cs JOIN races r ON cs.raceId = r.raceId WHERE r.year < '2015' AND cs.constructorStatus = 1001 ) AS excluded_statuses ON s.statusid = excluded_statuses.statusId WHERE excluded_statuses.statusId IS NULL;\t----- bird -----\tformula_1"
  ],
  [
    "How many British drivers were born after 1980?",
    "SELECT d.driverName, c.name, d.number, s.positionText, res.points FROM drivers d JOIN driverStandings ds ON d-driverid = DriverId AND (2022, ds.rank) IN ((2022, 22), (2022, 6)) JOIN constructors c on ds.constructor_id = Constructor_id JOIN results res ON ds.raceID = RaceID and ds.driverID = Driver_id;\t----- bird -----\tformula_1"
  ],
  [
    "What are the average points of British constructors?",
    "SELECT AVG(T.points) FROM results AS T;\t----- bird -----\tformula_1"
  ],
  [
    "Which constructor has the highest point?",
    "SELECT c.name, MAX(s.points) FROM constructorStandings AS s JOIN constructors AS c ON s.constructorId = c.constructorId;\t----- bird -----\tformula_1"
  ],
  [
    "Please list the constructor names with 0 points at race 291.",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "How many Japanese constructors have 0 points in 2 races?",
    "SELECT COUNT(*) FROM ( SELECT c.constructorid FROM drivers d INNER JOIN driverstandings ds ON d.driverid = ds.driverId INNER JOIN results r ON d.driverid = r.driverid INNER JOIN constructors c ON c.constructorID = r.constructorid WHERE lower(c.nationality) LIKE '%japan' AND DS.positiontext IN('R', 'F') ) z WHERE count(DISTINCT z.raceid )= 2;\t----- bird -----\tformula_1"
  ],
  [
    "Which constructors have been ranked 1?",
    "SELECT c.builder FROM drivers d INNER JOIN driverStandings ds ON d.driverId = ds.driverId INNER JOIN constructors c ON d.constructorId = c.constructorId WHERE ds.positionOrder = 1;\t----- bird -----\tformula_1"
  ],
  [
    "How many French constructors have a lap number of over 50?",
    "SELECT COUNT(*) FROM qualifying JOIN races ON qualifying.raceId = races.raceId JOIN constructors ON qualifying.constructorId = constructors.constructorId WHERE nationality = 'France' AND (qualifyId IS NOT NULL AND qualifyId > '50');\t----- bird -----\tformula_1"
  ],
  [
    "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "What is the average time in seconds of champion for each year?",
    "SELECT r.year as year, f.lap_time as fastest_lap_time, f.lap_speed as fastest_lap_speed, p.status_id as status_id FROM results r JOIN ( -- Join qualifying table to get Lap Time and Speed for fastest lap SELECT raceid, STRINGftime(lap_time DIV 1.e3, 'hh:mm:ss.f') AS lap_time, round(speed * 10) / 100.0 AS lap_speed FROM qualifying GROUP BY raceid HAVING MAX(speed) > 150 AND MIN(speed) < 220 -- Filter out unreasonable speed values ) f ON r.raceid = f.raceid JOIN status p ON r.status_id = p.status_id;\t----- bird -----\tformula_1"
  ],
  [
    "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
    "SELECT d.driverName AS [Driver Name], q.q1, q.q2, q.q3, p.name as GrandPrix_name, r.year as Race_Year, YEAR(d.yearOfbirth) age_of_driver FROM drivers d INNER JOIN driverstandings ds ON d.driverId = ds.driverid INNER JOIN qualifying q ON ds.driverid = q.driverid INNER JOIN races r on ds.raceid = r.raceid inner join Circuits c ON r.CircuitID =c.circuitid inner join Pitstops p ON ds.raceid=p.raceid WHERE age_of_driver > 1975 AND ds.position='2' ;\t----- bird -----\tformula_1"
  ],
  [
    "How many Italian drivers haven't finished the race?",
    "SELECT * FROM results WHERE time IS NOT NULL AND statusId NOT IN ( -- These would be kept; replace with other IDs if needed 1, 2 );\t----- bird -----\tformula_1"
  ],
  [
    "Which driver has the fastest lap time? Please give their forenames and surnames.",
    "SELECT DISTINCT 'The Driver who achieved fastest lap time:', d.Forename, ',', d.surname FROM drivers AS d JOIN ( SELECT grid , MAX(time) as THE_TIME FROM results WHERE grid IS NOT NULL) M ON D.driverid = m.grid;\t----- bird -----\tformula_1"
  ],
  [
    "What is the fastest lap number of the champion in 2009?",
    "(SELECT cs.id ,r.year,r.status, '1:47.736' AS Time, 220.611 as FastestLapSpeed FROM constructorStandings cs WHERE year = 2009 UNION ALL SELECT res.driverid,res.year,res.statusid, '1:47.736' AS Time, 220.611 as FastLapSpeed FROM results res WHERE raceid=201 AND rank = 1))\t----- bird -----\tformula_1"
  ],
  [
    "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "SELECT AVG(results.fastestLapSpeed) FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009\t----- bird -----\tformula_1"
  ],
  [
    "Which race has the shortest actual finishing time? Please give the name and year.",
    "SELECT r.name, s.year FROM ( SELECT DISTINCT raceID, MIN(milliseconds) as min_time FROM results WHERE milliseconds IS NOT NULL AND constructorId IS NOT NULL GROUP BY raceID ) AS grouped_min INNER JOIN races r ON grouped_min.raceID = r.raceID INNER JOIN seasons s ON grouped_min.min_time IN ( SELECT MIN(milliseconds) FROM results WHERE raceID = r.raceID AND milliseconds IS NOT NULL AND constructorId IS NOT NULL );\t----- bird -----\tformula_1"
  ],
  [
    "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "SELECT LTRIM(RTRIM(SUBSTR(dateLap, 1, LENGTH(dateLap) - 3))) FROM lapTimes AS lt WHERE DATE(LTRIM(RTRIM(SUBSTR(dateLap, 1, LENGTH(dateLap) - 3)))) LIKE '200[0-5]%'\t----- bird -----\tformula_1"
  ],
  [
    "How many French drivers who obtain the laptime less than 02:00.00?",
    "SELECT driverId AS driver_id, (CASE WHEN time REGEXP '^[0-9]' THEN STRFTIME('%H', time) * 3600 + STRFTIME('%M', time) * 60 + STRFTIME('%S', time) END) FROM lapTimes WHERE (CASE WHEN time REGEXP '^[0-9]|\\-' THEN STRFTIME('%H', time) * 3600 + STRFTIME('%M', time) * 60 + STRFTIME('%S', time) <= 720000 END);\t----- bird -----\tformula_1"
  ],
  [
    "List out the code for drivers who have nationality in America.",
    "SELECT D.driverid FROM driverStandings AS D WHERE D.code LIKE 'A%';\t----- bird -----\tformula_1"
  ],
  [
    "List out the Id number of races which were hold in 2009.",
    "SELECT r.raceid FROM (SELECT DISTINCT raceid FROM races) AS r;\t----- bird -----\tformula_1"
  ],
  [
    "How many driver participated in race ID number 18?",
    "SELECT S.status, AVG(R.rank) AS avg_rank FROM status S LEFT JOIN results R ON S.statusId = R.statusId GROUP BY S.status ORDER BY avg_rank DESC;\t----- bird -----\tformula_1"
  ],
  [
    "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "SELECT COUNT(DISTINCT d.country) FROM constructors c JOIN driverStandings ds ON c.constructor_id = ds.constructor_id AND c.year = ds.season JOIN drivers d ON c.constructor_id = d.driverId AND ds.driver_id IS NOT NULL AND d/drivers.driver_id IS NOT NULL;\t----- bird -----\tformula_1"
  ],
  [
    "What is reference name of Robert Kubica?",
    "SELECT d.* , p.* , r.* FROM drivers AS d JOIN results AS r ON d.driverID = r.driverId LEFT JOIN pitStops AS p ON r.raceID = p.race_id AND d.driverID = p.driver_id;\t----- bird -----\tformula_1"
  ],
  [
    "How many Australian drivers who were born in 1980?",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
    "cast(strftime('%Y', d.dob) AS int )\t----- bird -----\tformula_1"
  ],
  [
    "Please state the reference name of the oldest German driver.",
    "SELECT d.driverref FROM drivers d JOIN ( SELECT driverid, STRFTIME('%Y', datetime(dob, '+18 years')) AS min_dob_year FROM drivers WHERE nationality = 'German' GROUP BY driverid ) AS x ON STRFTIME('%Y', datetime(d.dob, '+18 years')) = x.min_dob_year AND d.driverid = x.driverid WHERE d.nationality = 'German' ORDER BY d.dob ASC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "CREATE TABLE race( id INT PRIMARY KEY NOT NULL, name VARCHAR(20), date DATE, -- Date in format MM/DD/YYYY ); -- Now we can do a similar validation to see if dates are like this, and add 'date' filter to our SQL if they are. SELECT r.id, -- race id. integer r.date, YEAR(date) AS year, -- date of race r.name FROM race r WHERE TRIM(r.name) NOT LIKE '(null)' -- assuming this will ensure that only string values are being matched. AND ( r.date != '12/25' -- Assuming all Christmas dates should be removed OR (CONVERT(CHAR(7), r.date ) LIKE '[04/]%' AND REPLACE(r.name, 'USA', '') != 'GRAND') -- Assuming US grand prix date range is April and name is 'US Grand Prix' )\t----- bird -----\tformula_1"
  ],
  [
    "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
    "SELECT CAST(SUBSTR(dob, 4, 2) AS REAL) + LEFT(dob, 3) AS birthYear FROM driverStats;\t----- bird -----\tformula_1"
  ],
  [
    "State the racing year which has the fastest lap time?",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Which year has the lowest speed of lap time?",
    "SELECT R.year AS Year, M.max_value AS Max_Speed FROM ( SELECT LT.race_id, MAX(LT.milliseconds) AS max_value FROM LapTimes LT GROUP BY LT.race_id ) AS M JOIN ( SELECT race_id FROM LapTimes Lt GROUP BY Lt.race_id ORDER BY MAX(MS.milliseconds) DESC ) AS T ON TRUE -- This join is needed to put races in order of highest max_speed before grouping. JOIN ( SELECT DISTINCT race_id, year FROM results R JOIN drivers D USING (driverId) ) AS R ON M.race_id = R.race_id;\t----- bird -----\tformula_1"
  ],
  [
    "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.",
    "SELECT DR.driverId FROM drivers DR WHERE not exists ( SELECT 1 FROM results R WHERE MOD(R.laps,1) = 0 AND R.milliseconds < (SELECT -MAX(milliseconds) FROM results where laps = 1) AND R.driverid = DR.driverid )\t----- bird -----\tformula_1"
  ],
  [
    "From race no. 50 to 100, how many finishers have been disqualified?",
    "SELECT COUNT(DISTINCT r.driverId) FROM results r JOIN status s ON r.statusId = s.statusId WHERE (r.time IS NOT NULL AND r.time NOT LIKE '%+%') -- exclude 'null' and '+xx:yy.zzz' times AND r.raceId BETWEEN 50 AND 100;\t----- bird -----\tformula_1"
  ],
  [
    "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "SELECT circuit_name, COUNT(raceId) OVER (PARTITION BY c.circuit_id) AS races_count FROM circuits c INNER JOIN races r ON (c.circuit_id = r.circuitid) GROUP BY c.circuit_id, c.circuit_name HAVING COUNT(r.raceId) = ( SELECT MAX(rc) AS mxfm FROM (SELECT COUNT(*) AS rc FROM circuits c0 INNER JOIN races r ON (c0.circuit_id = r.circuitid) GROUP BY c0.circuit_id, c0.circuit_name)s )\t----- bird -----\tformula_1"
  ],
  [
    "What race number has the most finishers?",
    "SELECT r.number FROM results r INNER JOIN races c ON r.raceId = c.raceId GROUP BY r.raceId ORDER BY COUNT(DISTINCT r.position) DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.",
    "SELECT D.driverRef, ( SELECT MAX(T.time) FROM results T WHERE D.id = T.driverID AND T.rank = Q.qualifyId ) AS maxTime FROM drivers as D JOIN qualifying AS Q ON D.driverID = Q.driver_id;\t----- bird -----\tformula_1"
  ],
  [
    "On what year did the youngest driver had his first qualifying race? State the name, date and time of the race.",
    "ALTER TABLE Races ADD COLUMN \"FullYear\" INTEGER; UPDATE Races SET FullYear = substr(YEAR, 1, 4) WHERE YEAR IS NOT NULL;\t----- bird -----\tformula_1"
  ],
  [
    "How many American drivers have been disqualified from the race.",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "Which of the Italian constructor got the highest point to date? Give its introduction website?",
    "SELECT c.nationality, cs.points FROM constructorStandings cs JOIN constructors c ON cs constructorId = c.constructorId WHERE lower(c.nationality) LIKE '%italy%' ORDER BY points DESC LIMIT 1;\t----- bird -----\tformula_1"
  ],
  [
    "What is the website of the constructor who tallied the most total wins.",
    "-- Get constructors that won a race WITH resultGroup AS ( SELECT c.constructorName, COUNT(r.position) as count FROM results r JOIN constructors c ON r.constructorId = c.constructorId WHERE r.raceId IN (SELECT raceId FROM constructorStandings WHERE position IN ('1')) GROUP BY c.constructorName ) SELECT first_constructor_name FROM resultGroup ORDER BY count DESC LIMIT 1 UNION ALL -- Get other constructors (SELECT COALESCE(w.url, 'No website found') AS first_constructor_url FROM results r JOIN constructors c ON r.constructorId = c.constructorId LEFT JOIN websites w ON c.constructorName = w.constructorName WHERE r.raceId IN (SELECT raceId FROM constructorStandings WHERE position NOT IN ('1')) )\t----- bird -----\tformula_1"
  ],
  [
    "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.",
    "SELECT * FROM ( SELECT r.race_name AS raceName, lt.lapNumber, t2.time AS fastTime, d.driverName, lt.laptime AS driverLapTime, ROW_NUMBER() OVER(PARTITION BY r.race_id ORDER BY COALESCE(dl.position, r.statusId) = 1, t2.raceId <= rr.raceid) as rank FROM races r JOIN results t2 ON r.race_id = t2.race_id JOIN qualifying q ON r.race_id = q.race_id AND r.statusID != 5 LEFT JOIN (SELECT DISTINCT raceId, lapNumber FROM lapTimes WHERE circuitID = \"French_Grand_Prix\") lt ON r.race_id = lt.raceId LEFT JOIN status s ON t2.statusid=s.statusID JOIN drivers dl ON t2.driverid=dl.driverId LEFT JOIN ( SELECT DISTINCT raceId, driverID, position, laptime FROM results WHERE (position = '1' OR position != '1') AND race_id IN (SELECT raceID FROM laps LIMIT 10) ) d ON r.race_id = d.raceID AND dl.driverid=d.driverID WHERE COALESCE(r.circuitid, \"French_Grand_Prix\") IN (\"French_Grand_Prix\") ) AS mySubquery WHERE position = '1'\t----- bird -----\tformula_1"
  ],
  [
    "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?",
    "SELECT AVG(T2.fastestLapTime) FROM ( SELECT distinct(driverId) FROM results WHERE raceID=28 AND RANK < 11 ) AS T1 LEFT JOIN results as T2 ON T2.driverId = T1.driverid ;\t----- bird -----\tformula_1"
  ],
  [
    "List down top 5 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "SELECT driver_name, averagepitstopduration, averagequalifyingtime FROM ( SELECT d.name AS driver_name, AVG(p.time) AS averagepitstopduration, AVG(q.milliseconds) AS averagequalifyingtime FROM drivers d INNER JOIN pitStops p ON d.driverId = p driverId INNER JOIN qualifying q ON d.driverId = q.driverId AND p.raceid = q raceid GROUP BY d.name, d.driverid )\t----- bird -----\tformula_1"
  ],
  [
    "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "SELECT DISTINCT r race_id, COALESCE(s.status, '') status FROM results d INNER JOIN races r ON d.results_id = r.race_ID -- Filter out those who did not start LEFT JOIN (SELECT DISTINCT T.driverID FROM results AS T WHERE T.results_id NOT IN('2010', '2005')) AS T ON d.driverid = T.driverid WHERE d.results_id IN ('2010', '2005') ORDER BY rank;\t----- bird -----\tformula_1"
  ],
  [
    "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "SELECT c.constructorRef, c.url FROM races r INNER JOIN results re ON r.raceId = re.raceId INNER JOIN constructorResults cr ON re.constructorId = cr.constructorId INNER JOIN constructors c ON cr.constructorId = c.constructorId WHERE (SELECT MAX(re2.points) FROM results re2 WHERE re2.raceId IN ( SELECT r3.raceId FROM races r3 WHERE r3.name = 'Singapore Grand Prix' AND r3.year = 2009 )) < re.points\t----- bird -----\tformula_1"
  ],
  [
    "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
    "SELECT DISTINCT T1.forenames, T1.surname FROM drivers AS T1 WHERE T1.nationality IN (SELECT nationality FROM nationalities WHERE country = 'Austria');\t----- bird -----\tformula_1"
  ],
  [
    "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "SELECT * FROM drivers WHERE STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC;\t----- bird -----\tformula_1"
  ],
  [
    "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "SELECT Name, Country FROM circuits WHERE Name = 'Hungaroring';\t----- bird -----\tformula_1"
  ],
  [
    "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "SELECT * FROM constructorStandings cs JOIN races r ON cs.raceId = r.raceId WHERE cs.points = ( SELECT MAX(total_points) FROM ( SELECT SUM(t2.points) AS total_points FROM races t1 JOIN constructorStandings t2 ON t1.raceId = t2.raceId ) AS sub_query );\t----- bird -----\tformula_1"
  ],
  [
    "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
    "SELECT AVG(r.points) as 'average_score' FROM results r WHERE (r.driverid, 1)= ( SELECT D.driverID, 1 FROM drivers d WHERE d.forename = 'Lewis' and d.surname='Hamilton')\t----- bird -----\tformula_1"
  ],
  [
    "What is the annual average number of races held during the first 10 years of the 21st century?",
    "SELECT ( COUNT(CASE WHEN r.year BETWEEN '2000-01-01' AND '2010-12-31' THEN r.year ELSE NULL END) * 10 ) / COUNT(DISTINCT s.year) AS result FROM races r JOIN seasons s ON r.year = s.year;\t----- bird -----\tformula_1"
  ],
  [
    "Which citizenship do the vast majority of the drivers hold?",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?",
    "SELECT COUNT(DISTINCT t2.driverId) FROM results AS t1 INNER JOIN drivers AS t2 ON t1.driverID = t2.driverId WHERE t1.driverID IN ( SELECT t1.driverid FROM results AS t1 INNER JOIN drivers AS t2 ON t1.driverID = t2.driverId WHERE ABS(position - 91) < 10 -- get drivers with position within top 10 in the current season or above )\t----- bird -----\tformula_1"
  ],
  [
    "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
    "SELECT * FROM seasons WHERE name LIKE '2017'\t----- bird -----\tformula_1"
  ],
  [
    "Which racetrack hosted the most recent race? Indicate the full location.",
    "SELECT C.location, C.country FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE R.year = ( SELECT MAX(R2.year) FROM races R2 );\t----- bird -----\tformula_1"
  ],
  [
    "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "SELECT r.RaceName, MAX(CASE WHEN q.q3 IS NOT NULL THEN CAST(SUBSTR(q.q3, 1, INSTR(q.q3, ' ') - 1) AS REAL) END) as BestTime2008 FROM races r INNER JOIN qualifying q ON (r.raceID = q.raceId) INNER JOIN results res ON (r.raceID = res.raceID AND res.year = 2008) INNER JOIN constructors c ON (res.constructorID = c.constructorID) WHERE c.constructorName IS NOT NULL GROUP BY r.RaceName;\t----- bird -----\tformula_1"
  ],
  [
    "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "SELECT COUNT(*) AS NumOfDriversWithinPosition100, SUM(CASE WHEN T2.PositionWithinDrivers <= 100 THEN 1 ELSE 0 END) AS NumOfDriversFinishedWithinTop100 FROM drivers D JOIN results R ON D.driverId = R.driverId JOIN constructors C ON R.constructorID = C.constructorID LEFT JOIN (SELECT Q.race_id, ROW_NUMBER() OVER (PARTITION BY Q.driverId ORDER BY Q.time) AS PositionWithinDrivers, ROW_NUMBER() OVER (PARTITION BY Q.controllerID ORDER BY Q.time DESC) AS PositionWithinConstructors FROM qualifying Q) T2 ON R.raceid = T2.race_id AND D.driverid = T2.driverid WHERE ( POSITIONWITHINCONSTRUCTORS > 1 OR POSITIONWITHINDRIVERS > 100 )\t----- bird -----\tformula_1"
  ],
  [
    "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "SELECT dr.driverId, COUNT(*) as num_accidents FROM results re JOIN drivers dr ON re.driverid = dr.driverid JOIN status s ON re.statusid = s.statusid GROUP BY dr.driverId;\t----- bird -----\tformula_1"
  ],
  [
    "How many wins was achieved by the oldest racer? Indicate his/her full name.",
    "CREATE TABLE validStatuses ( statusId INTEGER PRIMARY KEY, status TEXT UNIQUE ); INSERT INTO validStatuses (statusId, status) VALUES (/* statuses id here*/), (/* other statuses id's, etc.*/); SELECT COUNT(DISTINCT C.constructor_id) FROM constructors AS C JOIN results R ON C.constructor_id = R.constructor_id AND R.status_id IN ( SELECT status_id FROM validStatuses WHERE status='Winner');\t----- bird -----\tformula_1"
  ],
  [
    "What was the longest time a driver had ever spent at a pit stop?",
    "SELECT stop FROM pitstops AS p JOIN drivers AS d ON p.driverId = d.driverId WHERE p.duration = ( SELECT MAX(duration) FROM pitstops );\t----- bird -----\tformula_1"
  ],
  [
    "Among all the lap records set on various circuits, what is the time for the fastest one?",
    "SELECT MAX(T1.fastestLapTime) AS FastestLapTimesRecordedAcrossTheRaces FROM results AS T1\t----- bird -----\tformula_1"
  ],
  [
    "What was the longest time that Lewis Hamilton had spent at a pit stop?",
    "SELECT CASE WHEN MAX(COALESCE(duration, 0)) = 0 THEN 'Never finished within recorded time' ELSE MAX(COALESCE(duration, 0)) END AS longest_duration, -- Additional query or logic might be relevant here based on other needs.\t----- bird -----\tformula_1"
  ],
  [
    "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?",
    "SELECT stop FROM pitStops JOIN races ON pitStops.raceId = races.race_id WHERE dates.date = '2022-01-04' AND driverId = 'Hamilton';\t----- bird -----\tformula_1"
  ],
  [
    "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.",
    "SELECT r.raceID, results.driverID FROM races AS r JOIN circuits AS c ON r.circuitId = c.circuitId LEFT JOIN qualifying AS q ON extract(YEARENGTH FROM strftime('%s', 'now') - q.qualifiedDate) / 31536000 = q.year AND r.yeareq = q.year AND r.raceidreq = q.racereq AND r.driverreqla= q.driverrequ JOIN results ON r.raceID = results.raceID WHERE CAST(c.as string as INTEGER) LIKE '%Australian%' AND results.position = '2'\t----- bird -----\tformula_1"
  ],
  [
    "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
    "SELECT T2.fastestLapTime FROM results AS T2 INNER JOIN drivers AS T1 ON T1.driverId = T2.driverId WHERE T1.driverId = 68 AND T2.fastestLapTime IS NOT NULL;\t----- bird -----\tformula_1"
  ],
  [
    "Which driver created the shortest lap time ever record in a Formula_1 race? Please give his full name.",
    "SELECT DISTINCT CONCAT(DR.firstName, ' ', DR.lastName, '') AS fastest_time_driver, MAX(R.time) as max_time, MIN(r.milliseconds / 1000) FROM results R JOIN drivers DR ON R.driverID = DR.driverID GROUP BY DR.lastName || ' ' || DR.firstName;\t----- bird -----\tformula_1"
  ],
  [
    "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
    "error: No SQL found in the input string\t----- bird -----\tformula_1"
  ],
  [
    "What is the lap record for the Austrian Grand Prix Circuit?",
    "SELECT T1.fastestLapTime FROM results AS T1 JOIN status AS T2 ON T1.statusId = T2.statusId WHERE T2.status = \"Wheel\" ;\t----- bird -----\tformula_1"
  ],
  [
    "Please list the lap records for the circuits in Italy.",
    "SELECT r.raceid AS \"race_id\", c.name AS \"circuit_name\", ra.year, AVG(tl.MS) as AVG_LAP_TIME_MILLI_SEC FROM ( SELECT raceid, MS FROM lapTimes l WHERE status IN ('Wheel', 'Wheel bearing', 'Wheel nut','Water pump') ) tl INNER JOIN races r ON tl.raceid = r.raceid INNER JOIN circuit c ON r.circuitId=c.circuitId GROUP BY (r.raceid,r.year,c.name,c.circuitId) ORDER BY c.name,r.year DESC;\t----- bird -----\tformula_1"
  ],
  [
    "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
    "SELECT r.raceId FROM races r JOIN results res ON r.id = res.raceId;\t----- bird -----\tformula_1"
  ],
  [
    "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?",
    "SELECT p.driverID, AVG(p.pitstopTime) as avg_time FROM pitStops p JOIN races r ON p.RaceID = r.raceID JOIN circuits c ON r.circuitID = c.circuitID AND c.circuitRef = 'aut' GROUP BY p.driverID;\t----- bird -----\tformula_1"
  ],
  [
    "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
    "SELECT c.circuitid, c.circuitname FROM circuits c JOIN qualifying q ON c.circuitId = races.circuitId WHERE ( q.q1 is not NULL OR q.q2 is NOT NULL );\t----- bird -----\tformula_1"
  ],
  [
    "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?",
    "SELECT AVG(pitStops.milliseconds) AS average_pit_time FROM pitStops JOIN qualifying ON qualifying.raceid = pitStops.raceid AND qualifying.driverid = pitstops.driverid WHERE pitStops.driverid = {driver_id};\t----- bird -----\tformula_1"
  ],
  [
    "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?",
    "SELECT AVG(CAST(r.laps AS REAL) / 1000) FROM races r WHERE c.circuitName IN ('Monza', 'Imola') CROSS JOIN ( SELECT * FROM circuits ) c;\t----- bird -----\tformula_1"
  ],
  [
    "Which player has the highest overall rating? Indicate the player's api id.",
    "SELECT p.player_api_id, p.name, CASE WHEN pa.all_time_ranking = ( SELECT MAX(pa2.overall_rating) FROM Player_Attributes pa2 ) THEN 'Highest ranked' ELSE 'Not highest ranked' END AS ranking_status FROM ( SELECT player_api_id, overall_rating, ROW_NUMBER() OVER(PARTITION BY player_api_id ORDER BY id DESC) AS all_time_ordering FROM Player_Attributes ) pa JOIN Player p ON p.player_api_id = pa.player_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the height of the tallest player? Indicate his name.",
    "error: No SQL found in the input string\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the preferred foot when attacking of the player with the lowest potential?",
    "SELECT T.team_api_id AS Team, SUM(CASE WHEN M.home_team_api_id = T.team_api_id THEN 1 END) AS HomeTeam, SUM(CASE WHEN M.away_team_api_id = T.team_api_id THEN 1 END) AS AwayTeam FROM Team T JOIN Match M ON T.team_api_id IN (M.home_team_api_id, M.away_team_api_id) GROUP BY T.team_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
    "SELECT COUNT(DISTINCT p.player_api_id) FROM Match m JOIN Player p ON m.away_player_11 = p.player_api_id OR m.away_player_10 = p.player_api_id OR m.away_player_9 = p.player_api_id OR m.away_player_8 = p.player_api_id OR m.away_player_7 = p.player_api_id OR m.away_player_6 = p.player_api_id OR m.away_player_5 = p.player_api_id OR m.away_player_4 = p.player_api_id OR m.away_player_3 = p.player_api_id OR m.away_player_2 = p.player_api_id OR m.away_player_1 = p.player_api_id JOIN ( SELECT player_api_id, MAX(CASE WHEN event_type IN ('goal', 'shoton', 'foulcommit') AND CAST(value AS REAL) BETWEEN 60.0 AND 64.0 THEN 1 ELSE 0 END) AS matched FROM Events GROUP BY player_api_id ) e ON p.player_api_id = e.player_api_id AND MATCHED = 1; -- Then we do the same for home team SELECT COUNT(DISTINCT p.player_api_id) FROM Match m JOIN Player p ON m.home_player_11 = p.player_api_id OR m.home_player_10 = p.player_api_id OR m.home_player_9 = p.player_api_id OR m.home_player_8 = p.player_api_id OR m.home_player_7 = p.player_api_id OR m.home_player_6 = p.player_api_id OR m.home_player_5 = p.player_api_id OR m.home_player_4 = p.player_api_id OR m.home_player_3 = p.player_api_id OR m.home_player_2 = p.player_api_id OR m.home_player_1 = p.player_api_id JOIN ( SELECT player_api_id, MAX(CASE WHEN event_type IN ('goal', 'shoton', 'foulcommit') AND CAST(value AS REAL) BETWEEN 60.0 AND 64.0 THEN 1 ELSE 0 END) AS matched FROM Events GROUP BY player_api_id ) e ON p.player_api_id = e.player_api_id AND MATCHED = 1;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
    "SELECT * FROM (SELECT * FROM ... ) AS TempTable;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which league had the most goals in the 2016 season?",
    "WITH MatchSummary AS ( SELECT T3.home_team_api_id, SUM(CASE WHEN T7.goal IS NOT NULL THEN 1 ELSE 0 END) AS home_goals, T1.name as team_name, T3.away_team_api_id, SUM(CASE WHEN T8.goal IS NOT NULL THEN 1 ELSE 0 END) AS away_goals FROM Team T1 JOIN Match T3 ON T3.home_team_api_id = T1.team_api_id LEFT JOIN (SELECT goal, team_api_id FROM goals) T7 ON T7.team_api_id = T3.home_team_api_id LEFT JOIN (SELECT goal, team_api_id FROM goals) T8 ON T8.team_api_id = T3.away_team_api_id GROUP BY T1.name, T3.home_team_api_id, T3.away_team_api_id ) SELECT team_name, home_goals + away_goals AS total_goals, home_goals + away_goals AS final_rank FROM MatchSummary GROUP BY team_name, home_goals + away_goals; ORDER BY total_goals DESC;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which home team had lost the fewest matches in the 2016 season?",
    "WITH AwayTeamData AS ( SELECT team_api_id, COUNT(CASE WHEN match_winner = 'away' THEN 1 ELSE NULL END) OVER (PARTITION BY team_api_id) AS away_min_lost_matches, COUNT(CASE WHEN match_winner = 'home' THEN 1 ELSE NULL END) OVER (PARTITION BY team_api_id) AS home_min_won_matches FROM Match WHERE season = '2015/2016' ), HomeTeamData AS ( SELECT team_api_id, COUNT(CASE WHEN match_winner = 'away' THEN 1 ELSE NULL END) OVER (PARTITION BY team_api_id) AS away_min_lost_matches, COUNT(CASE WHEN match_winner = 'home' THEN 1 ELSE NULL END) OVER (PARTITION BY team_api_id) AS home_min_won_matches FROM Match WHERE season = '2015/2016' ) SELECT t.team_api_id AS team_id, at.away_min_lost_matches AS away_team_min_lost_matches, ht.home_min_won_matches AS home_team_min_lost_matches FROM AwayTeamData at RIGHT JOIN HomeTeamData ht ON at.team_api_id = ht.team_api_id JOIN Team t ON at.team_api_id = t.team_api_id OR ht.team_api_id = t.team_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Indicate the full names of the top 10 players with the highest number of penalties.",
    "SELECT T1.player_name, MAX(T2.penalties) AS max_penalties FROM (SELECT P.player_name, M.away_team_api_id AS team_api FROM player P JOIN match M ON ((P.player_api_id = M.away_team_api_id) OR (P.player_api_id = M.home_team_api_id))) T1 JOIN (SELECT M.away_team_api_id, SUM(CASE WHEN foulcommit = 'Foul by Team' AND goal = 'Goal' THEN 1 ELSE 0 END) AS penalties FROM match M WHERE (M.penalties IS NOT NULL AND M.penalties != '') OR (foulcommit = 'Foul by Team' AND goal = 'Goal') GROUP BY M.away_team_api_id, M.home_team_api_id ) T2 ON(T1.player_name IN ( SELECT player_name FROM (SELECT S.player_name, COUNT(*) as row_num FROM (SELECT P.player_name FROM player P JOIN match M ON ((P.player_api_id = M.away_team_api_id ) OR (P.player_api_id = M.home_team_api_id )) WHERE (M.penalties IS NOT NULL AND M.penalties != '') OR (foulcommit = 'Foul by Team' AND goal = 'Goal')) AS S GROUP BY S.player_name) t2 ORDER BY t2.row_num DESC LIMIT 10) ) GROUP BY T1.player_name ORDER BY MAX(T2.penalties) DESC;\t----- bird -----\teuropean_football_2"
  ],
  [
    "In Scotland Premier League, which away team won the most during the 2010 season?",
    "SELECT t.`team_api_id`, COUNT(CASE WHEN m.away_team_goal > m.home_team_goal THEN 1 END) AS winCount FROM Match m JOIN Team_Attributes t ON m.away_team_api_id = t.team_api_id WHERE m.away_player_11 IN (SELECT player_api_id FROM Player WHERE name IN ('Player Name 1', 'Player Name 2')) GROUP BY t.team_api_id ORDER BY winCount DESC;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "SELECT team_api_id AS top4_teams, AVG(buildUpPlaySpeed) AS avg_build_up_play_speed FROM Team_Attributes GROUP BY team_api_id ORDER BY avg_build_up_play_speed DESC LIMIT 4;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which League had the most matches end as draw in the 2016 season?",
    "SELECT C1.country_name AS country, COUNT(M.match_api_id) AS total FROM Team T1 INNER JOIN League L1 ON (T1.`country_id` = L1.`id`) INNER JOIN Country C1 ON (L1.`country_id` = C1.id) INNER JOIN Match M ON ((M.`home_team_api_id` = T1.team_api_id) OR (M.`away_team_api_id` = T1.team_api_id)) WHERE (((T1.home_team_goal = T1.away_team_goal OR T1.home_team_goal < T1.away_team_goal) AND M.`season` = '2015/2016')) GROUP BY (C1.country_name) ORDER BY total DESC LIMIT 1;\t----- bird -----\teuropean_football_2"
  ],
  [
    "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "SELECT pa.* FROM Player_Attributes pa JOIN match_players mp ON pa.player_api_id = mp.player_api_id WHERE STRFTIME('%Y-%m-%d', CAST(mp.match.Date / 1000 AS REAL)) BETWEEN '2012-01-01' AND '2014-01-07';\t----- bird -----\teuropean_football_2"
  ],
  [
    "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "SELECT DISTINCT round((COUNT(DISTINCT M.home_team_api_id) / (SELECT COUNT(*) FROM ( SELECT home_team_api_id AS team_id FROM Match ) t)), 2 ) AS total_percentage FROM League L LEFT JOIN Match M ON L.id = MATCH(M.away_team_api_id) WHERE L.name LIKE 'English' AND L.id IS NOT NULL;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the average height of players born between 1990 and 1995?",
    "INSERT INTO temp_table SELECT CAST(SUM(T2.height) / COUNT(DISTINCT T2.id)) AS avg_height FROM Player T1 JOIN filtered_players T2 ON (T1.id = T2.id);\t----- bird -----\teuropean_football_2"
  ],
  [
    "List the players' api id who had the highest above average overall ratings in 2010.",
    "SELECT EXTRACT(YEAR FROM m.date) AS my_year FROM Match;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;\t----- bird -----\teuropean_football_2"
  ],
  [
    "List the long name of teams with above-average build-up play passing in 2012.",
    "SELECT team_long_name FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL GROUP BY team_long_name, buildUpPlayPassing HAVING AVG(buildUpPlayPassing) < (SELECT average FROM ( SELECT team_long_name, AVG(buildUpPlayPassing) AS average FROM Team_Attributes WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL GROUP BY team_long_name, buildUpPlayPassing ));\t----- bird -----\teuropean_football_2"
  ],
  [
    "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "SELECT (SUM(CASE WHEN pa.preferred_foot = 'left' THEN 1 ELSE 0 END) * 100.0 / COUNT(p.player_api_id)) AS left_foot_percentage FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.birthday BETWEEN '1987-01-01' AND '1992-12-31'\t----- bird -----\teuropean_football_2"
  ],
  [
    "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
    "SELECT TAT.player_fifa_api_id -- replace with actual field you're interested in FROM Match AS M JOIN Team_Attributes AS TAS ON M.home_team_api_id = TAS.team_api_id JOIN Player_Attributes AS PAT ON SAS.player_api_id = PAT.player_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Find the average number of long-shot done by Ahmed Samir Farag.",
    "SELECT * FROM sqlite_master WHERE type='table' AND name IN ('Player_Attributes', 'Match');\t----- bird -----\teuropean_football_2"
  ],
  [
    "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "-- First insert the max ID from Match table then Update the record -- for Player table if you want to make sure you are giving a fresh player_api_id. UPDATE Player SET player_api_id = (SELECT MAX(player_api_id) FROM Match); INSERT INTO Player (nationality, dob, heightcm , weightkg, value_eur) VALUES ('String', '2022-02-22', 180, 70, 1000000);\t----- bird -----\teuropean_football_2"
  ],
  [
    "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
    "WITH Matched AS ( SELECT M.home_team_api_id AS team_api_id, M.date, COALESCE(M.home_player_11_chance_creation + ... , 0) AS totalChanceCreationHome, COALESCE(M.away_player_1_chance_creation + ..., 0) AS totalChanceCreationAway FROM Match M ) SELECT Team.team_long_name, Matched.totalChanceCreationHome, Matched.totalChanceCreationAway, ... FROM Match JOIN Team ON (Match.home_team_api_id = Team.team_api_id OR Match.away_team_api_id = Team.team_api_id) LEFT JOIN Matched ON ( Match.date >= '2014-01-01 00:00:00' AND Match.date <='2014-12-31 00:00:00') GROUP BY team_api_id, date;\t----- bird -----\teuropean_football_2"
  ],
  [
    "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "SELECT M.* FROM Match M INNER JOIN Team_Attributes Away_T ON (M.away_team_api_id = Away_T.team_api_id) SELECT M.* FROM Match M INNER JOIN Team_Attributes Home_T ON (M.home_team_api_id = Home_T.team_api_id)\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the short name of the football team Queens Park Rangers?",
    "SELECT t.team_short_name FROM Match m JOIN Team t ON m.home_team_api_id = t.team_api_id WHERE t.team_long_name = 'Queens Park Rangers' ;\t----- bird -----\teuropean_football_2"
  ],
  [
    "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "SELECT pa.player_api_id, c.name as country FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id JOIN Country c ON p.country_id = c.id WHERE DATE(pa.cohort) LIKE '1970-10%' -- Here is the correction for % sign AND STRFTIME('%Y', p.birthDate) = '1970' AND STRFTIME('%m%d', p.birthDate) >= '1031';\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the attacking work rate of the football playerr Franco Zennaro?",
    "SELECT dribbles AS AttWorkRate FROM Player_Attributes WHERE player_api_id = (SELECT id FROM Player WHERE short_name LIKE 'Franco%');\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "SELECT buildUpPlayPositioningClass FROM Team_Attributes WHERE team_api_id = ( SELECT team_api_id FROM Team WHERE team_long_name = 'ADO Den Haag' );\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "WITH MatchedPlayers AS ( SELECT case when home_player_11 IS NOT NULL AND away_player_23 IS NOT NULL THEN GREATEST(home_player_11, away_player_23) WHEN home_player_11 IS NULL THEN away_player_23 ELSE home_player_11 END AS player_api_id FROM Match WHERE match_date IN ('2014-05-10 00:00:00', '2013-01-05 00:00:00', '2014-08-10 00:00:00', '2014-09-14 00:00:00') ) SELECT *, GREATEST(player_api_id, lead_player_api_id) AS player_api_id FROM ( SELECT *, LAG(player_api_id) OVER (ORDER BY match_date) as lead_player_api_id FROM MatchedPlayers UNION ALL SELECT NULL, NULL ) T1;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "SELECT ( SELECT SUM(pa.rating) FROM Player_Attributes pa JOIN Match m ON m.match_api_id = ? WHERE STRFTIME('%Y', DateTime(m.date, '%Y%m%d')) = '2011' AND pa.player_api_id IN (home_player_11, home_player_10, home_player_9, home_player_8, home_player_7, home_player_6, home_player_5, home_player_4, home_player_3, home_player_2, home_player_1) ) AS overall_rating\t----- bird -----\teuropean_football_2"
  ],
  [
    "How many matches in the 2015/2016 season were held in Scotland Premier League\n?",
    "SELECT COUNT(*) AS total_matches FROM Match m WHERE m.home_team_api_id IN ( SELECT team_api_id FROM Team_Attributes WHERE league='Premier League' AND country='SCOTCH' ) OR m.away_team_api_id IN ( SELECT team_api_id FROM Team_Attributes WHERE league='Premier League' AND country='SCOTCH' );\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the preferred foot when attacking of the youngest football player?",
    "SELECT pa.preferred_foot FROM Player p INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.id IN ( SELECT id FROM Player ORDER BY date_of_birth DESC LIMIT 1 );\t----- bird -----\teuropean_football_2"
  ],
  [
    "List all the football player with the highest potential score.",
    "SELECT * FROM Player_Attributes WHERE id IN ( SELECT pa.player_api_id FROM Player_Attributes as pa WHERE pa.potential = ( SELECT MAX(pa2.potential) FROM Player_Attributes as pa2 ) );\t----- bird -----\teuropean_football_2"
  ],
  [
    "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
    "SELECT COUNT(*) FROM Player_Attributes pat JOIN Player p ON pat.player_api_id = p.player_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
    "SELECT t1.team_short_name FROM Team AS t1 JOIN Match AS m ON (m.home_team_api_id = t1.team_api_id AND m.away_player_11 NOT IN ( SELECT home_player_11 FROM match_attributes )) OR ((m.away_team_api_id = t1.team_api_id) AND m.away_player_11 NOT IN ( SELECT away_player_11 FROM match_attributes )) AND (SELECT COUNT(*) > 0 FROM team_attributes WHERE team_attributes.match_api_id=m.match_api_id AND chanceCreationPassingClass='Risky')\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the defensive work rate of the football player David Wilson\n?",
    "SELECT dribbling FROM Player_Attributes AS pa WHERE pa.player_api_id IN ( SELECT player_api_id FROM Player WHERE name = 'David Wilson') LIMIT 1;\t----- bird -----\teuropean_football_2"
  ],
  [
    "When is the birthday of the football player who has the highest overall rating?",
    "SELECT DISTINCT T2.DateOfBirth, T3.* FROM Player AS T2 JOIN Player_Attributes AS T3 ON T2.player_api_id = T3.player_api_id JOIN Match AS M ON ( T2.player_api_id IN (M.away_player_1 : M.home_player_11) )\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the name of the football league in the country of Netherlands?",
    "SELECT id, name FROM Country;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "SELECT AVG(M.home_team_goal) FROM Match AS m JOIN Team AS t ON m.home_team_api_id = t.team_api_id WHERE t.team_name='Poland' AND m.season = '2010/2011';\t----- bird -----\teuropean_football_2"
  ],
  [
    "Who has the highest average finishing rate between the highest and shortest football player?",
    "SELECT SUM(CASE WHEN ma.max_height IS NOT NULL AND mi.min_height <= 1.71 THEN avg_finsish ELSE 0 END) / COALESCE(mi.min_height_count, 0) AS highest_avg_finisher, SUM(CASE WHEN ma.max_height IS NOT NULL AND mi.min_height >= -2.03 THEN avg_finsish ELSE 0 END) / COALESCE(mi.min_height_count, 0) AS worst_avg_finisher FROM ( SELECT pa.player_api_id, AVG(finishing) as avg_finsish, MAX(pa.height) max_height, MIN(pa.height) min_height FROM Player_Attributes pa GROUP BY pa.player_api_id ) T2;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Please list player names which are higher than 180.",
    "SELECT p.player_name FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE height > 180;\t----- bird -----\teuropean_football_2"
  ],
  [
    "How many players were born after 1990?",
    "SELECT AVG(home_score + away_score) * 100 / COUNT(matchid) FROM Match\t----- bird -----\teuropean_football_2"
  ],
  [
    "How many players whose first names are Adam and weigh more than 170?",
    "SELECT M.home_team_api_id, FTH.home_short_name AS home_t, FAW.away_short_name AS away_t, P1.player_api_id AS home_player_11, -- other column selections... FROM Match M LEFT JOIN Team T ON M.home_team_api_id = T.team_api_id LEFT JOIN ( SELECT team_api_id, SUM(BWH) AS BWH, SUM(BWD) AS BWD, ... FROM odds_table GROUP BY team_api_id ) FTH -- added table alias FTH ON M.home_team_api_id = FTH-team_api_id LEFT JOIN ( SELECT team_api_id, SUM(IWH) AS IWH, ... FROM odds_table GROUP BY team_api_id ) FAW -- added table alias FAW ON M.away_team_api_id = FAW.team_api_id -- other LEFT JOINs... -- inner joins etc.\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.",
    "SELECT P.player_name FROM Player P JOIN ( SELECT player_api_id, CASE WHEN away_player_11 IS NOT NULL AND overall_rating > 80 THEN 'AWAY' WHEN home_player_11 IS NOT NULL AND overall_rating > 80 THEN 'HOME' ELSE '' END AS team FROM Match M JOIN Player_Attributes PA ON (M.`away_player_11` = PA.player_api_id OR M.`home_player_11` = PA.player_api_id) ) Q ON P.player_api_id = Q.player_api_id AND Q.team <> '' ORDER BY team, P.player_name;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is Aaron Doran's potential score?",
    "SELECT COALESCE(M.B365H, M.B365D, M.B365A) AS potential_score FROM Match M JOIN Player PA ON M.home_player_6 = PA.player_api_id JOIN Team T ON T.team_api_id = M.home_team_api_id # Corrected column name WHERE PA.first_name = 'Aaron' AND PA.last_name = 'Doran';\t----- bird -----\teuropean_football_2"
  ],
  [
    "List out of players whose preferred foot is left.",
    "SELECT player_api_id, player_fifa_api_id, preferred_foot FROM Player_Attributes WHERE preferred_foot = 'left';\t----- bird -----\teuropean_football_2"
  ],
  [
    "Please list all team names which the speed class is fast.",
    "SELECT COALESCE(H.team_long_name, A.team_long_name) AS team_log_name, COUNT(*) OVER (PARTITION BY COALESCE(H.team_long_name, A.team_long_name)) AS total_matches_by_teams FROM Match M LEFT JOIN Team H ON M.home_team_api_id = H.team_api_id LEFT JOIN Team A ON M.away_team_api_id = A.team_api_id WHERE (...) -- your conditions here;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the passing class of CLB team?",
    "SELECT SUM(1) AS passing_class_sum, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'Very Poor' THEN 1 END) AS very_poor_pass, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'Poor' THEN 1 END) AS poor_pass, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'Average' THEN 1 END) AS average_pass, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'Good' THEN 1 END) AS good_pass, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'VGood' THEN 1 END) AS very_good_pass, FROM Team_Attributes ta JOIN (SELECT * FROM Match WHERE home_team_api_id IN (SELECT team_api_id from team where team_short_name = 'CLB')) m ON ta.team_api_id = m.home_team_api_id UNION ALL SELECT SUM(1) AS passing_class_sum, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'Very Poor' THEN 1 END) AS very_poor_pass, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'Poor' THEN 1 END) AS poor_pass, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'Average' THEN 1 END) AS average_pass, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'Good' THEN 1 END) AS good_pass, COUNT(CASE WHEN ta.buildUpPlayPassingClass = 'VGood' THEN 1 END) AS very_good_pass, FROM Team_Attributes ta JOIN (SELECT * FROM Match WHERE away_team_api_id IN (SELECT team_api_id from team where team_short_name = 'CLB')) m ON ta.team_api_id = m.away_team_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which teams have build up play passing more than 70? Please list their short names.",
    "SELECT T.team_short_name AS team_short_name FROM Match M JOIN Team_Attributes TA ON M.home_team_api_id = TA.team_api_id JOIN Team T ON M.home_team_api_id = T.team_api_id WHERE TA.buildUpPlayPassing > 70 UNION ALL SELECT T.team_short_name AS team_short_name FROM Match M JOIN Team_Attributes TA ON M.away_team_api_id = TA.team_api_id JOIN Team T ON M.away_team_api_id = T.team_api_id WHERE TA.buildUpPlayPassing > 70;\t----- bird -----\teuropean_football_2"
  ],
  [
    "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "DROP TABLE IF EXISTS Match; CREATE TABLE Match ( -- Create matches table id INTEGER PRIMARY KEY, home_player_1 INTEGER NOT NULL, home_player_2 INTEGER NOT NULL, home_player_3 INTEGER NOT NULL, home_player_4 INTEGER NOT NULL, home_player_5 INTEGER NOT NULL, home_player_6 INTEGER NOT NULL, home_player_7 INTEGER NOT NULL, home_player_8 INTEGER NOT NULL, home_player_9 INTEGER NOT NULL, home_player_10 INTEGER NOT NULL, home_player_11 INTEGER NOT NULL, away_player_1 INTEGER NOT NULL, away_player_2 INTEGER NOT NULL, away_player_3 INTEGER NOT NULL, away_player_4 INTEGER NOT NULL, away_player_5 INTEGER NOT NULL, away_player_6 INTEGER NOT NULL, away_player_7 INTEGER NOT NULL, away_player_8 INTEGER NOT NULL, away_player_9 INTEGER NOT NULL, away_player_10 INTEGER NOT NULL, away_player_11 INTEGER NOT NULL, home_team_api_id INTEGER NOT NULL, away_team_api_id INTEGER NOT NULL, FOREIGN KEY (home_team_api_id) REFERENCES Team(id), FOREIGN KEY (away_team_api_id) REFERENCES Team(id), FOREIGN KEY (home_player_1) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_2) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_3) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_4) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_5) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_6) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_7) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_8) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_9) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_10) REFERENCES Player(player_api_id), FOREIGN KEY (home_player_11) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_1) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_2) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_3) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_4) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_5) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_6) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_7) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_8) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_9) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_10) REFERENCES Player(player_api_id), FOREIGN KEY (away_player_11) REFERENCES Player(player_api_id) ); -- Execute separate INSERT statement INSERT INTO Match (id, home_team_api_id, away_team_api_id, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11) VALUES (1, 123456, 987654, 11111, 22222, 33333, 44444, 55555, 66666, 77777, 88888, 99999, 101010, 111112, 131313, 141414, 151515, 161616, 171717, 181818, 191919, 202020);\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which football player has the shortest height?",
    "SELECT * FROM Player WHERE height = (SELECT MIN(height) FROM Player);\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which country is the league Italy Serie A from?",
    "SELECT T2.name AS league_name, M1.country_id AS home_team_country, M3.country_id AS away_team_country, M1.name AS home_team_name, M4.name AS away_team_name FROM Match AS M1 JOIN Team AS T1 ON P1.team_api_id = T1.team_api_id AND P1.team_fifa_api_id = T1.team_fifa_api_id JOIN League_Schedule AS LS1 ON M1.id = LS1.match_api_id AND LS1.league_country_id = 40 -- Assuming country_id is equivalent to league_country_id LEFT JOIN Team AS T2 ON P2.team_api_id = T2.team_api_id AND P2.team_fifa_api_id = T2/team_fifa_api_id JOIN League_Schedule AS LS2 ON M4.id = LS2.match_api_id AND LS2.league_country_id = 40 -- Assuming country_id is equivalent to league_country_id WHERE M1.away_team_api_id = 11635 AND (LS1.name = 'serie A' OR LS2.name = 'serie A')\t----- bird -----\teuropean_football_2"
  ],
  [
    "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.",
    "DROP TABLE IF EXISTS Match; CREATE TABLE Player_Attributes ( id INTEGER, player_api_id TEXT, dribbleAbility REAL, PRIMARY KEY (id) ); CREATE TABLE Player ( id INTEGER, player_api_id TEXT, position TEXT, name TEXT, country TEXT, club TEXT, birthdate DATE, team_id INTEGER ); CREATE TABLE Team_Attributes ( id INT, team_short_name TEXT, team_long_name TEXT, --long_form_of_team_name (e.g.: Manchester City) team_fifa_api_id TEXT, // FIF Aapi ID is Official BOOLEAN DEFAULT TRUE, -- Is FIFA official founding Year DATE, // year of foundation club_logo_path TEXT, // path to original resolution logo team_shirt_url TEXT, // URL for team shirt image division_name TEXT, team_api_id TEXT PRIMARY KEY ) CREATE TABLE Team ( team_api_id INTEGER PRIMARY KEY, team_long_name TEXT, team_short_name TEXT, passingAccuracyForw REAL, dribbleAbilityDefault INTEGER, passingAccuracyDef REAL ) INSERT INTO Player_Attributes(id,player_api_id,dribbleAbility) VALUES (1, 'api_1', 45), (2, 'api_12',50.6); CREATE TABLE Country ( id INT PRIMARY KEY, country TEXT ) DROP TABLE IF EXISTS Match; CREATE TABLE Match( id INTEGER PRIMARY KEY, home_team_api_id TEXT, away_team_api_id TEXT, date DATE, home_player_1 TEXT, -- Player in team at start game (goalkeeper) away_player_1 TEXT ) INSERT INTO Team(team_long_name,team_short_name,passingAccuracyDef,dribbleAbilityDefault) VALUES(\"Manchester City\",\"Man. City\",98,40);\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the average overall rating of the football player Aaron Doran?",
    "SELECT pa.`overall_rating` AS home_avg, apa.`overall_rating` AS away_avg, m.home_team_api_id FROM ( SELECT AVG(home_player_1) AS avg_home_player_1, m.aapiid AS aapid FROM Match m LEFT JOIN Player_Attributes p ON (p.player_api_id = m.home_player_1 AND p.player_name = 'Player Name') OR ((m.home_team_name = 'Team name') AND (p.country_code IN ( SELECT country_code FROM Team WHERE team_api_id = m.home_team_api_id) ) ) WHERE (home_player_1 IS NOT NULL OR away_player_1 IS NOT NULL) AND ((m.home_team_name = 'Team name')) AND (p.country_code IN ( SELECT country_code FROM Team WHERE team_api_id = m.home_team_api_id)) GROUP BY home_player_1, aapiid, -- Group by other player attributes for correct calculation. away_goalkeeper, away_defense, away_mids, away_forwards ) pa AS Player_Attributes_home RIGHT JOIN ( SELECT AVG(away_player_1) AS avg_Away_player_1, m.aapiid AS aapid , FROM Match m LEFT JOIN Player_Attributes apa ON (apa.player_api_id = m.away_player_1 AND apa.player_name = 'Player Name') OR ((m.home_team_name = 'Team name') AND (apa.country_code IN ( SELECT country_code FROM Team WHERE team_api_id = m.away_team_api_id) ) ) WHERE (home_player_1 IS NOT NULL OR away_player_1 IS NOT NULL) AND ((m.home_team_name = 'Team name')) AND (apa.country_code IN ( SELECT country_code FROM Team WHERE team_api_id = m.away_team_api_id)) GROUP BY away_player_1, aapiid, -- Group by other player attributes for correct calculation. home_goalkeeper, home_defense, home_mids, home_forwards ) apa AS Player_Attributes_Away ON (pa.aapid = apa.aapid AND m.`home_team_api_id` = apa.aapid ) WHERE apsid IS NOT NULL GROUP BY m.home_team_api_id; --\t----- bird -----\teuropean_football_2"
  ],
  [
    "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?",
    "SELECT COUNT(DISTINCT m.id) FROM Match m JOIN League l ON m.league_id = l.id AND l.name = 'Germany 1. Bundesliga' WHERE strftime('%Y-%m', m.date) BETWEEN '2008-08' AND '2008-10';\t----- bird -----\teuropean_football_2"
  ],
  [
    "List all the short name of the football team that had a home team goal of 10?",
    "error: No SQL found in the input string\t----- bird -----\teuropean_football_2"
  ],
  [
    "List all the football player with the highest balance score and potential score of 61.",
    "SELECT * FROM ( SELECT p.player_api_id , MAX(pa.balance) as balance , GROUP_CONCAT(p.potential SEPARATOR ', ') as potential FROM Player_Attributes pa INNER JOIN player p ON (p.player_api_id = pa.player_api_id) WHERE pa.balance > 0 AND p.potential = 61 GROUP BY p.player_api_id ) AS subquery;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "SELECT ABS( AVG(pat.ball_control) - ( SELECT AVG(ball_control) FROM Player_Attributes pa2 JOIN Match m ON (pa2.player_api_id = m.home_player_10 OR pa2.player_api_id = m.home_player_9 OR pa2.player_api_id = m.home_player_8 OR pa2.player_api_id = m.home_player_7 OR pa2.player_api_id = m.home_player_6 OR pa2.player_api_id = m.home_player_5 OR pa2.player_api_id = m.home_player_4 OR pa2.player_api_id = m.home_player_3 OR pa2.player_api_id = m.home_player_2 OR pa2.player_api_id = m.home_player_1) WHERE match_api_id IN (SELECT id FROM Match JOIN Team ON (Match.away_team_api_id = Team.team_api_id) WHERE name='Abdou Diallo')) ) AS difference_of_averages FROM Player_Attributes pat;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What's the long name for the team GEN?",
    "SELECT Team.team_long_name FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id WHERE Team.team_short_name = 'GEN';\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "error: No SQL found in the input string\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which player is the tallest?",
    "SELECT p.* FROM Player p JOIN Match m ON (m.home_team_api_id = '135' AND p.player_api_id IN (m.home_player_1, m.home_player_2, ..., m.home_player_11)) WHERE p.height = ( SELECT MAX(ath.max_height) FROM ( SELECT hpi.height as max_height FROM Match hm JOIN Player hp ON (hm.match_api_id = hm.match_api_id AND hp.player_api_id IN (hm.home_player_1, hm.home_player_2, ..., hm.home_player_11)) ) ath );\t----- bird -----\teuropean_football_2"
  ],
  [
    "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "SELECT pa.player_api_id FROM Player_Attributes pa JOIN ( SELECT player_api_id, CASE WHEN attacking_work_rate IS NULL THEN 'null' ELSE attacking_work_rate END AS worked_rate FROM Player_Attributes ) subquery ON pa.player_api_id = subquery.player_api_id WHERE pa.preferred_foot = 'left' AND (subquery.worked_rate <> 'high' OR subquery.worked_rate = 'null')\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which country is the Belgium Jupiler League from?",
    "SELECT name FROM Country WHERE id = (SELECT country_id FROM League WHERE name = 'Belgium Jupiler League');\t----- bird -----\teuropean_football_2"
  ],
  [
    "Please list the leagues from Germany.",
    "SELECT * FROM League WHERE country_id IN ( SELECT id FROM Country WHERE name = 'Germany' );\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which player has the strongest overall strength?",
    "SELECT P.* FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);\t----- bird -----\teuropean_football_2"
  ],
  [
    "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "SELECT COUNT(DISTINCT player_api_id) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE strftime('%Y', birthday) < '1986') AND defensive_work_rate = 'high';\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
    "error: No SQL found in the input string\t----- bird -----\teuropean_football_2"
  ],
  [
    "What's the heading accuracy of Ariel Borysiuk?",
    "SELECT p.player_api_id, ( SELECT COUNT(CASE WHEN pa.attribute = 'T' THEN 1 END) FROM Player_Attributes pa JOIN Match m2 ON m.match_api_id = pa.match_api_id WHERE pa.player_api_id = p.player_api_id AND m2.match_api_id IN (SELECT match_api_id FROM Match MATCH m3 WITHIN GROUP (ROLLUP (away_team_api_id, home_team_api_id))) ) AS tackle, ( SELECT COUNT(CASE WHEN pa.attribute = 'H' THEN 1 END) FROM Player_Attributes pa JOIN Match m2 ON m.match_api_id = pa.match_api_id WHERE pa.player_api_id = p.player_api_id AND m2.match_api_id IN (SELECT match_api_id FROM Match MATCH m3 WITHIN GROUP (ROLLUP (away_team_api_id, home_team_api_id))) ) / ( SELECT COUNT(DISTINCT match_api_id) FROM Match ) AS heading_rate, -- similarly add all other attributes here... FROM Player p WHERE player_name = 'Ariel Borysiuk';\t----- bird -----\teuropean_football_2"
  ],
  [
    "Among the players whose height is over 180, how many of them have a volley score of over 70?",
    "SELECT COUNT(DISTINCT M.`home_player_11`) FROM Match M WHERE M.`home_player_11` = ( SELECT home_player_2 FROM Player_Attributes WHERE volleys > 70 ) AND M.`away_player_2` = ( SELECT away_player_1 FROM Player_Attributes WHERE volleys > 70 );\t----- bird -----\teuropean_football_2"
  ],
  [
    "Please list the names of the players whose volley score and dribbling score are over 70.",
    "SELECT p.name, pa.dribbling AS DribbleScore, pa.volleys AS VolleyScore FROM `Player` p INNER JOIN `Player_Attributes` pa ON p.player_api_id = pa.player_api_id WHERE pa.volleys > 70 AND pa.dribbling > 70;\t----- bird -----\teuropean_football_2"
  ],
  [
    "How many matches in the 2008/2009 season were held in Belgium?",
    "SELECT COUNT(*) FROM Match M JOIN League L ON M.league_id = L.id WHERE STRFTIME('%Y',M.date)='2008' AND STRFTIME('%m',M.date)='07' AND L.country_name='Belgium'\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the long passing score of the oldest player?",
    "SELECT AVG(me.event_value) as avg_long_passing FROM Match m INNER JOIN Player p ON m.`home_player_2` = p.player_api_id INNER JOIN Event me ON m.match_api_id = me.match_api_id AND p.player_api_id = me.event_player_api_id WHERE me.event_name LIKE '%long passing%' GROUP BY m.home_player_2;\t----- bird -----\teuropean_football_2"
  ],
  [
    "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "SELECT COUNT(id) FROM ( SELECT id FROM Match WHERE substr(date, 1, 4) = '2009' AND substr(date, 6, 2) = '04' AND home_team_api_id IN ( SELECT team_api_id FROM Team WHERE league_id=123 ) OR away_team_api_id IN ( Select team_api_id FROM Team WHERE league_id=123 ) );\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which league had the most matches in the 2008/2009 season?",
    "SELECT match_count AS MATCH_COUNT, max_league FROM ( SELECT COUNT(*) AS match_count, league_id AS max_league FROM Match WHERE season='2008/2009' ) AS subquery GROUP BY max_league;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the average overall rating of the players born before the year 1986?",
    "SELECT AVG(pa.value) FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.date < '1986-01-01';\t----- bird -----\teuropean_football_2"
  ],
  [
    "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "SELECT (SUM(pa2.overall_rating - pa1.overall_rating) / COUNT(*)) AS avg_bettering FROM Player_Attributes pa1 JOIN Player pa ON pa.player_api_id = pa1.player_api_id WHERE pa1.position = 'Goalkeeper' CROSS JOIN (SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Ariel Borysiuk') as p2;\t----- bird -----\teuropean_football_2"
  ],
  [
    "How much is the average build up play speed of the Heart of Midlothian team?",
    "SELECT TAT.`team_api_id`, TAT.`team_fifa_api_id` FROM Team_Attributes TAT WHERE TAT.`team_abbreviation` = 'HEART OF MIDLOTHIAN'\t----- bird -----\teuropean_football_2"
  ],
  [
    "Calculate the average overall rating of Pietro Marino.",
    "SELECT AVG(T2.overall_rating) AS average_overall_rating FROM Match M LEFT JOIN Team_Attributes T2 ON (M.home_team_api_id = T2.team_api_id AND M.season = T2.season AND T2.strength = 'H') OR (M.away_team_api_id = T2.team_api_id AND M.season = T2.season AND T2.strength = 'A');\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is Aaron Lennox's total crossing score?",
    "SELECT SUM(PA.crossing_amount) as total_crossing, PA.name AS player_name FROM Player_Attributes PA GROUP BY PA.name;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is Ajax's highest chance creation passing score and what is it classified as?",
    "SELECT (c1.high + c2.low) / 2 AS high_chance, M.chance_creation_passing_class AS chance_dec, CASE WHEN M.match_api_id = T3.hometeamapiid THEN 'hometeam' ELSE 'awayteam' END AS teamtype FROM ( SELECT ((SELECT expertpassingvalue FROM Team_Attributes WHERE id=T1.id) OR (SELECT expertspeedattackingvalue FROM Team_Attributes WHERE id=T2.id)) + ((SELECT experienceexpertformtotalexpertzonedvalue FROM Team_Attributes WHERE id=T3.id) OR (SELECT experienceexperteamtotalvalue FROM Team_Attributes WHERE id=T4.id)) + ((SELECT expertpassingvalue FROM Team_Attributes T5 WHERE id = 100)) OR ((SELECT expertdefencetotalexpertvalue FROM Team_Attributes WHERE id=T3.id) OR (SELECT expertgoaltotalexpertenzzz FROM Team_Attributes T6 WHERE id = 1))+ ( SELECT expertgoalscoredTtotalexpertvalue FROM team_attributes AS e where e.player_api_id = '123456789' ) /(SELECT expertpassingvalue FROM Team_Attributes WHERE id=34) AS Maxchancecreationpassing, t.hometeamapiid AS hometeamid FROM (Select * FROM team_attributes LIMIT 1 AS t, team_attributes T2, team_attibutes T3, Team_Attribute T4 )T1 ) c1 CROSS JOIN ( SELECT (SELECT expertpassingvalue FROM team_attributes WHERE id=T5.id) OR ( SELECT expertteamtotalpassingvalue FROM team_attributes AS f where f.player_api_id = '123456789') + ( SELECT ( expertspeeddefencetotalattackingexperteamexpertzonedvalue FROM Team_Attributes T3 WHERE id=T4.id ) + (SELECT expertteamtotalpassingvalue FROM team_attributes AS e where e.player_api_id = '123456789' ) OR (SELECT expertpassescoredTtotalexpertvalue FROM team_attributes AS E5 WHERE id=E1.id) ) / (((select * from Team_Attributes LIMIT 1).expertpassingvalue)+ (Select * from team_attributes T6 WHERE player_api_id= '43210')) + (( SELECT expertteamdefensetotalexpertvalue FROM TEam_atributes TEAM_attribues AS TT2 where TT2.player_api_id ='32413' ) -- OR ( --SELECT e.expertpassingvalue From team_Attributes T7 -- WHERE id = (select * from Team_attributes T6 WHERE player_api_id = 323) )+ SELECT expertteamtotalexpertendefencetotalteampasserzonezonedzonevalue FROM TEAM_Attritibs T3 AS TTEAM_attibutes TEAM_atribute TEAM_ATTRIBUTES AS fff where ff.player_api_id= '23411' )) FROM team_attributes T7 WHERE id=T6.id) OR (SELECT expertteamexpertenattackingtotalpasserteampassenteamexpertzonedvalue FROM Team_Attributes A WHERE player_api_id = T3.player_api_id )) AS passvalue, (( SELECT expertdefensetotalexpertvalue + experttotaltotaldefencedefenseexpertgoaldefentzonedzonevalue --experttotalgoalscoringtotalexperteamteampasserexpertenzezz FROM team_attributes T3 AS fff WHERE id=T7.id )) + (SELECT expertpassattackingtotalexpertexpertheammidexpertpasserexpertteamattacktotalexmattexmteamteamtotalexperttotalteamdefensetotalexpertzonedzonedzone FROM TEAM_Attributes T2 WHERE id=T1.id) from team_attribtues T1 ) AS c2 where t.hometeamapiid != '' CROSS JOIN Match M;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which foot is preferred by Abdou Diallo?",
    "INSERT INTO Player(first_name, last_name) VALUES ('Abou', 'Diallo');\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the highest overall rating received by Dorlan Pabon?",
    "SELECT MAX(pa.overall_rating) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Dorlan Pabon';\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the average number of goals made by Parma as the away team while playing in Italy?",
    "SELECT M.id, M.home_team_api_id, T.country AS home_team_country, P1.player_name AS away_player_11, P2.player_name AS away_player_10, P3.player_name AS away_player_9, ... (similar for other players and teams) FROM Match M INNER JOIN Team At ON M.away_team_api_id = T.team_api_id LEFT JOIN Player P1 ON M.home_player_11 = P1.player_api_id LEFT JOIN Player P2 ON M.home_player_10 = P2.player_api_id ... (similar for other players)\t----- bird -----\teuropean_football_2"
  ],
  [
    "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "SELECT pa.player_api_id FROM Player_Attributes pa INNER JOIN Team_Attributes ta ON pa.`player_api_id`=ta.`team_api_id_ofshore` WHERE DATE(pa.`date`) = '2016-06-23' AND pa.overall_rating = 77 ORDER BY pa.date ASC LIMIT 1;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "SELECT COUNT(*) AS NumberPlayers, SUM(PA1.`overall_rating`) AS OverallRating FROM Match M JOIN Player_Attributes PA1 ON (M.date = '2016-02-04' AND home_player_5 = PA1.player_api_id) GROUP BY M.date;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "SELECT home_player_names AS myPlayers, original_player_name as name, away_player_1,\t----- bird -----\teuropean_football_2"
  ],
  [
    "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "-- Create temporary aggregated tables for Match and Player_Attributes CREATE TEMPORARY TABLE Match_Aggregate_Home AS ( SELECT MATCH.match_api_id, SUM(MATCH.shoton) AS total_shots_on_home, AVG(cross) AS avg_crosses_home, MAX(corner) AS max_corners_home FROM MATCH JOIN Team ON MATCH.home_team_api_id = Team.team_api_id GROUP BY Match.match_api_id, Team.team_api_id ); CREATE TEMPORARY TABLE Match_Aggregate_Away AS ( SELECT MATCH.match_api_id, SUM(MATCH.shoton) AS total_shots_away, AVG(cross) AS avg_crosses_away, MAX(corner) AS max_corners_away FROM MATCH JOIN Team ON MATCH.away_team_api_id = Team.team_api_id GROUP BY Match.match_api_id, Team.team_api_id ); -- Now you can aggregate on home/away teams easily with the following SQL queries SELECT match_api_id, total_shots_on_home AS total_shots, avg_crosses_home AS avg_crosses FROM Match_Aggregate_Home ORDER BY match_api_id; UNION ALL SELECT match_api_id, total_shots_away AS total_shots, avg_crosses_away AS avg_crosses FROM Match_Aggregate_Away ORDER BY match_api_id; CREATE TEMPORARY TABLE Result AS ( SELECT MATCH.match_api_id, SUM(Match_Aggregate_Home.total_shots_on_home) AS total_shots_home, AVG(Match_Aggregate_Home.avg_crosses_home) AS avg_crosses_home, SUM(Match_Aggregate_Away.total_shots_away) AS total_shots_away, AVG(Match_Aggregate_Away.avg_crosses_away) AS avg_crossesAway FROM (SELECT match_api_id, total_shots_on_home FROM Match_Aggregate_Home ORDER BY match_api_id) AS home, (SELECT match_api_id, total_shots_away FROM Match_Aggregate_Away ORDER BY match_api_id) AS away GROUP BY MATCH.match_api_id ); -- Final selection query: SELECT * FROM Result GROUP BY MATCH. match_api_id; SELECT match_api_id, total_shots_home AS total_shots_on_home, avg_crosses_home AS avg_crosses_home, total_shots_away AS total_shots_away, avg_crossesAway AS avg_crosses_away FROM Result GROUP BY MATCH. match_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
    "SELECT T1.attendance as home_attendance, pa.defensive_work_rate_avg_per_game as defensive_work_rate, m.match_api_id as match_id FROM Match m JOIN Player_Attributes pa ON m.match_api_id = pa.match_api_id LEFT JOIN Team_Attributes T1 ON m.home_team_api_id = T1.team_api_id LEFT JOIN Team_Attributes T2 ON m.away_team_api_id = T2.team_api_id WHERE m.match_api_id = 98765 AND pa.player_api_id = 12345;\t----- bird -----\teuropean_football_2"
  ],
  [
    "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "SUM(CASE WHEN Match.away_player_11 = Player.player_api_id THEN Case WHEN Match.player_crossing IS NOT NULL Then 1 Else 0 END ELSE 0 END) AS crossing_count\t----- bird -----\teuropean_football_2"
  ],
  [
    "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "SELECT ta.build_up_play_speed_class FROM Team_Attributes ta JOIN ( SELECT away_team_api_id, home_team_api_id, country_name FROM Match INNER JOIN League ON Match.away_team_api_id = League.country_id OR Match.home_team_api_id = League.country_id ) m ON ta.team_api_id = m.away_team_api_id OR ta.team_api_id = m.home_team_api_id WHERE STRFTIME('%Y-%m-%d', date) = '2012-02-22' AND ( away_team_api_id IN (SELECT team_api_id FROM Team WHERE id = League.country_id) OR home_team_api_id IN (SELECT team_api_id FROM Team WHERE id = League.country_id) ) AND country_name = 'Netherlands';\t----- bird -----\teuropean_football_2"
  ],
  [
    "How was the build up play dribbling class for \"LEI\" on 2015/9/10?",
    "SELECT COUNT(DISTINCT ta.build_up_play_dribbling), MAX(case when EXISTS (SELECT 1 FROM Match m2 WHERE m2.date = '2015-09-10' AND m2.home_team_short_name = 'LEI' AND m2.home_team_api_id = ta.team_api_id) THEN m2.home_goal ELSE NULL END) AS home_goal, MAX(case when EXISTS (SELECT 1 FROM Match m2 WHERE m2.date = '2015-09-10' AND m2.away_team_short_name = 'LEI' AND m2.away_team_api_id = ta.team_api_id) THEN m2.away_goal ELSE NULL END) AS away_goal FROM Team_Attributes ta INNER JOIN Match m2 ON (ta.team_api_id = m2.home_team_api_id OR ta.team_api_id = m2.away_team_api_id) WHERE True;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "SELECT -- For the team that's home in each match TAH.pass_completion AS HomePassCompletion, -- And their actual values (according to Pass Completion) taa.established_position_passing AS AwayBuildUpPlayPassing FROM Match LEFT JOIN Team_Attributes TAH ON Match.home_team_api_id = TAH.team_api_id LEFT JOIN Team_Attributes taa ON Match.away_team_api_id = taa.team_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "error: No SQL found in the input string\t----- bird -----\teuropean_football_2"
  ],
  [
    "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "SELECT m.id, AVG(COALESCE(T1.cross + T2.corner + T3.freekickpass + S1.ballpossesion + D1.opponentballloss, 0.0)) AS chance_creation_metric, -- Add other metrics here that you're interested in FROM Match m LEFT JOIN ( SELECT match_id, COUNT(*) as cross FROM Event WHERE event_name = 'Crossing' GROUP BY match_id ) T1 ON m.id = T1.match_id LEFT JOIN ( SELECT match_id, COUNT(*) as corner FROM Event WHERE event_name = 'Corner Kick' GROUP BY match_id ) T2 ON m.id = T2.match_id LEFT JOIN ( SELECT match_id, COUNT(*) as freekickpass FROM Event WHERE event_name = 'Free Kick Pass' GROUP BY match_id ) T3 ON m.id = T3.match_id LEFT JOIN ( SELECT team_api_id, SUM(event_name = 'Possession') as ballpossesion FROM Event GROUP BY team_api_id ) S1 ON m.home_team_api_id = S1.team_api_id LEFT JOIN ( SELECT team_api_id, COUNT(*) as opponentballloss FROM Event WHERE event_name = 'Foul Commit' GROUP BY team_api_id ) D1 ON m.away_team_api_id = D1.team_api_id GROUP BY m.id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "SELECT m_team_long_name Beta FROM Team_Attributes ta JOIN ( SELECT home_team_api_id team_api_id, team_long_name m_team_long_name FROM Match WHERE date = '2015-09-10 00:00:00' AND team_long_name IN ('Hannover 96') ) m ON ta.team_api_id = m.team_api_id WHERE EXISTS (SELECT 1 FROM Bet B WHERE ( B.Beta = (B365H OR ...) OR (BWH OR ...) = (BWH OR ...)) GROUP BY BETA HAVING COUNT(*) > 0);\t----- bird -----\teuropean_football_2"
  ],
  [
    "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "SELECT AVG(pa.overall_rating) FROM Player_Attributes pa WHERE pa.player_fifa_api_id = \"152\" AND pa.overall_rating IS NOT NULL;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "SELECT ( SUM(P.overall_attr_1 * 0.3 + P.overall_attr_2 * 0.15 + P.overall_attr_3 * 0.15) / NULLIF( SUM(P.overall_attr_1 * 0.3 + P.overall_attr_2 * 0.15 + P.overall_attr_3 * 0.15), 0) ) AS total_averaged_score FROM Player_Attributes P JOIN Player ON P.player_api_id = Player.player_api_id WHERE player_name = 'Landon Donovan' AND date_of_birth LIKE '%2013-07-12%';\t----- bird -----\teuropean_football_2"
  ],
  [
    "List down 5 tallest players' name.",
    "CASE WHEN attribute_name = 'Height' THEN value END AS tallest_height, CASE WHEN attribute_name = 'Weight' THEN value END AS heaviest_weight, ...\t----- bird -----\teuropean_football_2"
  ],
  [
    "What are the player api id of 10 heaviest players?",
    "SELECT P.player_api_id, CASE WHEN M_H.match_api_id = P.match_api_id AND M_H.home_player_11 = P.player_api_id THEN 'home_player_11' WHEN ... -- Add other player positions like home_player_x = P.player_api_id to the WHEN clause ELSE NULL END AS position, CASE WHEN M_A.match_api_id = P.match_api_id AND M_A.away_player_11 = P.player_api_id THEN 'away_player_11' WHEN ... -- Add other player positions like away_player_x = P.player_api_id to the WHEN clause ELSE NULL END AS position FROM Player_Attributes P WHERE (M_H.match_api_id, M_H.home_player_11) IN ((SELECT match_api_id, home_player_11 FROM match), ...) AND P.player_api_id IN (...) ORDER BY `weight` DESC LIMIT 10;\t----- bird -----\teuropean_football_2"
  ],
  [
    "List down the name of players who are 35 years old and above.",
    "SELECT DISTINCT pa.player_api_id FROM Match AS m INNER JOIN Player_Attributes AS pa ON (m.`away_team_api_id`=Team.`team_api_id`) --or use home_player LEFT JOIN Team AS t ON (pa.player_api_id = MATCH.home_player_1) --or away player WHERE JULIANDAY(CAST(m.match_date AS REAL)) - JULIANDAY(pa.birthdate) > 31622400 ORDER BY pa.first_name;\t----- bird -----\teuropean_football_2"
  ],
  [
    "How many home team goal have been scored by Aaron Lennon?",
    "def dynamic_match_count(db): query_col = 'home_player_11' # Dynamically choose column here based on a condition or user input. query_params = [query_col] return db.execute(\"SELECT COUNT(*) FROM Match WHERE ? IN (home_player_11, away_player_1, home_player_10, away_player_2)\", query_params).fetchone()\t----- bird -----\teuropean_football_2"
  ],
  [
    "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.",
    "INSERT INTO Team(api_id, name) VALUES ('10236', 'name_here'); INSERT INTO Match(match_api_id, away_team_api_id, home_team_api_id) VALUES ('15165', '98765','10236'); UPDATE Match SET away_team_goal=0 WHERE match_api_id = 15165; -- Update the Team_Attributes table to reference the MATCH table UPDATE Team_Attributes SET team_api_id = (SELECT away_team_api_id FROM Match WHERE match_api_id = 15165); -- Delete extra entries in Team Attributes Table DELETE FROM Team_Attributes WHERE team_api_id = '98765' AND match_api_id != '15165';\t----- bird -----\teuropean_football_2"
  ],
  [
    "Calculate the total home team goal scored by players whose age are 30 years old and below.",
    "-- Select players younger than 30 years old SELECT pa.player_api_id AS apiId, (CURRENT_DATE - pa.date_of_birth) / 365.25 AS age, p.player_fifa_api_id FROM Player_Attributes pa JOIN Player p ON (pa.player_api_id = p.player_api_id) WHEREstrftime('%Y', CURRENT_DATE) - strftime('%Y', pa.date_of_birth) < '30'; -- Select players in a match with specific positions SELECT home_player_1, home_player_7, away_team_api_id AS awayTeamId, team_attributes.team_api_id AS homeTeamId FROM MATCH JOIN Player_Attributes pa2 ON (pa2.player_api_id = MATCH.home_player_1) JOIN Team_Attributes ta ON (ta.team_api_id = MATCH.home_team_api_id); -- Select all match API IDs SELECT DISTINCT m.matchid AS apiId FROM MATCH m; -- Count total home goals for teams where team_fifa_api is not null SELECT SUM(CASE WHEN hgoal IS NOT NULL THEN 1 ELSE 0 END) AS totalHomeGoals FROM MATCH WHERE match_api_id IN ( SELECT match_api_id FROM Match WHERE away_team_api_id = team_attributes.team_api_id AND team_attributes.team_fifa_api_id IS NOT NULL );\t----- bird -----\teuropean_football_2"
  ],
  [
    "State 10 names of the strongest players.",
    "SELECT * FROM Player_Attributes pa WHERE EXISTS ( SELECT 1 FROM Match M WHERE (pa.player_api_id IN ({home/away}_player_6)) ) AND overall_rating = ( SELECT MAX(PA2.overall_rating) FROM Player_Attributes PA2 WHERE PA2.player_api_id IN (SELECT home_player_6 OR away_player_6 OR ... OR away_player_2) AND EXIST ( SELECT 1 FROM Match M WHERE EXISTS ( SELECT 1 FROM Player_Attributes P3 WHERE (PA2.`player_api_id` = M.home_player_6 OR PA2.`player_api_id` = M.away_player_6 OR ... OR PA2.`player_api_id`=M.away_player_2) AND (P3.`player_fifa_api_id`=M.`home_player_6`) ) ) ) LIMIT 1;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the name of players with the highest potential?",
    "SELECT p.player_api_id, p.name FROM Player_Attributes pa JOIN ( SELECT player_api_id, MAX(potential) as max_potential FROM Player_Attributes GROUP BY player_api_id ) pm ON pa.player_api_id = pm.player_api_id LEFT JOIN Player p ON pa.player_api_id = p.player_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "SELECT p.player_name FROM Player_Attributes pa JOIN ( SELECT player_api_id FROM Match WHERE ((at_home_pass_int > 80) OR (at_away_pass_int > 80)) AS t ON pa.player_api_id = t.player_api_id JOIN Player p ON pa.player_api_id = p.player_api_id GROUP BY p.player_name\t----- bird -----\teuropean_football_2"
  ],
  [
    "Among the players with finishing rate of 1, pick the eldest player and state the player's name.",
    "CAST(CURRENT_TIMESTAMP AS Date) - CAST(T1.birthday AS Date) OR strftime('%D',CURRENT_TIMESTAMP ,'localtime') - strftime('%D', T1.birthday,'localtime')\t----- bird -----\teuropean_football_2"
  ],
  [
    "State the name of players who came from Belgium.",
    "SELECT pa.player_api_id, pa.player_name, p.player_fifa_api_id, ... FROM Player_Attributes pai JOIN Player pa ON (pai.player_api_id = pa.player_api_id) WHERE pa.player_api_id IN ( SELECT ppm.player_api_id FROM Match m JOIN Player pp ON ((m.`away_player_1` = pp.player_api_id) OR (m.`home_player_1` = pp.player_api_id)) WHERE (m. `away_team_api_id` = {your_team_api_id} OR m.`home_team_api_id` = {your_team_api_id}) )\t----- bird -----\teuropean_football_2"
  ],
  [
    "Locate players with vision scores of 90 and above, state the country of these players.",
    "-- Join team attributes and players to access player attributes by API ID. SELECT p.name -- Select player name where... FROM Team_Attributes ta INNER JOIN Player p ON ta.player_api_id = p.player_api_id WHERE cast(ta.vision as REAL) > 89.0;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which country's players have the heaviest average weights?",
    "# Get the country with highest average weight from the match attributes table, # then join with the matches table to get the team api id for that country. SELECT T.team_api_id AS country FROM Match_Attributes T JOIN ( # Calculate the max average weighting and team api id for each team SELECT max(max_avg_weighting), team_api_id FROM Match_attributes GROUP BY team_api_id ) TA ON T.max_avg_weighting = TA.max_avg_weighting AND T.team_api_id = TA.team_api_id JOIN Match M ON T.team_api_id = M.away_team_api_id OR T.team_api_id = M.home_team_api_id GROUP BY T.team_api_id ORDER BY SUM(T.max_avg_weighting) DESC LIMIT 1;\t----- bird -----\teuropean_football_2"
  ],
  [
    "List down the long name for slow speed class team.",
    "SELECT T1.team_long_name FROM Team AS T1 JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow';\t----- bird -----\teuropean_football_2"
  ],
  [
    "What are the short name of team who played safe while creating chance of passing?",
    "SELECT COUNT(DISTINCT home_api_id) AS home_count, COUNT(DISTINCT away_team_api_id) AS away_count, t.short_name -- Add this column here FROM Match WHERE (away_team_api_id = 'Safe' OR home_team_api_id = 'Safe') AND away_team_api_id != home_team_api_id GROUP BY short_name;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the average heights of Italy players?",
    "SELECT AVG(p.height) FROM Player p INNER JOIN Match m ON (p.player_api_id = m.home_player_11) OR (p.player_api_id = m.away_player_11) WHERE (m.home_team_api_id = ? AND m.away_team_api_id <> ?) UNION ALL SELECT AVG(p.height) FROM Player p INNER JOIN Match m ON (p.player_api_id = m.home_player_11) OR (p.player_api_id = m.away_player_11) WHERE (m.away_team_api_id = ? AND m.home_team_api_id <> ?);\t----- bird -----\teuropean_football_2"
  ],
  [
    "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.",
    "SELECT p.player_name as Name, pa._home_player_11 as standing FROM Player AS p JOIN Player_Attributes as pa ON p.player_api_id = pa.player_api_id WHERE pa._home_player_11 > 180 GROUP BY p.player_name;\t----- bird -----\teuropean_football_2"
  ],
  [
    "How many football players born after the 1990s have the first name \"Aaron\"?",
    "SELECT COUNT(*) FROM ( SELECT * FROM ( SELECT * FROM Player WHERE birthday > '1990' ) sub WHERE player_name LIKE 'Aaron%' ) sub2;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the difference between players 6 and 23's jumping scores?",
    "SELECT (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) AS difference;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Please provide top three football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "SELECT name FROM sqlite_master WHERE type='table' AND name='Player';\t----- bird -----\teuropean_football_2"
  ],
  [
    "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "SELECT COUNT(DISTINCT pa.player_fifa_api_id) FROM Player_Attributes pa JOIN Match m ON pa.player_api_id = m.away_player_11 WHERE (pa.crossing, 'left') = ( SELECT MIN(pa2.crossing), MIN(pa2.preferred_foot) FROM Player_Attributes pa2 WHERE pa2.possession = 'attacking' AND pa2.player_api_id = pa.player_api_id )\t----- bird -----\teuropean_football_2"
  ],
  [
    "What percentage of players have a strength and stamina score of more than 80?",
    "SELECT P.player_api_id, coalesce(SUM(CASE WHEN M.match_id_home IS NULL THEN 1 ELSE 0 END), 0) AS away_count_11, # and so on... FROM Player P LEFT JOIN Match M ON (P.player_api_id = M.home_player_11) GROUP BY player_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "In what country did the Poland Ekstraklasa take place?",
    "error: No SQL found in the input string\t----- bird -----\teuropean_football_2"
  ],
  [
    "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "SELECT m.home_team_goal, m.away_team_goal FROM Match m JOIN Team_Attributes ta ON m.home_team_api_id = ta.team_api_id and m.match_id=ta.match_id JOIN B365Predictions b3 ON ta.team_api_id=b3.home_team_api_id WHERE m.date='2008-01-28';\t----- bird -----\teuropean_football_2"
  ],
  [
    "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
    "SELECT PA1.sprint_speed, PA1.agility, PA1.acceleration FROM Match AS M JOIN Team_Attributes AS TA ON M.home_team_api_id = TA.team_api_id JOIN Player_Attributes AS PA1 ON M.home_player_11 = PA1.player_api_id JOIN Team_Attributes AS TAA ON M.away_team_api_id = TAA.team_api_id JOIN Player_Attributes AS PA2 ON M.away_player_11 = PA2.player_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "SELECT ta.buildUpPlaySpeedClass AS speed_class FROM Team AS t JOIN Team_Attributes AS ta ON t.team_api_id = ta.team_api_id WHERE t.team_long_name = 'KSV Cercle Brugge';\t----- bird -----\teuropean_football_2"
  ],
  [
    "In the 2015–2016 season, how many games were played in the Italian Serie A league?",
    "SELECT COUNT(DISTINCT MATCH.id) FROM Match WHERE MATCH.home_team_api_id IN ( SELECT team_api_id FROM Team_Attributes WHERE season = '2015/2016' ) AND MATCH.away_team_api_id NOT IN ( SELECT team_api_id FROM Team_Attributes WHERE season = '2015/2016' ) OR MATCH.away_team_api_id IN ( SELECT team_api_id FROM Team_Attributes WHERE season = '2015/2016' ) AND MATCH.home_team_api_id NOT IN ( SELECT team_api_id FROM Team_Attributes WHERE season = '2015/2016' )\t----- bird -----\teuropean_football_2"
  ],
  [
    "What was the highest score of the home team in the Netherlands Eredivisie league?",
    "SELECT MAX(COALESCE(M.home_team_goal, 0)) FROM Match M WHERE (M.home_team_api_id = '39298' OR M.away_team_api_id = '39298') AND COALESCE(M.home_team_goal - M.away_team_goal, 0) > 0;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "SELECT pa.`Current Ability Curve % Points Difference from Optimal Shape` AS curve_score FROM Player_Attributes pa WHERE pa.team_id IS NOT NULL OR (pa[`Current Ability Curve % Points Difference from Optimal Shape`] like ('Goal') AND pa['Current Ability Curve % Points Difference from Optimal Shape'] IN (\"Foul Commit\")), (\"Shots on Goal\") ...\t----- bird -----\teuropean_football_2"
  ],
  [
    "Which league had the most games in the 2015–2016 season?",
    "SELECT team_long_name AS league_name, COUNT(id)::integer num_games FROM ( SELECT team_long_name, MATCH.matchday + 16 AS matchday FROM Match JOIN Team_Attributes ON (Team_Attributes.team_api_id = Match.away_team_api_id AND MATCH.hometeamgoals = MATCH.awayteamgoals) OR ((Team_Attributes.team_api_id = Match.home_team_api_id AND MATCH.hometeamgoals != MATCH.awayteamgoals)) WHERE matchday > 16 AND season = '2015/2016' GROUP BY team_long_name ) AS combined GROUP BY league_name ORDER BY num_games DESC LIMIT 1;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Please provide the full name of the away team that scored the most goals.",
    "WITH ranked_goals AS ( SELECT away_team_goal, MAX(away_team_goal) OVER w AS max_goals, ROW_NUMBER() OVER w AS ranking FROM Match WINDOW w AS (PARTITION BY away_team_goal ORDER BY away_team_goal DESC) ) SELECT T2.team_long_name FROM Match M INNER JOIN ranked_goals T6 ON M.away_team_goal = T6.max_goals AND M.match_id = T6.match_id INNER JOIN Team T2 ON M.home_team_api_id = T2.team_api_id;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Please name one player whose overall strength is the greatest.",
    "SELECT P.player_api_id, MAX(PA.overall_rating) AS max_rating, M.match_api_id, M.home_team_api_id FROM Player P JOIN Match M ON P.player_fifa_api_id = ANY( SELECT home_player_* FROM json_each(M.data) ) LEFT JOIN ( SELECT player_api_id, match_api_id FROM Player_Attributes WHERE type = 'overall' AND value LIKE 'overall_rating%' ) PA ON ( SELECT player_api_id FROM json_each(M.data) ) OVERLAPS (SELECT player_api_id FROM PA) WHERE M.match_api_id NOT IN ( SELECT away_team_api_id FROM Match WHERE home_team_api_id IN ( SELECT team_api_id FROM Team_Attributes ) ) GROUP BY P.player_api_id, M.match_api_id, M.home_team_api_id ORDER BY max_rating DESC;\t----- bird -----\teuropean_football_2"
  ],
  [
    "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "SELECT ROUND((COUNT(CASE WHEN overall_rating > 70 THEN player_api_id END) * 100.) / COUNT(player_api_id), 2) AS percentageAboveAverageRating, ROUND((COUNT(CASE WHEN height < 180 THEN player_api_id END) * 100.) / COUNT(player_api_id), 2) AS percentageUnderHeight FROM Player_Attributes;\t----- bird -----\teuropean_football_2"
  ],
  [
    "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "SELECT COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END) AS difference, (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) + COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END)) AS total_male_count, ((COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN ID END) - COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN ID END)) * 100 / (SELECT MAX(count) FROM (SELECT SUM(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 ELSE 0 END) AS count FROM Patient) t UNION ALL SELECT MAX(count) FROM (SELECT SUM(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 ELSE 0 END) AS count FROM Patient) t)) AS percentage_deviation FROM Patient;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the percentage of female patient were born after 1930?",
    "SELECT (COUNT(CASE WHEN SUBSTRING(Birthday, 1, 4) > '1930' THEN ID ELSE NULL END) / COUNT(CASE WHEN Sex = 'F' THEN ID ELSE NULL END)) * 100 AS PercentageFemaleBornAfter1930 FROM Patient\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For patient born between Year 1930 to 1940, how many percent of them were inpatient?",
    "SELECT ROUND( CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), 2 ) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "SELECT CASE WHEN SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) != 0 AND SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) != 0 THEN CAST(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS REAL) / (SELECT COUNT(ID) FROM Patient WHERE Diagnosis = 'SLE' GROUP BY Admission) ELSE NULL END AS Ratio FROM Patient WHERE Diagnosis = 'SLE'\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "SELECT P.Diagnosis, L.Date FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = '30609';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.",
    "-- Correct SQL statement PRAGMA foreign_keys = ON; SELECT P.SEX, P.Birthday, E.ExaminationDate AS ExaminationDate, (SELECT Symptoms FROM Examination WHERE ID = '163109') AS Symptom, (SELECT Diagnosis FROM Patient WHERE ID = '163109') AS Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.ID = '163109';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH > 500;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "State the ID and age of patient with positive degree of coagulation.",
    "SELECT p.ID, FLOOR((strftime('%Y', 'now') - strftime('%Y', p.birthday)) / 1) AS AGE FROM Examination as e INNER JOIN Patient as p ON e.id = p.id WHERE e.RVVT = '+';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For patients with severe degree of thrombosis, list their ID, sex and dieseas the patient is diagnosed with.",
    "SELECT p.ID, p.SEX, e.Diagnosis AS Disease FROM Patient p INNER JOIN Examination e ON e.PatientID = p.ID AND e.Thrombosis IS NOT NULL AND e.Thrombosis = 2;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
    "SELECT Patient.ID, Patient.SEX, Examination.Date AS Birthday, Laboratory.T-CHO FROM Patient LEFT JOIN Examination ON Patient.ID = Examination.ID WHERE SUBSTR(Examination.date, 1, INSTR(Examination.date, '-') - 1) = '1937' AND Laboratory.T-CHO >= 250;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the percentage of female patient had total protein not within the normal range?",
    "-- What is the percentage of female patient had total protein not within the normal range? -- Fix the query based on SQLite error message 'near \"SELECT\": syntax error' SELECT CAST(T.CountOTotalTPOutOfRange AS REAL) / F.CountOfFemale * 100 PERCENT FROM (SELECT COUNT(*) AS CountOTotalTPOutOfRange FROM Laboratory WHERE TP < '6.0' OR TP > '8.5') T, (SELECT COUNT(*) AS CountOfFemale FROM Patient WHERE CAST(ID AS VARCHAR) LIKE '%F%') F;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?",
    "SELECT AVG(T1.aCL_IgG) AS avg_acl_igg FROM Examination T1 JOIN Patient T2 ON T1.ID = T2.ID WHERE T2.Admission = '+' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(T2.Birthday)) >= 50;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "SELECT COUNT(*) FROM Patient AS p JOIN Examination AS e ON p.ID = e.ID WHERE p.SEX = 'F' AND e.Description = '1997' AND e.Admission = '-';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What was the age of the youngest patient when they initially arrived at the hospital?",
    "SELECT MIN(T2.age) as Age FROM Patient T1 INNER JOIN ( SELECT CAST((strftime('%Y', Birthday) - strftime('%Y', FirstDate)) AS INTEGER) as age FROM Patient WHERE Birthday IS NOT NULL AND FirstDate IS NOT NULL ) T2 ON T1.ID = T2.ID;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "SELECT COUNT(*) FROM ( SELECT * FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.Thrombosis = '1' ) AS serious_thrombosis_men_and_women WHERE sex = 'F';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?",
    "-- Step 1: Retrieve the Patient IDs where Triglyceride is <=200 SELECT DISTINCT p.ID, T-CHO FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE T-CHO >= 200 AND tg IS NOT NULL -- Step 2: Get the Minimum and Maximum Year of Birth for patients with normal TG levels SELECT MIN(Birthday) AS min_birth, MAX(Birthday) AS max_birth FROM ( SELECT p.ID, p.Birthday FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE T-CHO >= 200 AND tg IS NOT NULL ) t -- Step 3: Calculate age gap SELECT (SELECT MAX(YEAR(max_birth)) - MIN(YEAR(min_birth)) FROM ( SELECT ID, BIRTHDAY FROM Examination AS T1 WHERE ID IN ( -- Step 1 result IDs SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE T-CHO >= 200 AND tg IS NOT NULL ) ) t) AS age_gap\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "-- Select symptoms observed by the youngest patient to ever did a medical examination along with their diagnosis. SELECT DISTINCT l.Symptoms, e.Diagnosis FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE p.Birthday = (SELECT MIN(BIRTHDAY) FROM Patient) ORDER BY e.Diagnosis ASC;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "EXTRACT(YEAR(E.Date) - YEAR(P.Birthday)) AS Age_At_Hospital_Admission -> (YEAR(CURDATE())-YEAR(BIRTHDATE))\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?",
    "SELECT COUNT(*) FROM Patient p WHERE EXISTS ( SELECT 1 FROM Examination e WHERE e.ID = p.ID AND e.`Examination Date` IS NOT NULL -- filter out rows with NULL `Examination Date` AND YEAR(e.`Examination Date`) - YEAR(p.First Date) >= 1 -- correct date subtraction logic ) TYPE: SQL\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "SELECT count(*) as no_of_underage_examinations FROM ( SELECT DISTINCT P.id FROM Patient P JOIN Examination E ON P.Id = E.id WHERE strftime('%Y',P.Birthday) < '1990' AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31' ) AS sub_query;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many male patients have elevated total bilirubin count?",
    "SELECT COUNT(*) FROM Examination -- corrected table name JOIN Patient ON Examination.id = Patient.id WHERE T-BIL > \"2.0\" AND SEX = 'M' AND Examination.ID IS NOT NULL; -- added filtering for examinations with missing values in (ID) column\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the average age of patients examined in the laboratory for the October of the year 1991?",
    "SELECT AVG(SUBSTR(`Date`, 1, 4)) FROM `Laboratory` WHERE SUBSTR(`Date`, -7) BETWEEN '1991-10-01' AND '1991-10-31' AND `ID` IN ( SELECT `ID` FROM `Patient` WHERE `Birthday` IS NOT NULL );\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "SELECT e.DIAGNOSIS AS doctor_diagnosis, e.Examination_Date, l.HGB AS highest_hemoglobin_count, pAge = (EXTRACT(YEAR FROM e.Examination_DATE) - YEAR(p.Birthday)) AS patient_age, MAX(l.HGB) OVER (PARTITION BY e.ID ORDER BY e.Date DESC) AS max_hemoglobin FROM Laboratory l JOIN Examination e ON l.ID = e.ID JOIN Patient p ON e.ID = p.ID;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?",
    "SELECT E.ANA AS a, E.id as p_id FROM `Examination` E INNER JOIN `Patient` P ON E.ID =P.ID WHERE P.ID =3605340 AND `E`.`Examination Date`= '1996-12-02' AND E.`ANA` NOT NULL;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?",
    "SELECT T-CHO FROM Laboratory WHERE Date = '1995-09-04' AND ID = 2927464;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What was the gender of the first AORTITIS diagnosed patient?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "SELECT e.aCL_IgM FROM Examination AS e INNER JOIN Patient AS p ON e.ID = p.ID WHERE p.Diagnosis LIKE '%SLE%' AND e.Description = '1994-02-19' AND E.Description = '1993/11/12' -- changed e.Date to e.Description ORDER BY e.Description ASC; -- Changed e.Date to e.Description\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?",
    "SELECT DISTINCT p.ID, l.GPT, p.SEX FROM Patient AS p JOIN Laboratory AS l ON p.ID = l.ID WHERE l.Date = '1992-06-12' AND l.GPT = '9';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?",
    "SELECT EXTRACT(YEAR FROM p.Birthday) - 1991 AS Age, e.ID AS PatientID, e.ExaminationDate, e.UA FROM Examination AS e JOIN Patient AS p ON e.ID = p.ID WHERE e.Date = '1991-10-21' AND e.UA = '8.4' GROUP BY ID ORDER BY ExaminationDate;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?",
    "-- correct SQL SELECT COUNT(lab.ID) FROM Patient AS p JOIN Examination AS e ON p.ID = e.ID JOIN Laboratory AS lab ON p.ID = lab.ID WHERE p.FirstDate = '1991-06-13' AND p.Diagnosis = 'SJS' AND EXTRACT(YEAR FROM lab.Date) = 1995;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?",
    "SELECT DISTINCT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.`Examination Date` LIKE '1997-01-27%' AND E.DIAGNOSIS = 'SLE'\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?",
    "SELECT T2.Symptoms FROM Patient AS T1 JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.Date = '1993-09-27';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "SELECT ( SELECT ID FROM Patient WHERE Birthday = '1959-02-18' ) AS patient_id, ( SELECT SUM(T-CHO) FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Examination.Birthday = '1959-02-18' AND Date LIKE '1981-11-%' ) - ( SELECT SUM(T-CHO) FROM Laboratory JOIN Examination ON Laboratory.ID = Examination.ID WHERE Examination.Birthday = '1959-02-18' AND Date LIKE '1981-12-%' ) AS decrease_rate\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "SELECT DISTINCT P.`ID` FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE P.`Diagnosis` LIKE \"%BEHCET%\" AND L.Date BETWEEN '1997-01-01' AND '1998-12-31'\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "SELECT DISTINCT L.ID AS Examination_ID FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE (DATE(L.Date) BETWEEN '1987-07-06' AND '1996-01-31') AND (L.GPT > 30) AND (L.ALB < 4);\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many female patients born in 1964 were admitted to the hospital? List them by ID.",
    "SELECT Patient.ID FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE EXTRACT(YEAR FROM Birthday) = 1964 AND SEX = 'F' AND Admission = '+';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "ABS(lb.`aCL IgM` / (SELECT AVG(`aCL IgM`) FROM Laboratory))\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?",
    "SELECT CAST(cnt / COUNT_ as Float)*100 FROM ( SELECT COUNT(*) AS cnt FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30 AND UA <= 6.5 ) T1, ( SELECT COUNT(*) AS COUNT_ FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30 )T2\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?",
    "SELECT ( SUM(CASE WHEN E.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END)/COUNT(*) *100 ) AS PERCENTAGE FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE YEAR(P.First_Date) = 1981 AND P.SEX = 'M';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "SELECT p.*, e.Date AS ExaminationDate, lab.T_BIL AS T_BILILINRINVALUE FROM Patient AS p JOIN Examination AS e ON p.ID = e.ID JOIN Laboratory AS lab ON p.ID = lab.ID WHERE e.Date LIKE '1991-10%' # Date in October 1991 refers to e.Date, not lab.Date AND lab.T_BIL < 2.0; # T-BIL <= 2.0 is used for the normal range in medical records.\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?",
    "SELECT COUNT(*) AS count_women_born_between_ FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.ANA_PATTERN != 'p' AND p.SEX = 'F' AND CAST(BIRTHDAY as DATE) BETWEEN '1980-01-01' AND '1989-12-31';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?",
    "-- Combine tables based on foreign keys WITH PatientInfo AS ( SELECT P.ID FROM Patient P INNER JOIN Examination E ON P.ID = E.ID INNER JOIN Laboratory L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP = '2+' ) -- Select sex of patients matching conditions SELECT SEX FROM Patient WHERE ID IN (SELECT * FROM PatientInfo);\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "SELECT AVG(T1.ALB) AS AVG_ALBUMIN FROM Laboratory T1 JOIN Patient T2 ON T1.`ID` = T2.`ID` WHERE T2.SEX = 'F' AND T2.Diagnosis LIKE '%SLE%' AND T1.PLT > 400;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the most common sign of patients with SLE disease?",
    "SELECT DISTINCT T.Symptoms FROM (Patient JOIN Examination ON Patient.ID = Examination.ID) AS T WHERE Diagnosis LIKE '%SLE%' GROUP BY T.Symptoms ORDER BY MAX(T.Thrombosis) DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "When was the medical information on patient number 48473 first documented, and what disease did she have?",
    "SELECT DISTINCT P.description, MAX(E.Examination_Date) AS first_documentation FROM Patient P INNER JOIN Examination E ON E.id = P.id WHERE P.id = 48473;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many female patients were given an APS diagnosis?",
    "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis LIKE '%SLE%'\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients who underwent testing in 1997 had protein levels outside the normal range?",
    "SELECT COUNT(T2.ID) FROM Patient AS T2 JOIN Laboratory AS T1 ON T1.ID = T2.ID AND DATE(T1.Date) LIKE '1997%' WHERE T2.Birthday IS NOT NULL AND T1.TP > 6 AND T1.TP < 8.5;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?",
    "SELECT COUNT(*) / ( SELECT SUM(CASE WHEN Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) FROM Patient p WHERE EXISTS (SELECT 1 FROM Examination e WHERE e.ID = p.ID AND Symptoms LIKE '%thrombocytopenia%') ) * 100 AS RESULT FROM Patient WHERE EXISTS (SELECT 1 FROM Examination e WHERE e.ID = ID AND Symptoms LIKE '%thrombocytopenia%')\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "SELECT CAST(SUM(CASE WHEN t1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) / COUNT(t1.ID) * 100 INTO my_table FROM Patient t1 JOIN Examination t2 ON t1.ID = t2.ID WHERE YEAR(t1.BIRTHDAY) ='1980' AND t1.Diagnosis= 'RA';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with BEHCET disease did not stay in the hospital for treatment?",
    "SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE (e.Examination_Date BETWEEN '1995-01-01' AND '1997-12-31') AND (p.SEX = 'M') AND ((SELECT 1 FROM (SELECT DISTINCT 1 AS dummy FROM Patient WHERE ID=e.patient_id) AS foo Where diagnosis LIKE '%BEHCET%') IS NOT NULL OR p.Diagnosis LIKE '%BEHCET%') AND (p.Admission = '-')\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients who were female got white blood cells that were below 3.5?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?",
    "SELECT DATEDIFF('1970-01-01', p.`First Date`, e.`Examination Date`) AS duration_days FROM Patient p INNER JOIN Examination e ON p.ID = e.ID WHERE p.ID = 821298;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Was the patient with the number 57266's uric acid within a normal range?",
    "SELECT P.ID, P.SEX, L.UA AS Latest_UA, CASE WHEN L.SEX = 'M' AND L.UA > 8.0 THEN TRUE WHEN L.SEX = 'F' AND L.UA > 6.5 THEN TRUE ELSE FALSE END AS UA_Is_Normal FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.ID = 57266;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.",
    "SELECT L.Date FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE L.GOT >= 60 AND P.ID = '48473'\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.",
    "SELECT p.SEX, p.Birthday FROM Patient p INNER JOIN Laboratory l ON p.ID = l.ID WHERE strftime('%Y', l.Date) = '1994' AND l.GOT < 60;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "SELECT DISTINCT p.ID FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.GPT >= 60;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "SELECT DISTINCT P.ID, P.SEX, LP.Date, LP.GPT, D.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS LP ON P.ID = LP.ID INNER JOIN Examination AS D ON P.ID = D.ID -- Corrected table name WHERE LP.GPT > 60 AND P.Birthday IS NOT NULL -- Replaced IN with IS NOT NULL for efficient query ORDER BY P.Birthday DESC; -- Added ASC keyword, removed subquery and MAX function\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.",
    "SELECT L.ID, AVG(L.LDH) FROM Laboratory L, (SELECT ID FROM Laboratory GROUP BY ID HAVING COUNT(Date) > 11) AS Counts WHERE L.ID = Counts.ID AND L.LDH <= 500 GROUP BY L.ID;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.",
    "/* Corrected correct New SQL code now! */ CREATE PROCEDURE createTempTable() BEGIN CREATE TEMPORARY TABLE test ( id INTEGER PRIMARY KEY, age INTEGER, name TEXT NOT NULL ); INSERT INTO test SELECT p.id, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM Birthday), Name AS p_name FROM Patient p WHERE age IS NOT NULL AND age BETWEEN (SELECT MIN(age) FROM temp_table) AND (SELECT MAX(age) FROM temp_table); END; DELIMITER ;; CALL createTempTable(); SELECT * FROM ( SELECT id, age FROM test UNION ALL SELECT id, EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM Birthday) FROM Patient WHERE SUBSTR(l.`Type of Exam`,1,2)= 'OR' AND P.age % 7 =0 ) subquery; DROP PROCEDURE createTempTable; DROP TABLE IF EXISTS test;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?",
    "SELECT Admission FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE ALP < 300)\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?",
    "SELECT P.ID, E.Exmination Date AS Examination_Date, L.ALP AS ALP_Level FROM Patient P INNER JOIN Examination E ON P.ID = E.ID INNER JOIN Laboratory L ON P.ID = L.ID WHERE EXTRACT (YEAR FROM E.Date) = 1982 AND -- assume that we have the id from Patient table now. EXTRACT(MONTH FROM E.Date ) = 4 AND -- getting month from date and then filtering with 'April'. L.ALP < 300;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.",
    "SELECT P.`ID`, P.SEX, P.Birthday FROM `Patient` AS P JOIN `Examination` AS E ON P.`ID` = E.`ID` JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.TP < 6.0 AND L.TP IS NOT NULL;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.",
    "SELECT (lab.TP - 8.5) AS Deviation_T_from_Normal FROM Laboratory as lab, Patient as pat WHERE pat.SEX = 'F' AND lab.TP > 8.5;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Sort in descending order all patients by birthday for male patient with albumin not within range.",
    "SELECT P.`Birthday` AS `Birthday`, E.ID FROM Patient P JOIN Examination E ON P.`ID` = E.`ID` WHERE ALB BETWEEN 3.5 AND 5.5 OR ALB IS NULL AND (P.SEX = 'M') ORDER BY Birthday DESC;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For all patient born in 1982, state if their albumin is within normal range.",
    "-- Corrected Old SQL DROP TABLE IF EXISTS Patient; CREATE TABLE Patient( ID INTEGER PRIMARY KEY, SEX varchar(10), Birthday DATE, Description TEXT, FirstDate DATE, Admission varchar(10), Diagnosis TEXT ); INSERT INTO Patient (ID,SEX,Birthday,Description,FirstDate,Admission,Diagnosis) VALUES ('6','F','1995-09-04','','PSS','-',NULL),('7','M','1986-01-23','2013-07-08','2018-02-14',''); INSERT INTO Patient (ID,Birthday,Description,FirstDate,Admission,Diagnosis) VALUES (2,'1981-04-01','','1999-02-18''1998-05-25',NULL,SJS),('98 ',',','1973-07-10',NULL,(+'),('5','1956-08-30','2017-09-25'); INSERT INTO Patient (ID,Birthday,Admission,Diagnosis) VALUES (NULL,'1989-03-16','',''), (NULL,'-',NULL,null), (8,''','1994-12-23''), (NULL,NULL=NULL/null); DROP TABLE IF EXISTS Examination; CREATE TABLE Examination( ID INTEGER PRIMARY KEY, ExamID varchar(10), ExaminationDate DATE, aCL IgG float, aCL IgM float, ANA TEXT, ANAText2 TEXT, Numer double, dnatext FLOAT -- corrected here ); INSERT INTO Examination (ExamID,ExaminationDate,aCLIgl,aCLlgm,DnaTextnum,vl) VALUES (NULL,'1997-07-23',NULL,'1994-11-17','+'), (NULL,NULL NULL,null); DROP TABLE IF EXISTS Laboratory; CREATE TABLE Laboratory( ID INTEGER PRIMARY KEY, LabID FLOAT NOT NULL, FG float NOT NULL, U-PRO TEXT NOT NULL, IGG FLOAT NOT NULL ); INSERT INTO Laboratory (LabID,ID,FG,U.PRO,IGG) VALUES --values(NULL,\"5\",NULL,\".\",NULL),(4, NULL,'1995,07,27',NULL,'');\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the percentage of the female patient whose uric acid (UA) beyond the normal range?",
    "SELECT ROUND((SUM(CASE WHEN Laboratory.UA > 5.8 THEN 1 ELSE 0 END) * 100.00 / COUNT(Patient.ID)),2) as PercentUAaboveNormal FROM Patient, Laboratory WHERE Patient.ID = Laboratory.ID AND Sex = 'F';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?",
    "SELECT P.ID, ((P.SEX = 'M') * (CASE WHEN L.UA < 8.0 THEN 1 ELSE 0 END) + (P.SEX = 'F') * (CASE WHEN L.UA < 6.5 THEN 1 ELSE 0 END)) / COUNT(L.ID) AS AVG_UA FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5) GROUP BY P.ID, (CASE WHEN L.UA < 6.5 THEN 1 ELSE 0 END), (CASE WHEN L.UA < 8.0 THEN 1 ELSE 0 END);\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Laboratory, Patient WHERE Laboratory.ID = Patient.ID AND Laboratory.UN = 29;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.",
    "SELECT P.ID, P.SEX, P.Birthday FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many male patients are are with creatinine index out of the normal range?",
    "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND CAST(L.CRE AS DECIMAL(4, 2)) >= 1.5;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Are there more male patients with creatinine not within the normal range than female? True or False?",
    "-- new revised sql SELECT CASE WHEN (SELECT COUNT(*) FROM Laboratory L JOIN Examination E ON L.ID = E.id JOIN Patient P ON E.id = P.id WHERE P.SEX = 'M' AND L.CRE >= 1.5) > (SELECT COUNT(*) FROM Laboratory L JOIN Examination E ON L.ID = E.id JOIN Patient P ON E.id = P.id WHERE P.SEX = 'F' AND L.CRE >= 1.5) THEN 'TRUE' ELSE 'FALSE' END AS final_answer;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.",
    "SELECT P.ID, P.SEX, P.Birthday, LMAX.T_BIL AS Max_T_BIL FROM Laboratory AS LMAX JOIN Patient AS P ON LMAX.ID = P.ID GROUP BY LMAX.T_BIL ORDER BY LMAX.T_BIL DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "SELECT DISTINCT P.SEX, AVG(L.T_BIL) AS \"avg_T_BIL\" FROM Patient P JOIN Laboratory L ON P.ID = L.ID -- corrected foreign key join WHERE L.T_BIL >= 2.0 GROUP BY P.SEX;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the average age of the male patient with high cholesterol?",
    "SELECT t1.ID, ROUND(AVG(SUBSTR(t2.Date, 7, 4) - SUBSTR(t1.Birthday, 7, 4)), 2) AS average_age, t2.`T-CHO` FROM Patient t1 JOIN Examination t2 ON t1.ID = t2.ID WHERE UPPER(t1.SEX) = 'M' AND `T-CHO` IS NOT NULL AND `T-CHO` >= 250\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?",
    "SELECT DISTINCT P.DIAGNOSIS, E.Diagnosis AS Examination_Diagnosis, L.TG AS Triglyceride, P.ID AS Patient_ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID JOIN Examination E ON P.ID = E.ID WHERE L.TG > 300;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "SELECT COUNT(DISTINCT P.ID) FROM Patient as P INNER JOIN Examination as E ON P.ID = E.ID AND E.TG IS NOT NULL WHERE E.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 50;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.",
    "SELECT DISTINCT P.ID FROM Patient P INNER JOIN Examination E ON P.ID = E.ID INNER JOIN Laboratory L ON P.ID = L.ID WHERE E.Admittance = '-' AND L.CPK < 250 AND (L.`U-PRO` = '-' OR L.`U-PRO` IS NULL);\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "SELECT COUNT(DISTINCT p.ID) FROM Laboratory JOIN Patient p ON Laboratory.ID = p.ID WHERE p.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND p.SEX = 'M' AND Laboratory.CPK >= 250;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "SELECT P.ID, P.SEX, (ABS(datetime(), 'unixepoch') - strftime('%Y', P.Birthday)) / 31536000 AS AGE FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE L.T_CHO < 250 AND L.GLU >= 180;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.",
    "SELECT P.SEX, EXTRACT(YEAR FROM E.Birthday) AS \"Age\" FROM Patient P JOIN Examination E ON P.ID = E.ID AND (E.WBC <= 3.5 OR E.WBC >= 9.0) GROUP BY P.SEX, EXTRACT(YEAR FROM E.Birthday) ORDER BY P.SEX, Age ASC;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "SELECT D.Diagnosis, A.Age, L.RBC FROM Patient P JOIN Laboratory L ON P.ID = L.ID -- Join Laboratory table to get RBC value JOIN ( SELECT T.year(current_timestamp) - T.year(Birthday) AS Age, ID -- Corrected column selection and syntax for the subquery. FROM Patient -- Corrected subquery select statement WHERE L.RBC < 3.5 -- Filter patients with red blood cell count less than 3.5 GROUP BY ID -- Add Group By ID to select distinct patients ) A ON P.ID = A.ID -- Join Patient table with subquery using ID column JOIN Diagnosis D ON P.Diagnosis = D.Diagnosis AND P.ID = D.Patient_ID;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.",
    "SELECT DISTINCT P.ID, CASE WHEN L.RBC <= 3.5 OR L.RBC >= 6.0 THEN '+' ELSE '-' END AS AdmittedState FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', P.Birthday) > 50 AND P.SEX = 'F';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.",
    "SELECT p.ID, p.SEX FROM Patient p INNER JOIN Laboratory l ON p.ID = l.ID -- Corrected assumption to inner join both tables for accurate comparison. WHERE p.Admission = '-' AND l.HGB < 10;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "SELECT Patient.ID, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Diagnosis = 'SLE' AND Birthday IN ( SELECT MIN(Birthday) FROM Exhibition WHERE Diagnosis = 'SLE' ) AND Examination.HGB BETWEEN 10 AND 17;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "SELECT P.ID, ((YEAR(CURRENT_TIMESTAMP)) - YEAR(P.Birthday)) AS AGE, L.HCT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID -- Corrected table join WHERE E.Diagnosis = 'SLE' AND L.HCT >= 52 -- Added condition to filter HCT values GROUP BY P.ID, L.HCT ORDER BY L.Date DESC;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.",
    "SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "SELECT COUNT(DISTINCT ID) - (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT > 400) FROM Laboratory WHERE PLT < 100\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "-- Select all Patients below 50 years old with normal platelet level in laboratory examinations taken in 1984. SELECT DISTINCT P.ID, EXTRACT(YEAR FROM P.Birthday) AS Age, E.Date AS ExaminationDATE, -- <--- corrected table reference name for \"ExaminationDate\" L.plt AS PLT FROM Patient P JOIN Examination E ON P.ID = E.ID JOIN Laboratory L ON P.ID = L.ID WHERE -- Filter laboratory examinations taken in 1984. SUBSTR(L.Date, -4) LIKE '1984%' AND -- Filter patients below 50 years old. EXTRACT(YEAR FROM P.Birthday) < (EXTRACT(YEAR FROM CURRENT_DATE) - 50) AND -- Filter patients with a normal platelet level (PLT between 100 and 400). L.plt BETWEEN 100 AND 400 ;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "SELECT CAST(SUM(CASE WHEN l.Sex = 'F' AND a.is_older_than_55 THEN 1 ELSE 0 END) AS REAL), 100 * SUM(CASE WHEN l.Sex = 'F' AND a.is_older_than_55 THEN 1 ELSE 0 END) / COUNT(*) AS percent_female_abnormal_pt FROM ( SELECT p.ID, (EXTRACT(YEAR FROM CURRENT_TIMESTAMP) - EXTRACT(YEAR FROM Birthday)) > 55 AS is_older_than_55 FROM Patient p ) AS older_than_55 JOIN Examination l ON a.ID = l.ID WHERE l.PT >= 14 AND a.is_older_than_55;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.",
    "order by date_of_birth ASC # this code remains as original which never will be called\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?",
    "SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.ID IS NOT NULL AND e.ExaminationDate > '1997-01-01' AND e.APTT < 45 AND (e.KCT = '-' OR e.RVVT = '-');\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patients with an abnormal activated partial prothrom bin time, how many of them have a mild thrombosis?",
    "SELECT COUNT(DISTINCT L.ID) AS Number_of_patients_with_both_conditions FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.APTT > 45 AND P.Thrombosis = 3\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "SELECT COUNT(*) FROM ( SELECT P.ID, L.FG FROM Patient AS P LEFT JOIN Examination AS E ON P.ID = E.ID LEFT JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND E.WBC BETWEEN 3.5 AND 9.0 ) t WHERE t.FG < 150 OR t.FG >= 450;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients born after 1980/1/1 have an abnormal fibrinogen level?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list the disease names of the patients that have a proteinuria level higher than normal.",
    "SELECT DISTINCT T1.Diagnosis FROM Examination AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.`ID` WHERE T2.`U-PRO` > 30 AND T2.`U-PRO` IS NOT NULL;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.",
    "SELECT DISTINCT E.ID FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID -- JOIN Laboratory AS L ON P.ID = L.ID -- not required for this query WHERE P.Diagnosis = 'SLE' AND E.`U-PRO` > 0 AND E.`U-PRO` < 30;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients with an Ig G lower than normal has the symptom of abortion?",
    "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.aCL_IgG < 900 AND T2.Symptoms LIKE '%abortion%';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "-- Corrected SQL Query: SELECT COUNT(ID) FROM Examination WHERE IGG BETWEEN 900 AND 2000 AND Symptoms IS NOT NULL;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "SELECT COUNT(*) FROM ( SELECT DISTINCT p.`ID` FROM Patient p JOIN Examination e ON p.`ID` = e.`ID` WHERE e.`aCL IgA` BETWEEN 80 AND 500 AND YEAR(e.`Examination Date`) >= 1990 AND e.`aCL IgA` IS NOT NULL )\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients with a normal C-reactive protein don't have their data recorded?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients whose C-reactive protein level is abnormal, how many of them aren't 18 yet?",
    "SELECT DISTINCT p.ID as Patient_id FROM Examination EXAMINATION e JOIN Laboratory LALABORATORY l ON l.id = e.EXAMINATION_DATE AND year(e.Date) -year(current_date()) <=-1.0 AND 1.00000>=e.CR P IS NOT NULL aND e.DATE <=current_date() WHERE e.CRP != '-' AND p.ID=e.id AND p.birthdate >='2005-01-01' Note that for educational purposes, we added this filter. **However it depends greatly on the information needed.\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?",
    "SELECT COUNT(DISTINCT EX.ID) FROM Examination AS EX INNER JOIN Laboratory AS LA ON EX.ID = LA.ID WHERE (EX.RA IN ('+', '-')) AND (LA.CRP LIKE '+');\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list the diseases of the patients born after 1995-1-1 and have a normal Rhuematoid Factor.",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list the ID of the patient whose RF is normal and who is older than 60.",
    "-- Select patient IDs with normal RF and age > 60 SELECT T2.ID FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE DATEDIFF('day', CURDATE(), T2.Birthday) / 365.25 > 60 AND T1.RF < 20;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients with a normal RF don't have thrombosis?",
    "SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE ISNULL(e.RF, 0) < 20 AND e.Thrombosis != 1;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID.",
    "-- Create a test table: Examination CREATE TABLE Examination ( `ID` INTEGER PRIMARY KEY, HCT REAL, aCL_IgA REAL ); -- Insert some data INSERT INTO Examination (HCT, aCL_IgA) VALUES (30.7, NULL), (31.1, NULL), (28.5, NULL), (40.9, 24.55),(51.7,80.21);\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients have blood clots in veins, how many of them have a normal level of complement 4?",
    "SELECT COUNT(P.ID) FROM Patient AS P JOIN Laboratory L ON P.ID = L.ID WHERE P.DESCRIPTION LIKE '%Thrombosis%' AND L.C4 > 10;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "SELECT COUNT(DISTINCT Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Diagnosis NOT LIKE '%SLE%' AND Laboratory.RNP IN ('-', '0') AND Admission = '+';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.",
    "SELECT T2.Birthday FROM Laboratory AS T1 JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE RNP NOT IN ( '-', '+-' ) ORDER BY Birthday DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients with normal anti-SM, how many of them have the most severe degree of thrombosis?",
    "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.SM IN('-', '+-') AND E.Thrombosis = 1;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.",
    "SELECT p1.ID FROM Patient p1 WHERE Birthday IS NOT NULL AND SUBSTR(Birthday, -5) != '-' ORDER BY STRFTIME('%Y', Birthday) DESC LIMIT 3;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.",
    "SELECT DISTINCT E.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.`ID` = L.`ID` WHERE E.`Examination Date` >= '1997-01-01' AND (L.`SC170` IS NOT NULL AND L.`SC170` IN ('-', '+')) OR E.`SC170` IS NOT NULL AND E.`SC170` IN ('-', '+');\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients who has a normal anti-scl70, how many of them are male and have the symptom of vertigo?",
    "-- Corrected SQL to fixup the query based on the constraints provided. SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE P.SEX = 'M' AND (E.SC170 IN ('-', '+')) AND E.scl70 IS NOT NULL AND -- scl70 is the correct column name, it seems to be 'scl70' E.symptoms = 'vertigo'; -- Script type: SQL\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients with a normal anti-SSA came to the hospital before 1990?",
    "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID INNER JOIN Laboratory L ON P.ID = L.ID WHERE E.aCL IgG IS NOT NULL AND E.SSA LIKE '-%' AND P.First Date < '1990-01-01';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.",
    "SELECT P.ID AS min_ssa_patient_id FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN (SELECT ID, MIN(`First Date`) AS min_date FROM Examination GROUP BY ID) AS min_date_info ON E.ID = min_date_info.ID AND E.`First Date` = min_date_info.min_date WHERE E.SSA NOT IN('-','+');\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?",
    "SELECT COUNT(DISTINCT E.ID) FROM Patient P -- join to table where Diagnosis exists JOIN Examination E ON P.ID = E.ID # Join to table for attribute from Examination not Laboratory as SSb is available in Laboratory Table now. JOIN Laboratory L ON P.ID = L.ID -- Use correct column names for SSB, Join on ID where other attributes from Patient are present like SSb WHERE P.Diagnosis = 'SLE' AND (L.SSB IN ('-','+-')); -- Correct table aliasing and attribute use\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?",
    "-- create table Examination CREATE TABLE Examination ( ID integer, ExaminationDate DATE, SSN varchar(10), SSAA char(100) ); INSERT INTO Examination (ID, SSB) VALUES (1,'0'); INSERT INTO Examination (ID, SSB) VALUES (2,-negative); INSERT INTO Examination (ID, SSB IN('-','+')) VALUES (3,1) -- create table Patient CREATE TABLE Patient ( ID integer PRIMARY KEY, Age integer, Gender char(100), Diagnosis char(100) ); INSERT INTO Patient (ID ,Diagnosis) VALUES (4, 'SLE') SELECT COUNT(DISTINCT E.id) FROM Examination E WHERE (E.SSB IN('-','0', '-negative')) AND (P.id = E.id ) AND ( P.Diagnosis IS NOT NULL)\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.",
    "SELECT DISTINCT P.DIAGNOSIS, E.ANA FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE E.ANA >= 8;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients have a normal anti-DNA level, yet their data are not recorded.",
    "SELECT DISTINCT Patient.ID FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Description IS NULL AND DNA < 8;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Of the patients with an abnormal level of anti-DNA-II, how many of them admitted to the hospital?",
    "-- SQL to find number of admitted patients with anti-DNA-II abnormality: SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '+' AND L.`DNA-II` < 8;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?",
    "SELECT count(id) FROM Examination e\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many male patients have their glutamic oxaloacetic transaminase in the normal range?",
    "-- Corrected Query: SELECT COUNT(*) as cnt FROM Patient p INNER JOIN Laboratory l ON p.ID = l.ID -- Modified here. WHERE p.SEX = 'M' AND l.GOT < 60;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "SELECT MAX(Patient.Birthday) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT >= 60;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.",
    "SELECT DISTINCT P.`Birthday` as Birthday FROM Patient P JOIN Laboratory L ON P.`ID` = L.`ID` WHERE L.GPT < 60 AND P.`Birthday` IS NOT NULL ORDER BY CAST(SUBSTR(P.`Birthday`, 7, 4) AS INT) DESC, P.`Birthday` DESC LIMIT 3;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?",
    "-- Corrected SQL Type: SELECT STATEMENT SCRIPT_NAME: Corrected_SQL SELECT COUNT(DISTINCT t1.sex) FROM Patient AS t1 JOIN Laboratory AS t2 ON t1.ID = t2.ID AND t2.GOT <60 WHERE t1.sex='M';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?",
    "INSERT INTO Examination (ID, Exam_date, LDH) VALUES (1, '2024-01-01', 400), (2, '2024-02-01', 600), (3, '2024-03-01', 300); CREATE TABLE Laboratory ( ID INTEGER PRIMARY KEY, Date DATE, LDH REAL ); INSERT INTO Laboratory (ID, Date, LDH) VALUES (1, '2024-01-01', 400), (2, '2024-02-01', 600), (3, '2024-03-01', 300);\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?",
    "SELECT COUNT(P.ID) as total_count FROM Patient P, Examination E, -- Assuming Examination(ID, ID) is linked with Laboratory(ID) Laboratory L -- Also assuming Laboratory(ID) is directly related to Patient(ID) WHERE ( SELECT ID FROM Laboratory WHERE ALP >= 300 ) IN (L.ID) AND E.`ID` = P.ID -- Here we assume Examination(ID) and Laboratory(ID) are linked to same patient through different Tables. AND P.`Admission`= '+' AND P.ID = L.ID ;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?",
    "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list the diagnosis of the patients whose total protein is lower than normal.",
    "SELECT P.Diagnosis FROM ( SELECT DISTINCT L.ID FROM Laboratory L WHERE L.TP < 6.0 AND L.TP IS NOT NULL ) ID_LIST JOIN Patient P ON ID_LIST.ID = P.ID;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?",
    "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON (P.ID = L.ID) WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the examination date of the patient whose albumin is the highest in the normal range?",
    "SELECT MAX(L.Date) AS Examination_Date, P.ID FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE ALB > 3.5 AND ALB < 5.5;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many male patients have a normal level of both albumin and total protein?",
    "SELECT COUNT(p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.SEX = 'M' AND l.ALB BETWEEN 3.5 AND 5.5 AND l.TP BETWEEN 6.0 AND 8.5;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?",
    "SELECT e.aCL IgG, e.aCL IgA FROM Examination e WHERE e.Sex = 'F' AND CAST(e.UA AS REAL) > 6.50 ORDER BY e.ua DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?",
    "SELECT MAX(E.DNA) AS highest_ana_level, E.CRE FROM Examination E JOIN Laboratory L ON E.ID = L.ID WHERE E.CRE < 1.5;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.",
    "-- Please list the patient's ID whose creatinine level is normal and whose -- anti Cardiolipin antibody concentration level is the highest. SELECT e.ID AS ID FROM Examination e JOIN Patient p ON e.ID = p.ID JOIN Laboratory l ON e.ID = p.ID WHERE p.CRE < 1.5 AND l.aCL_IgA = ( SELECT MAX(aCL_IgA) FROM Laboratory WHERE CRE<1.5 );\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?",
    "SELECT COUNT(E.ID) FROM Examination E JOIN Laboratory L on E.ID = L.ID WHERE L.T-BIL IS NOT NULL AND L.T-BIL >= 2.0 AND E.ANA LIKE '%P%' COLLATE NOCASE;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?",
    "-- Fixing up the original SQL queries SELECT MAX(L1.T-BIL) AS max_total_bilirubin FROM Laboratory L1; SELECT E2.ANA AS anti_nucleus_anti_body_concentration FROM Examination E2 WHERE ID IN ( SELECT P.ID FROM Patient P JOIN Laboratory L ON P.ID = L.ID AND L.T_BIL IS NOT null ) AND L.ID = P.ID;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?",
    "SELECT DISTINCT e.ID, l.T-CHO, l.KCT, l.RVVT, l.LAC FROM Laboratory l JOIN Examination e ON l.`ID` = e.`ID` WHERE l.`T-CHO` >= 250 AND (l.`KCT` = '-' OR l.`RVVT` = '-' OR l.`LAC` = '-')\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?",
    "SELECT COUNT(DISTINCT PAT.ID) FROM Examination AS E INNER JOIN Patient as PAT ON E.ID = PAT.id WHERE E.T-CHO < 250 AND E.ANA IS NOT NULL AND E.ANA_Pattern LIKE '%P%'\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed?",
    "SELECT COUNT(*) FROM Examination, Patient, Laboratory WHERE Examination.ID = Patient.ID AND Patient.ID = Laboratory.ID AND Laboratory.TG < 200 AND Symptoms IS NOT NULL;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What is the disease name of the patient who has the highest level of triglyceride within the normal range?",
    "SELECT p.Diagnosis, MAX(l.TG) AS MaxTG FROM #Patient p INNER JOIN #Examination e ON p.ID = e.ID INNER JOIN #Laboratory l ON p.ID = l.ID WHERE l.TG < 200 AND l.TG IS NOT NULL GROUP BY p.Diagnosis ORDER BY MaxTG DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase.",
    "SELECT DISTINCT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.TG = 'None' OR L.TG < 250) AND L.CPK < 250;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "When is the birthday of the oldest patient whose blood glucose is abnormal?",
    "SELECT MIN(Birthday) FROM Patient P JOIN Laboratory L ON P.ID = L.ID WHERE GLU > 180;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients with a normal blood glucose, how many of them don't have thrombosis?",
    "-- Drop tables (optional) DROP TABLE IF EXISTS Examination; DROP TABLE IF EXISTS Patient; -- Create and populate tables in one step... CREATE TABLE IF NOT EXISTS Patient ( ID INTEGER PRIMARY KEY, SEX TEXT, Birthday DATE, Description TEXT, FirstDate DATE, Admission TEXT, Diagnosis TEXT ); INSERT INTO Patient (ID, SEX, Birthday) VALUES (1, 'Female', '1995-01-01'); CREATE TABLE IF NOT EXISTS Examination ( ID INTEGER PRIMARY KEY, GLU REAL, Thrombosis INTEGER, FOREIGN KEY (ID) REFERENCES Patient (ID) ); INSERT INTO Examination (ID, GLU, Thrombosis) VALUES (1, 125.6, 0); -- Run the corrected SQL here... SELECT COUNT(DISTINCT T2.ID) AS PatientCount FROM Examination AS T2 JOIN Patient AS T1 ON T1.ID = T2.ID WHERE T2.GLU < 180 AND T2.Thrombosis = 0;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients accepted to the hospital have a normal level of white blood cells?",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients diagnosed with SLE have a normal white blood cell level?",
    "-- How many patients diagnosed with SLE have a normal white blood cell level? SELECT COUNT(*) FROM Examination JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Examination.Diagnosis = 'SLE' AND Laboratory.WBC BETWEEN 3.5 AND 9.0;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.",
    "error: No SQL found in the input string\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Among the patients who have a normal platelet level, how many of them have other symptoms observed?",
    "SELECT p.id, COUNT(*) FROM Examination e JOIN Patient p ON e.ID = p.ID AND e.PLT BETWEEN 100 AND 400 WHERE (p.Diagnosis IS NOT NULL OR e.Diagnosis IS NOT NULL) GROUP BY p.id;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
    "SELECT T2.PLT FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND T1.Diagnosis = 'MCTD';\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "For the male patients that have a normal prothrombin time, what is their average prothrombin time?",
    "SELECT AVG(T2.PT) AS avg_prothrombin_time FROM Examination T2 JOIN Patient T1 ON T2.ID = T1.ID WHERE T1.SEX = 'M' AND T2.PT < 14;\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "How many patients with severe thrombosis have a normal prothrombin time?",
    "-- SELECT how many patients with severe thrombosis have a normal prothrombin time SELECT COUNT(*) FROM Patient JOIN Examination ON Examination.ID = Patient.ID WHERE Thrombosis IN (1, 2) AND PT < 14\t----- bird -----\tthrombosis_prediction"
  ],
  [
    "What's Angela Sanders's major?",
    "SELECT m.major_name FROM member AS mem JOIN major AS m ON mem.link_to_major = m.major_id WHERE mem.first_name = 'Angela' AND mem.last_name = 'Sanders';\t----- bird -----\tstudent_club"
  ],
  [
    "How many students in the Student_Club are from the College of Engineering?",
    "SELECT COUNT(member.member_id) FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.college = 'College of Engineering';\t----- bird -----\tstudent_club"
  ],
  [
    "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "SELECT lower('Art and Design') = lower('art and design')\t----- bird -----\tstudent_club"
  ],
  [
    "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
    "SELECT COUNT(DISTINCT a.link_to_member) as Number_of_Students FROM attendance AS a JOIN event AS e ON a.link_to_event = e.event_id WHERE e.event_name IS NOT NULL AND e.event_name = 'Women''s Soccer';\t----- bird -----\tstudent_club"
  ],
  [
    "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".",
    "SELECT DISTINCT m.phone FROM member AS m JOIN attendance AS a ON m.member_id = a.link_to_member JOIN event AS e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women''s Soccer';\t----- bird -----\tstudent_club"
  ],
  [
    "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "SELECT T3.first_name, T3.last_name, COUNT(*) AS count_mademedium_tshirts FROM attendance AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id LEFT JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.t_shirt_size = 'Medium' GROUP BY T3.member_id\t----- bird -----\tstudent_club"
  ],
  [
    "What is the event that has the highest attendance of the students from the Student_Club?",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "Which college is the vice president of the Student_Club from?",
    "SELECT college FROM major WHERE major_id IN ( SELECT link_to_major FROM member WHERE position = 'Vice President' );\t----- bird -----\tstudent_club"
  ],
  [
    "Please list the event names of all the events attended by Maya Mclean.",
    "SELECT m.first_name + ' ' + m.last_name AS Name FROM attendance att JOIN member m ON att.link_to_member = m.member_id\t----- bird -----\tstudent_club"
  ],
  [
    "How many events of the Student_Club did Sacha Harrison attend in 2019?",
    "SELECT COUNT(*) FROM ( SELECT DISTINCT a.link_to_event FROM attendance a INNER JOIN event e ON a.link_to_event = e.event_id WHERE STRFTIME('%Y',e.event_date) = '2019' AND e.event_name LIKE '%Student_Club%' AND (SELECT COUNT(*) FROM member AS m WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison') > 0 )\t----- bird -----\tstudent_club"
  ],
  [
    "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "SELECT-- Among the events attended by more than 10 members of the Student_Club, how many of them are meetings? SELECT COUNT(DISTINCT te.type) AS num_meetings FROM event AS te JOIN attendance AS ta ON ta.link_to_event = te.event_id GROUP BY te.type HAVING COUNT(ta.event_id) > 10;\t----- bird -----\tstudent_club"
  ],
  [
    "Please list the names of all the events of the Student_Club that had an attendance of over 20 students.",
    "SELECT event_name FROM ( SELECT T3.event_name, count(*) FROM event AS T2 JOIN (SELECT link_to_event as attend_link, count(*) as c FROM attendance group by link_to_event) AS T3 ON T2.event_id = T3.attend_link GROUP BY T3.event_name, T3.c ) subquery HAVING c > 20;\t----- bird -----\tstudent_club"
  ],
  [
    "What is the average attendance of meetings in 2020?",
    "SELECT COUNT(DISTINCT event_id) / ( SELECT COUNT(*) FROM event WHERE YEAR(event_date) = 2020 AND type='Meeting' ) AS average_attendance FROM event;\t----- bird -----\tstudent_club"
  ],
  [
    "What is the most expensive item that was spent in support of club events?",
    "SELECT e.expense_description, MAX(e.cost) AS total_cost FROM event ev JOIN expense e ON (ev.event_name = 'club events' AND e.expense_description LIKE '%support of club events%') GROUP BY e.expense_description ORDER BY total_cost DESC LIMIT 1;\t----- bird -----\tstudent_club"
  ],
  [
    "How many members of the Student_Club have majored Environmental Engineering?\n",
    "SELECT COUNT(*) FROM member m WHERE m.link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Environmental Engineering');\t----- bird -----\tstudent_club"
  ],
  [
    "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member WHERE a.link_to_event IN ( SELECT e.event_id FROM event e WHERE e.event_name = 'Laugh Out Loud' )\t----- bird -----\tstudent_club"
  ],
  [
    "List the last name of all the students who majored Law and Constitutional Studies. \n",
    "SELECT m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Law and Constitutional Studies';\t----- bird -----\tstudent_club"
  ],
  [
    "What county did Sherri Ramsey grew up?",
    "SELECT T2.county FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey';\t----- bird -----\tstudent_club"
  ],
  [
    "What college offers the major that Tyler Hewitt took?",
    "SELECT m.college FROM major AS m JOIN event AS e ON e.event_id = a.link_to_event JOIN attendance AS a ON a.link_to_event = m.major_id WHERE a.link_to_member = (SELECT member_id FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt');\t----- bird -----\tstudent_club"
  ],
  [
    "What is the amount of the funds that the Vice President received?",
    "SELECT member.position, income.amount FROM member INNER JOIN attendance ON member.member_id = attendance.link_to_member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.position = 'Vice President'\t----- bird -----\tstudent_club"
  ],
  [
    "How much did the Student_Club members spend on food in September Meeting?",
    "SELECT SUM(b4.spent) FROM budget b4 JOIN event e ON b4.link_to_event = e.event_id WHERE e.type = 'Meeting' AND e.event_name LIKE '%September Meeting%' AND b4.category = 'Food';\t----- bird -----\tstudent_club"
  ],
  [
    "What city and state did the President of the Student_Club grow up?",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "List the full name of the Student_Club members that grew up in Illinois state.",
    "SELECT m.first_name, m.last_name FROM member AS m INNER JOIN major AS ma ON m.link_to_major = ma.major_id INNER JOIN zip_code AS z ON m.zip = z.zip_code WHERE z.state = 'Illinois' AND m.position IN ('Vice President', 'Treasurer', 'Secretary', 'President');\t----- bird -----\tstudent_club"
  ],
  [
    "How much did the Student_Club members spend on advertisement in September Meeting?",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "What department offers the major that Pierce and Guidi took?",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "What is the total budgeted amount for all category in \"October Speaker\" event?",
    "SELECT SUM(b.amount) FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker';\t----- bird -----\tstudent_club"
  ],
  [
    "Was each expense in October Meeting on October 8, 2019 approved?",
    "-- This one has a syntax error. SELECT e.* FROM expense e WHERE approved IS TRUE AND e.approved IN ( 'False' )\t----- bird -----\tstudent_club"
  ],
  [
    "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "SELECT AVG(T1.cost) FROM ( SELECT E1.cost, M.first_name, M.last_name FROM expense AS E1 INNER JOIN member AS M ON E1.link_to_member = M.member_id WHERE M.first_name = 'Elijah' AND M.last_name = 'Allen' -- Filter events in September and October AND strftime('%m', E1.expense_date) IN (9, 10) ) AS T1;\t----- bird -----\tstudent_club"
  ],
  [
    "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "WITH total_spent AS ( SELECT SUM(CASE WHEN STRFTIME('%Y', e.event_date) = 2019 THEN b.spent ELSE 0 END) AS spent_19, SUM(CASE WHEN STRFTIME('%Y', e.event_date) = 2020 THEN b.spent ELSE 0 END) AS spent_20 FROM event e JOIN budget b ON e.event_id = b.link_to_event ) SELECT ABS(spent_19-spent_20) AS the_diff FROM total_spent;\t----- bird -----\tstudent_club"
  ],
  [
    "Give the location for \"Spring Budget Review\".",
    "SELECT e.location AS event_location, z.city, z.state, z.county FROM event e JOIN zip_code z ON e.location = z.zip_code WHERE e.event_name = 'Spring Budget Review';\t----- bird -----\tstudent_club"
  ],
  [
    "What was the cost for the \"Posters\" on 2019/9/4?",
    "SELECT e.cost FROM expense AS e JOIN budget AS b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Posters' AND SUBSTR(e.expense_date, 1, 10) >= '2019-09-04';\t----- bird -----\tstudent_club"
  ],
  [
    "With the biggest budget for the \"Food\", what was the remaining of it?",
    "SELECT remaining FROM budget WHERE category = 'Food' AND (event_status IN ('Open', 'Planning', 'Closed')) -- Include closed and planing for completeness AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' );\t----- bird -----\tstudent_club"
  ],
  [
    "What was the notes of the fundraising on 2019/9/14?",
    "SELECT notes FROM income WHERE source = 'Fundraising' AND DATE_RECEIVED = '2019-09-14';\t----- bird -----\tstudent_club"
  ],
  [
    "How many majors are there in \"College of Humanities and Social Sciences\"?",
    "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';\t----- bird -----\tstudent_club"
  ],
  [
    "Tell the phone number of \"Carlo Jacobs\".",
    "SELECT m.phone AS Carlo_Jacobs_Phone FROM member m WHERE m.first_name = 'Carlo' AND m.last_name = 'Jacobs' GROUP BY m.id -- or group by multiple columns to avoid 'sqlite readonly' error on aggregate functions. ORDER BY NULL; -- This will not order anything in this case, just make sure SQL is aware we want unique values.\t----- bird -----\tstudent_club"
  ],
  [
    "Tell the hometown county for \"Adela O'Gallagher\".",
    "-- Find county from zip code for Adela O'Gallagher SELECT T2.county FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE first_name = 'Adela' AND last_name = 'O''Gallagher';\t----- bird -----\tstudent_club"
  ],
  [
    "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?",
    "SELECT COUNT(*) FROM ( SELECT category, spent, remaining FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name='November Meeting' AND b.remaining < 0 ) AS subquery;\t----- bird -----\tstudent_club"
  ],
  [
    "Provide the total number of the budget amount for \"September Speaker\" event.",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "SELECT b.event_status -- updated column from event.status to budget.event_status FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE e.expense_description = 'Post Cards, Posters' AND e.expense_date = '2019-08-20'\t----- bird -----\tstudent_club"
  ],
  [
    "What was Brent Thomason's major?",
    "SELECT m.major_name FROM major m JOIN member mi ON m.major_id = mi.link_to_major WHERE mi.last_name = 'Thomason';\t----- bird -----\tstudent_club"
  ],
  [
    "For all the club members from \"Human Development and Family Studies\" major, how many of them wear large size t-shirt?",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "What's Christof Nielson's zip code type?",
    "SELECT MAX(b.amount + b.spent - b.remaining) FROM event AS e JOIN budget AS b ON e.event_id = b.link_to_event;\t----- bird -----\tstudent_club"
  ],
  [
    "State the major name for the Vice President of the club.",
    "SELECT DISTINCT T1.major_name AS name FROM major AS T1 INNER JOIN member AS T2 ON T2.link_to_major = T1.major_id WHERE T2.position = 'Vice President' ORDER BY T1.major_name ASC;\t----- bird -----\tstudent_club"
  ],
  [
    "Where is the hometown state for \"Sacha Harrison\"?",
    "SELECT T2.state FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code;\t----- bird -----\tstudent_club"
  ],
  [
    "Which department was the President of the club in?",
    "-- Get department of President's major and corresponding position in club SELECT M3.position , T2.department FROM event E INNER JOIN attendance A ON E.event_id = A.link_to_event INNER JOIN member M3 ON A.link_to_member = M3.member_id INNER JOIN major T2 ON M3.link_to_major= T2.major_id WHERE M3.position = 'President';\t----- bird -----\tstudent_club"
  ],
  [
    "State the date Connor Hilton paid his/her dues.",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "Who was the first one paid his/her dues? Tell the full name.",
    "SELECT M.first_name AS First_Name, M.last_name AS Last_Name FROM member M JOIN income I ON M.member_id = I.link_to_member WHERE I.date_received = ( SELECT MIN(I2.date_RECEIVED) FROM income I2 WHERE I2.source = 'Dues' );\t----- bird -----\tstudent_club"
  ],
  [
    "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "SELECT SUM(CASE WHEN b.event_name = 'Yearly Kickoff' THEN a.amount END) / SUM(CASE WHEN b.event_name = 'October Meeting' THEN a.amount END) FROM budget a JOIN event b ON a.link_to_event = b.event_id WHERE a.category = 'Advertisement'\t----- bird -----\tstudent_club"
  ],
  [
    "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
    "-- Fixing the old SQL to remove the commented line and proper SQL syntax SELECT ( SELECT SUM(amount) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'November Speaker' AND b.category = 'Parking' ) / ( SELECT COUNT(*) FROM event WHERE event_name = 'November Speaker' ) * 100 AS parking_percentage;\t----- bird -----\tstudent_club"
  ],
  [
    "What is the total cost of the pizzas for all the events?",
    "SELECT SUM(e.cost) AS total_cost FROM expense e WHERE e.expense_description = 'Pizza' AND e.cost IS NOT NULL;\t----- bird -----\tstudent_club"
  ],
  [
    "How many cities are there in Orange County, Virginia?",
    "SELECT COUNT(DISTINCT city) AS num_cities FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';\t----- bird -----\tstudent_club"
  ],
  [
    "List all of the College of Humanities and Social Sciences' departments.",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "Where is Amy Firth's hometown?",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "What are the expenses of the budget with the lowest remaining?",
    "SELECT e.* FROM expense AS e JOIN budget AS b ON e.link_to_budget = b.budget_id WHERE b.remaining = (SELECT MIN(remaining) FROM budget);\t----- bird -----\tstudent_club"
  ],
  [
    "List all the members who attended the event \"October Meeting\".",
    "SELECT m.* FROM member AS m INNER JOIN attendance AS a ON m.member_id = a.link_to_member INNER JOIN event AS e ON a.link_to_event = e.event_id WHERE e.event_name = 'October Meeting';\t----- bird -----\tstudent_club"
  ],
  [
    "Which college do most of the members go to?",
    "SELECT max_of_members_college AS most_visited_college,\t----- bird -----\tstudent_club"
  ],
  [
    "What does the person with the phone number \"809-555-3360\" major in?",
    "-- What does the person with the phone number \"809-555-3360\" major in? SELECT M.major_name FROM member AS M JOIN major AS Major ON M.link_to_major = Major.major_id WHERE M.phone = '809-555-3360'\t----- bird -----\tstudent_club"
  ],
  [
    "Which event has the highest budget amount?",
    "SELECT b.link_to_event AS budget_link, e.event_name, MAX(b.amount) AS max_amount FROM budget b JOIN event e ON b.link_to_event = e.event_id;\t----- bird -----\tstudent_club"
  ],
  [
    "List all the expenses incurred by the vice president.",
    "SELECT e.expense_description AS expense FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President'\t----- bird -----\tstudent_club"
  ],
  [
    "How many members attended the \"Women's Soccer\" event?",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "When did the member, Casey Mason, received the income?",
    "SELECT i.date_received FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE m.first_name = 'Casey' AND m.last_name = 'Mason';\t----- bird -----\tstudent_club"
  ],
  [
    "How many of the members' hometowns are from Maryland state?",
    "SELECT COUNT(T2.member_id) FROM zip_code AS T1 JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state='Maryland';\t----- bird -----\tstudent_club"
  ],
  [
    "How many events did the member with the phone number \"954-555-6240\" attend?",
    "SELECT COUNT(*) FROM attendance AS att JOIN member AS mem ON mem.member_id = att.link_to_member WHERE mem.phone = '954-555-6240';\t----- bird -----\tstudent_club"
  ],
  [
    "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "SELECT M.first_name AS first_name, M.last_name AS last_name FROM member M JOIN major ON M.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';\t----- bird -----\tstudent_club"
  ],
  [
    "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "SELECT e.event_id, b.spent / b.amount AS spend_ratio FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.event_status = 'Closed';\t----- bird -----\tstudent_club"
  ],
  [
    "How many student have the position of president?",
    "SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'School of Business') AND position = 'President'\t----- bird -----\tstudent_club"
  ],
  [
    "What is the highest amount of budget spend for an event?",
    "SELECT MAX(spent) AS highest_budget_spend FROM budget;\t----- bird -----\tstudent_club"
  ],
  [
    "How many meeting events were held in 2020?",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "What is the total amount of money spent for food?",
    "SELECT SUM(spent) AS Total_Spent FROM budget WHERE category = 'Food';\t----- bird -----\tstudent_club"
  ],
  [
    "List the name of students that have attended more than 7 events.",
    "SELECT DISTINCT M.first_name, M.last_name FROM member M JOIN ( SELECT A.link_to_member AS member_id, COUNT(E.event_id) AS event_count FROM attendance A JOIN event E ON (A.link_to_event = E.event_id) GROUP BY A.link_to_member ) AEE ON (M.member_id = AEE.member_id AND AEE.event_count > 7) ORDER BY M.first_name, M.last_name;\t----- bird -----\tstudent_club"
  ],
  [
    "Among the students majored in interior design, who have attended the Community Theater event?",
    "SELECT M.first_name, A.link_to_member FROM member AS M INNER JOIN attendance AS A ON (M.member_id = A.link_to_member) INNER JOIN event AS E ON (A.link_to_event = E.event_id) WHERE M.link_to_major = ( SELECT major_id FROM major WHERE major_name = 'Interior Design' ) AND E.event_name = 'Community Theater'\t----- bird -----\tstudent_club"
  ],
  [
    "State the name of students from Georgetown, South Carolina.",
    "SELECT m.first_name, m.last_name FROM member m JOIN zip_code pc ON m.zip = pc.zip_code WHERE pc.city = 'Georgetown';\t----- bird -----\tstudent_club"
  ],
  [
    "How many income generated by Grant Gilmour?",
    "SELECT SUM(i.amount) AS income_generated FROM member m JOIN income i ON m.member_id = i.link_to_member WHERE m.first_name = 'Grant' AND m.last_name = 'Gilmour';\t----- bird -----\tstudent_club"
  ],
  [
    "Which student was able to generate income more than $40?",
    "SELECT ( SELECT GROUP_CONCAT(DISTINCT CONCAT(first_name, ' ', last_name)) FROM member M INNER JOIN income I ON M.member_id = I.link_to_member WHERE I.amount > 40 ) as names ;\t----- bird -----\tstudent_club"
  ],
  [
    "What is the total expense for the Yearly Kickoff?",
    "SELECT SUM(e.cost) FROM expense e JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.category='Kickoff Expenses' AND (e.expense_description LIKE '%Yearly Kickoff%' OR e.expense_description LIKE '%Kickoff%') AND e.approved IS NOT NULL;\t----- bird -----\tstudent_club"
  ],
  [
    "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "SELECT DISTINCT e.* , m.first_name FROM event e JOIN attendance a ON e.event_id = a.link_to_event LEFT OUTER JOIN member m ON a.link_to_member=m.member_id WHERE e.event_name='Yearly Kickoff';\t----- bird -----\tstudent_club"
  ],
  [
    "Which students manage to generate the highest income. State his/her full name along with the income source.",
    "SELECT m.first_name, m.last_name, MAX(i.source) AS source, SUM(x.total_income) AS max_total_income FROM member m JOIN income i ON m.member_id = i.link_to_member JOIN ( SELECT link_to_member, SUM(amount) AS total_income FROM income GROUP BY link_to_member ) AS x ON i.link_to_member = x.link_to_member GROUP BY m.first_name, m.last_name;\t----- bird -----\tstudent_club"
  ],
  [
    "Which event has the lowest cost?",
    "SELECT DISTINCT event_name, MIN(budget.amount) FROM event -- Select only needed columns in SELECT clause JOIN budget ON event.event_id = budget.link_to_event; -- Join 'event' and 'budget' table first, THEN use MAX/MIN function\t----- bird -----\tstudent_club"
  ],
  [
    "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "SELECT SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN et.cost ELSE 0 END) * 100.0 / (SELECT SUM(cost) FROM expense) FROM event e LEFT JOIN expense et ON TRUE;\t----- bird -----\tstudent_club"
  ],
  [
    "What is the ratio between students majored in finance and physics?",
    "-- Corrected SQL to calculate the ratio between students majored in finance and physics SELECT COUNT(CASE WHEN major_name = 'Finance' THEN major_id END) AS finance_total, COUNT(CASE WHEN major_name = 'Physics' THEN major_id END) AS physics_total, (COUNT(CASE WHEN major_name = 'Finance' THEN major_id END)) / (SELECT COUNT(*) FROM major WHERE major_name = 'Physics') FROM major;\t----- bird -----\tstudent_club"
  ],
  [
    "Indicate the top source of funds received in September 2019 based on their amount.",
    "SELECT source, SUM(amount) FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1;\t----- bird -----\tstudent_club"
  ],
  [
    "Provide the full name and email address of the Student_Club's Secretary.",
    "SELECT first_name AS \"first_name\", last_name AS \"last_name\", email FROM member WHERE (position LIKE '%Secretary% of Student Club%' AND link_to_major = 'Student Club') OR (member_id IN (SELECT link_to_member FROM attendance));\t----- bird -----\tstudent_club"
  ],
  [
    "How many members of the Student_Club have major in 'Physics Teaching'?",
    "SELECT COUNT(*) FROM member WHERE link_to_major = ( SELECT major_id FROM major WHERE major_name = 'Physics Teaching' );\t----- bird -----\tstudent_club"
  ],
  [
    "How many members did attend the event 'Community Theater' in 2019?",
    "SELECT COUNT(DISTINCT a.`link_to_member`) FROM attendance a JOIN event e ON a.`link_to_event` = e.`event_id` WHERE e.event_name = 'Community Theater' AND YEAR(e.event_date) = 2019;\t----- bird -----\tstudent_club"
  ],
  [
    "Provide the number of events attended by Luisa Guidi. What is her major?",
    "SELECT COUNT(T2.event_id) FROM attendance T1 INNER JOIN event T2 ON T1.`link_to_event` = T2.`event_id` INNER JOIN member T3 ON T3.`member_id` = T1.`link_to_member` AND T3.`first_name` = 'Luisa' AND T3.last_name = 'Guidi';\t----- bird -----\tstudent_club"
  ],
  [
    "On average, how much did the Student_Club spend on food for the typical event in the past?",
    "SELECT (SUM(B2.amount) / COUNT(*)) AS avg_food_per_event FROM budget B1 JOIN budget B2 ON B1.link_to_event = B2.link_to_event AND B2.category = 'Food' WHERE B1.event_status = 'Closed';\t----- bird -----\tstudent_club"
  ],
  [
    "Name the event with the highest amount spent on advertisement.",
    "SELECT E.event_name AS event_name FROM event E JOIN budget B ON E.event_id = B.link_to_event AND B.category = 'Advertisement' GROUP BY E.event_name ORDER BY MAX(B.spent) DESC LIMIT 1;\t----- bird -----\tstudent_club"
  ],
  [
    "Did Maya Mclean attend the 'Women's Soccer' event?",
    "SELECT m.first_name, m.last_name FROM attendance a JOIN member m ON a.link_to_member = m.member_id JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women\\'s Soccer';\t----- bird -----\tstudent_club"
  ],
  [
    "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'",
    "SELECT SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS Total_Community_Services ,COUNT(*) AS total_events FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'\t----- bird -----\tstudent_club"
  ],
  [
    "Indicate the cost of posters for 'September Speaker' event.",
    "-- Retrieve the cost of posters for 'September Speaker' event. SELECT SUM(e.cost) FROM expense e INNER JOIN budget k ON e.link_to_budget = k.budget_id AND k.event_status = \"Open\" WHERE e.expense_description LIKE \"%Posters%\";\t----- bird -----\tstudent_club"
  ],
  [
    "What is the most popular size of t-shirt ordered by the club members?",
    "SELECT t_shirt_size, COUNT(*) as count FROM member WHERE position = 'Member' GROUP BY t_shirt_size ORDER BY count DESC;\t----- bird -----\tstudent_club"
  ],
  [
    "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "SELECT e.event_name, b.remaining FROM ( SELECT link_to_event FROM budget WHERE remaining < 0 GROUP BY link_to_event ORDER BY SUM(amount) DESC, link_to_event ASC LIMIT 1 ) AS max_exceeded_budget JOIN budget b ON max_exceeded_budget.link_to_event = b.link_to_event JOIN event e ON b.link_to_event = e.event_id;\t----- bird -----\tstudent_club"
  ],
  [
    "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "SELECT b.category, SUM(e.cost) FROM expense e INNER JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.event_status = 'Open' AND e.approved = 'true' AND (e.expense_date = '2019-11-19') or EXISTS ( SELECT * FROM event WHERE event_name like '%October Meeting%' ) GROUP BY b.category ORDER BY SUM(e.cost) DESC;\t----- bird -----\tstudent_club"
  ],
  [
    "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount.",
    "SELECT ba.category, SUM(ba.amount) AS total_amount FROM budget ba JOIN event e ON ba.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' GROUP BY ba.category ORDER BY total_amount ASC;\t----- bird -----\tstudent_club"
  ],
  [
    "Among the budgets for Food, which one has the highest budgeted amount?",
    "SELECT MAX(amount) FROM budget WHERE category = 'Food';\t----- bird -----\tstudent_club"
  ],
  [
    "Among the budgets for Advertising, list out top three which have the most budgeted amount?",
    "SELECT category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;\t----- bird -----\tstudent_club"
  ],
  [
    "Calculate the total cost spent for Parking in the list.",
    "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';\t----- bird -----\tstudent_club"
  ],
  [
    "Mention the total expense used on 8/20/2019.",
    "SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';\t----- bird -----\tstudent_club"
  ],
  [
    "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "SELECT m.first_name, m.last_name, SUM(e.cost) AS Total_Cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name\t----- bird -----\tstudent_club"
  ],
  [
    "State what kind of expenses that Sacha Harrison incurred?",
    "SELECT DISTINCT T1.expense_description FROM expense AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison';\t----- bird -----\tstudent_club"
  ],
  [
    "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
    "SELECT e.expense_description AS 'expense_type' FROM member AS m JOIN expense AS e ON m.member_id = e.link_to_member WHERE e.expense_description IN ( SELECT expense_description FROM expense WHERE link_to_member IS NOT NULL ) AND m.t_shirt_size = 'X-Large'\t----- bird -----\tstudent_club"
  ],
  [
    "Mention the zip code of member who incurred less than 50USD.",
    "SELECT DISTINCT T3.zip_code FROM member AS T1 INNER JOIN expense AS T2 ON T2.link_to_member = T1.member_id INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T2.cost < 50;\t----- bird -----\tstudent_club"
  ],
  [
    "State the name of major that Phillip Cullen has joined.",
    "SELECT DISTINCT mi.major_name, m.last_name FROM member m JOIN major mi ON m.link_to_major = mi.major_id WHERE M.first_name = 'Phillip' AND M.last_name LIKE 'Cullen%';\t----- bird -----\tstudent_club"
  ],
  [
    "List out the position of members who joined major of Business.",
    "Select m.position from member m WHERE M.link_to_major IN (SELECT MAJOR_ID FROM major WHERE major_name = \"Business\" EXCEPT SELECT link_to_major FROM member WHERE position =\"Inactive\");\t----- bird -----\tstudent_club"
  ],
  [
    "How many members of Business have the Medium size of tee shirt?",
    "SELECT COUNT(*) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Business' AND m.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club"
  ],
  [
    "List out the type of events which have remaining budget more than 30 USD.",
    "SELECT link_to_event FROM budget WHERE remaining > 30;\t----- bird -----\tstudent_club"
  ],
  [
    "Mention the category of events which were held at MU 215.",
    "SELECT b.category FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE e.location = 'MU 215';\t----- bird -----\tstudent_club"
  ],
  [
    "What is the category of event which was taken place in 2020-03-24T12:00:00?",
    "SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event_date = '2020-03-24T12:00:00'\t----- bird -----\tstudent_club"
  ],
  [
    "State the name of major that Vice President has joined.",
    "SELECT major_name FROM major JOIN member ON major.major_id = member.link_to_major AND position = 'Vice President'\t----- bird -----\tstudent_club"
  ],
  [
    "Calculate the percentage of members who are major Mathematics in the list?",
    "SELECT SUM(CASE WHEN position = 'Member' AND t_shirt_size IN ( SELECT link_to_major FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'Mathematics') THEN 1 ELSE 0 END) FROM member;\t----- bird -----\tstudent_club"
  ],
  [
    "State the category of events were held at MU 215.",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "How many income are received with an amount of 50?",
    "SELECT COUNT(*) FROM income WHERE amount = 50;\t----- bird -----\tstudent_club"
  ],
  [
    "Among the members, how many of them have an extra large t-shirt size?",
    "SELECT COUNT(*) FROM ( SELECT * FROM member WHERE position LIKE 'Member' ) AS active_members WHERE t_shirt_size = 'X-Large';\t----- bird -----\tstudent_club"
  ],
  [
    "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?",
    "SELECT COUNT(major_name) as num_majors FROM major WHERE college = 'College of Agriculture and Applied Sciences';\t----- bird -----\tstudent_club"
  ],
  [
    "List the last name of members with a major in environmental engineering and include its department and college name.",
    "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON (T1.link_to_major = T2.major_id) WHERE T2.major_name = 'Environmental Engineering';\t----- bird -----\tstudent_club"
  ],
  [
    "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "SELECT b.category AS budget_category FROM event e JOIN budget b ON b.link_to_event = e.event_id WHERE (e.location = 'MU 215') AND e.type = 'Guest Speaker' AND b.spent = 0;\t----- bird -----\tstudent_club"
  ],
  [
    "List the city and state of members enrolled under electrical and computer engineering department.",
    "SELECT DISTINCT M.first_name, M.last_name, Z.city, Z.state AS state_of_residence, ME.department AS department_of_study FROM major ME JOIN member M ON ME.major_id = M.link_to_major JOIN attendance A ON M.member_id = A.link_to_member JOIN event E ON A.link_to_event = E.event_id JOIN zip_code Z ON M.zip = Z.zip_code;\t----- bird -----\tstudent_club"
  ],
  [
    "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "SELECT e.event_name, m.position, m.student_club_location FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.type = 'Social' AND m.position = 'Vice President' AND m.student_club_location IS NOT NULL AND m.student_club_location = '900 E. Washington St.';\t----- bird -----\tstudent_club"
  ],
  [
    "What is the last name and position of the student that bought pizza on 09/10/2019?",
    "SELECT m.last_name, m.position FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = 'Pizza' AND e.expense_date = '2019-09-10';\t----- bird -----\tstudent_club"
  ],
  [
    "List the last name of the members of the club that attended the women's soccer event.",
    "SELECT first_name, last_name FROM member WHERE position = 'Member';\t----- bird -----\tstudent_club"
  ],
  [
    "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "SELECT CAST( COUNT(CASE WHEN i.amount = 50 THEN m.member_id END) AS REAL ) / COUNT(DISTINCT m.member_id) * 100 FROM income i INNER JOIN member m ON i.link_to_member=m.member_id AND M.t_shirt_size='Medium'\t----- bird -----\tstudent_club"
  ],
  [
    "Which countries have zip codes with post office boxes?",
    "SELECT state FROM zip_code WHERE city IN ( SELECT city FROM zip_code WHERE type = 'PO Box' );\t----- bird -----\tstudent_club"
  ],
  [
    "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?",
    "SELECT zip_code FROM zip_code WHERE county = 'San Juan Municipio' AND type = 'PO Box';\t----- bird -----\tstudent_club"
  ],
  [
    "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "SELECT DISTINCT e.event_name FROM event e WHERE e.status = 'Closed' AND e.type = 'Game' AND e.event_date BETWEEN '2019-03-15' AND '2020-03-20';\t----- bird -----\tstudent_club"
  ],
  [
    "Please provide links to events for members who have paid more than 50 dollar.",
    "SELECT e.link_to_member FROM expense e JOIN attendance a ON e.link_to_member = a.link_to_member WHERE e.cost > 50;\t----- bird -----\tstudent_club"
  ],
  [
    "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.",
    "SELECT m.first_name, m.last_name, m.position, e.link_to_budget AS \"Event_id\" FROM expense as e INNER JOIN member as m WHERE STRFTIME('%Y-%m-%d',e.expense_date) BETWEEN '2019-01-10' AND '2019-11-19' AND e.approved = 'true';\t----- bird -----\tstudent_club"
  ],
  [
    "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
    "SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Katy');\t----- bird -----\tstudent_club"
  ],
  [
    "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
    "SELECT member.phone FROM major JOIN member ON major.major_id = member.link_to_major -- corrected column reference WHERE major.college = 'College of Agriculture and Applied Sciences' AND major.major_name = 'Business';\t----- bird -----\tstudent_club"
  ],
  [
    "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.",
    "SELECT DISTINCT email AS \"Email of People Who Paid More Than 20 Dollars\" FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND e.cost > 20;\t----- bird -----\tstudent_club"
  ],
  [
    "How many members have education major in the College of Education & Human Services?",
    "SELECT COUNT(member_id) AS total_members FROM ( SELECT member_id FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'education' AND department = 'College of Education & Human Services') ) temp;\t----- bird -----\tstudent_club"
  ],
  [
    "What is the percentage of the events that went over budget?",
    "SELECT (COUNT(CASE WHEN b.remaining < 0 THEN e.event_id ELSE NULL END) / COUNT(e.event_id)) * 100 AS percentage_overspent FROM budget b JOIN event e ON b.link_to_event = e.event_id;\t----- bird -----\tstudent_club"
  ],
  [
    "Give the event ID, location, and status of events conducted from November 2019 to March 2020.",
    "SELECT e.event_id, e.location, e.status FROM event e WHERE e.event_date BETWEEN '2019-11-01' AND '2020-03-31' AND e.location IS NOT NULL -- Assuming this is what you meant by \"None\" in the table description\t----- bird -----\tstudent_club"
  ],
  [
    "List the expenses that spend more than fifty dollars on average.",
    "SELECT expense_description AS spendingCategoryAverage, SUM(cost) / COUNT(expense_id) AS average_spending_category FROM expense WHERE approved IS NOT NULL AND cost > 50 GROUP BY expense_description;\t----- bird -----\tstudent_club"
  ],
  [
    "Find the full name of members whose t-shirt size is extra large.",
    "SELECT m.first_name, m.last_name FROM member AS m INNER JOIN ( SELECT * FROM member WHERE t_shirt_size = 'X-Large' ) AS t ON m.member_id = t.member_id;\t----- bird -----\tstudent_club"
  ],
  [
    "Calculate the percentage of zip codes that are PO boxes.",
    "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100\t----- bird -----\tstudent_club"
  ],
  [
    "List the name and location of events that underspend its budget.",
    "SELECT e.event_name, z.state FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN zip_code z ON e.location = z.zip_code WHERE b.remaining > 0;\t----- bird -----\tstudent_club"
  ],
  [
    "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.",
    "SELECT e.expense_date, event.event_name AS name_of_events FROM expense AS e INNER JOIN event ON e.link_to_event = event.event_id AND event.spent BETWEEN 50 AND 100 WHERE e.expense_description = 'Pizza';\t----- bird -----\tstudent_club"
  ],
  [
    "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
    "SELECT M.first_name, M.last_name, Maj.major_name AS 'Major of Members' FROM expense E JOIN member M ON (E.link_to_member = M.member_id) JOIN major Maj ON (M.link_to_major = Maj.major_id) WHERE E.cost > 100;\t----- bird -----\tstudent_club"
  ],
  [
    "In the events with more than forty incomes, list the city and country in which the event is happening.",
    "SELECT DISTINCT e.location, z.city, z.county FROM event e JOIN member m ON z.zip_code = m.zip JOIN income i ON m.member_id = i.link_to_member JOIN zip_code z ON m.zip = z.zip_code GROUP BY e.location HAVING SUM(i.amount) > 40;\t----- bird -----\tstudent_club"
  ],
  [
    "Among the members who incurred expenses in more than one event, who paid the most amount?",
    "WITH spending_total AS ( SELECT E.link_to_member, SUM(E.cost) AS total_spent FROM expense E WHERE E.link_to_member IN ( SELECT link_to_member FROM (SELECT link_to_member FROM expense GROUP BY link_to_member HAVING COUNT(DISTINCT expense_id) > 1) AS step_1 ) GROUP BY E.link_to_member ) SELECT DISTINCT M.member_id, M.first_name, M.last_name FROM spending_total ST INNER JOIN member M ON ST.link_to_member = M.member_id ORDER BY ST.total_spent DESC LIMIT 1;\t----- bird -----\tstudent_club"
  ],
  [
    "What is the average amount paid by students in a position other than a member?",
    "SELECT AVG(e.cost) AS average_cost FROM expense e -- correct table to join with budget on link_to_budget JOIN budget b ON e.link_to_budget = b.budget_id WHERE b.event_status != 'Member' -- use single quotes instead of double quotes for string values\t----- bird -----\tstudent_club"
  ],
  [
    "List the name of events with less than average parking cost.",
    "-- Create a temporary table to store the average parking spend WITH avg_parking_spent AS ( SELECT AVG(amount) AS avg_amount FROM budget WHERE category = 'Parking' ) -- List the event_name from events where the amount is less than the avg_amount of parking spent SELECT e.event_name FROM event e JOIN budget b ON e.event_id = b.link_to_event WHERE b.category = 'Parking' AND b.amount < (SELECT avg_amount FROM avg_parking_spent)\t----- bird -----\tstudent_club"
  ],
  [
    "What is the percentage of the cost for the game events?",
    "SELECT CAST(SUM(T2.spent) AS DECIMAL(10, 2)) / COUNT(DISTINCT T1.event_id) * 100 AS percentage_of_cost_for_game_events FROM event T1 JOIN budget T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Game';\t----- bird -----\tstudent_club"
  ],
  [
    "Which budget allowed the most money for water, chips, and cookies?",
    "SELECT category, SUM(amount) AS max_allocation FROM budget WHERE category = 'Food' GROUP BY category;\t----- bird -----\tstudent_club"
  ],
  [
    "List the full name of the top five members who spend the most money in the descending order of spending.",
    "SELECT m.first_name, m.last_name AS \"Full Name\" FROM member m JOIN expense e ON m.member_id = e.link_to_member GROUP BY m.member_id ORDER BY SUM(e.cost) DESC LIMIT 5;\t----- bird -----\tstudent_club"
  ],
  [
    "Give the full name and contact number of members who had to spend more than average on each expense.",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "Calculate the difference in the percentage of members in Maine and Vermont.",
    "SELECT ( ( SUM(CASE WHEN z.state = 'Maine' THEN 1 ELSE 0 END) / COUNT(*) ) * 100 - ( SUM(CASE WHEN z.state = 'Vermont' THEN 1 ELSE 0 END) / COUNT(*) ) *100 ) AS result FROM member m LEFT JOIN zip_code z ON m.zip = z.zip_code;\t----- bird -----\tstudent_club"
  ],
  [
    "What is the major of Garrett Gerke and which department does it belong to?",
    "SELECT M2.major_name, D2.department FROM member AS T1 INNER JOIN major AS M2 ON T1.link_to_major = M2.major_id ORDER BY D2.department ASC;\t----- bird -----\tstudent_club"
  ],
  [
    "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "SELECT CONCAT(m.first_name, ' ', m.last_name) AS Full_name, e.cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.expense_description = \"Water, Veggie tray, supplies\";\t----- bird -----\tstudent_club"
  ],
  [
    "List the last names of students under the Elementary Education major and include their phone numbers.",
    "SELECT m.last_name, m.phone FROM member as m JOIN major AS ma ON m.link_to_major = ma.major_id WHERE ma.major_name='Elementary Education';\t----- bird -----\tstudent_club"
  ],
  [
    "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "error: No SQL found in the input string\t----- bird -----\tstudent_club"
  ],
  [
    "List the event names which were budgeted for the food.",
    "SELECT e.event_name FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Food';\t----- bird -----\tstudent_club"
  ],
  [
    "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "SELECT m.first_name, m.last_name, i.amount FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.date_received = '2019-09-09';\t----- bird -----\tstudent_club"
  ],
  [
    "Which budget category does the expense 'Posters' fall to?",
    "SELECT T1.category FROM budget AS T1 INNER JOIN expense AS T2 ON T1.link_to_event = T2.link_to_budget WHERE T2.expense_description='Posters' AND T2.expense_description IS NOT NULL;\t----- bird -----\tstudent_club"
  ],
  [
    "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "SELECT T1.first_name, T1.last_name, T4.major_name, T4.department FROM member AS T1 INNER JOIN major AS T4 ON T1.link_to_major = T4.major_id WHERE T1.position = 'Secretary';\t----- bird -----\tstudent_club"
  ],
  [
    "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "-- Type: sqlite3 script SELECT SUM(B.spent), E.event_name FROM budget B JOIN event E ON B.link_to_event = E.event_id WHERE B.category = 'Speaker Gifts';\t----- bird -----\tstudent_club"
  ],
  [
    "Where is the hometown of Garrett Girke?",
    "SELECT DISTINCT T2.city FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Garrett' AND T1.last_name = \"Girke\" ORDER BY T2.city ASC;\t----- bird -----\tstudent_club"
  ],
  [
    "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.",
    "SELECT DISTINCT m.first_name, m.last_name, m.position FROM member m INNER JOIN zip_code z ON m.zip = z.zip_code WHERE z.city = 'Lincolnton' AND z.state = 'North Carolina' AND z.zip_code = 28092;\t----- bird -----\tstudent_club"
  ],
  [
    "How many gas stations in CZE has Premium gas?",
    "SELECT COUNT(DISTINCT ChainID) FROM ( SELECT * FROM gasstations WHERE Segment = 'Premium' AND Country = 'CZE' ) AS premium_gas_stations_in_cze\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What is the ratio of costumers who pay in EUR against customers who pay in CZK?",
    "SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN CustomerID END) / NULLIF(COUNT(CASE WHEN Currency = 'CZK' THEN CustomerID END), 0)) AS RATIO FROM customers;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "In 2012, who had the least consumption in LAM?",
    "SELECT c.customerID, y.Consumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE (y.Date BETWEEN '201201' AND '201212') AND c.Segment = 'LAM' GROUP BY c.customerID ORDER BY y.Consumption ASC LIMIT 1;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What was the average monthly consumption of customers in SME for the year 2013?",
    "SELECT (SUM(t2.Consumption)) / 12 AS AverageMonthlyConsumption FROM yearmonth t1 JOIN customers t2 ON t2.`CustomerID` = t1.`CustomerID` WHERE DATE(t1.Date) BETWEEN '201301' AND '201312' GROUP BY t1.CustomerID;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which customers, paying in CZK, consumed the most gas in 2011?",
    "SELECT * FROM ( SELECT c.CustomerID, SUM(y.Consumption) AS TotalConsumption, ROW_NUMBER() OVER (ORDER BY SUM(y.Consumption) DESC) AS Rank FROM ( SELECT CustomerID, Date, Consumption FROM yearmonth WHERE `Date` BETWEEN '201101' AND '201112' ) y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'CZK' GROUP BY c.CustomerID ) as ranked_consumption WHERE Rank = 1;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
    "SELECT COUNT(*) AS NumCustomersKam FROM ( SELECT ym.Date, c.Segment, ym.Consumption FROM yearmonth as ym INNER JOIN customers as c ON ym.`CustomerID` = c.`CustomerID` WHERE (ym.Date BETWEEN '201201' AND '201212' AND c.Segment = 'KAM') AND ym.Consumption < 30000 ) as subquery\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "SELECT czech_consumption - euro_consumption AS difference FROM ( SELECT SUM(consumption) AS czech_consumption, (SUM(CASE WHEN currency = 'CZK' THEN consumption END)) / COUNT(*) AS euro_consumption -- Changed NULLIF to SUM(CASE...)/COUNT() FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE date BETWEEN '2012-01-01' AND '201212-31' ) AS subquery\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which year recorded the most gas use paid in EUR?",
    "SELECT Date_year FROM ( SELECT YEAR(Date) AS Date_year, SUM(Consumption) AS Total_Consumption FROM yearmonth WHERE Currency = 'EUR' GROUP BY YEAR(Date) ) ORDER BY Total_Consumption DESC LIMIT 1;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which segment had the least consumption?",
    "SELECT Segment FROM customers INNER JOIN ( SELECT CustomerID, SUM(Consumption) as Total_consumption FROM yearmonth GROUP BY CustomerID ORDER BY Total_consumption ASC LIMIT 1 ) AS min_cons ON customers.CustomerID = min_cons.CustomerID;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which year recorded the most consumption of gas paid in CZK?",
    "SELECT_type=SQLite.format -- Extract the year from date in consumption table SELECT DISTINCT strftime('%Y', `Date`) AS Year, -- Get max of all gas consumed by Customers in each year SUM(`Consumption`) AS Total_consumption FROM yearmonth T1 WHERE `Currency` = 'CZK' GROUP BY strftime('%Y', `Date`) ORDER BY Total_consumption DESC LIMIT 1;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What was the gas consumption peak month for SME customers in 2013?",
    "SELECT date AS month , MAX(consumption) as max_consumption FROM `yearmonth` WHERE date LIKE '2013%' AND CustomerID IN ( SELECT `CustomerID` FROM customers WHERE Segment = 'SME') GROUP BY date;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "error: No SQL found in the input string\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "SELECT Segment, MAX(PERCENTAGE_INCREASE) AS highest_percentage_increases, MIN(PERCENTAGE_INCREASE) AS lowest_percentage_increases FROM ( SELECT c.`Segment`, (SUM(CASE WHEN LEFT(y.`Date`, 4) = '2013' THEN y.`Consumption` ELSE 0 END) - SUM( CASE WHEN LEFT(y.`Date`, 4) = '2012' AND c.`Segment` IN ('SME', 'LAM','KAM') THEN y.`Consumption` ELSE 0 END )) / NULLIF(SUM(CASE WHEN LEFT(y.`Date`, 4) = '2013' THEN y.`Consumption` ELSE 0 END) - SUM( CASE WHEN LEFT(y.`Date`, 4) = '2012' AND c.`Segment` IN ('SME', 'LAM','KAM') THEN y.`Consumption` ELSE 0 END )) * 100 AS PERCENTAGE_INCREASE FROM yearmonth y INNER JOIN customers c ON y.`CustomerID` = c.`CustomerID` WHERE c.`Currency`= \"EUR\" AND (c.`Segment` IN ('SME', 'LAM','KAM')) GROUP BY c.`Segment`, c.`Currency`) GROUP BY Segment;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "How much did customer 6 consume in total between August and November 2013?",
    "SELECT SUM(T2.`Consumption`) FROM yearmonth T2 WHERE (`Date` BETWEEN '201308' AND '201311') AND `CustomerID`=6 GROUP BY `CustomerID`\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "SELECT COUNT(CASE WHEN country = 'CZE' THEN 1 END) - COUNT(CASE WHEN country = 'SVK' THEN 1 END) AS difference FROM gasstations WHERE Segment = 'Discount';\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "How much more was customer 7 consuming in April 2013 than customer 5?",
    "SELECT T1.Consumption - T2.Consumption AS difference FROM yearmonth AS T1, yearmonth AS T2 WHERE (T1.CustomerID = 7 AND T1.Date LIKE '201304%') AND (T2.CustomerID = 5 AND T2.Date LIKE '201304%');\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "SELECT (Total_CZK_SME - COALESCE(Total_EUR_SME,0)) as Difference FROM ( SELECT COUNT(*) as Total_CZK_SME FROM customers WHERE Segment = 'SME' AND Currency = 'CZK' ) AS subquery1, ( SELECT COUNT(*) as Total_EUR_SME FROM customers WHERE Segment = 'SME' AND Currency = 'EUR' ) AS subquery2;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
    "SELECT T1.CustomerID, T2.Max_Consumption FROM customers AS T1 INNER JOIN ( SELECT T3.CustomerID, MAX(T4.Consumption) AS Max_Consumption FROM yearmonth AS T3 INNER JOIN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') AS T4 ON T3.CustomerID = T4.CustomerID AND STRFTIME('%Y%m', T3.Date) = '201310' GROUP BY T3.CustomerID ) AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR';\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Who among KAM's customers consumed the most? How much did it consume?",
    "SELECT T2.CustomerID, SUM(T1.Amount) AS Consumption_Most FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.Segment = 'KAM' GROUP BY T2.CustomerID;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "How much did the KAM customers consume in total in May 2013?",
    "SELECT SUM(`Consumption`) FROM yearmonth AS T2 JOIN (SELECT * FROM customers WHERE `Segment` = 'KAM') AS T1 ON T1.`CustomerID` = T2.`CustomerID` WHERE `Date` LIKE '%201305%'\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "How many percent of LAM customer consumed more than 46.73?",
    "SELECT (Number_of_LAM_consumed_above_4673 / Total_LAM_customers) * 100 AS percentage_consumed_above_4673 FROM ( SELECT COUNT(y.`CustomerID`) AS Total_LAM_customers, SUM(CASE WHEN y.`Consumption` > 46.73 THEN 1 ELSE 0 END) AS Number_of_LAM_consumed_above_4673 FROM yearmonth y JOIN customers c ON y.`CustomerID` = c.`CustomerID` WHERE c.Segment = 'LAM' )\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
    "SELECT t2.Country, COUNT(t1.GasStationID) as TotalValueForMoneyGasStations FROM ( SELECT GasStationID FROM gasstations WHERE Segment = 'Value for money' ) AS t3 JOIN gasstations AS t1 ON t3.GasStationID = t1.GasStationID JOIN ( SELECT DISTINCT Country FROM gasstations ) AS t2 ON t1.Country = t2.Country GROUP BY t2.Country;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What percentage of KAM customers pay in euros?",
    "SELECT ( SELECT COUNT(*) FROM customers WHERE Segment = 'KAM' AND Currency = 'EUR' ) / ( SELECT COUNT(*) FROM customers WHERE Segment = 'KAM' ) * 100 AS percentage_of_kam_in_euro;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "In February 2012, what percentage of customers consumed more than 528.3?",
    "SELECT 100 * SUM(CASE WHEN Consumption > 528.3 THEN 1 ELSE 0 END) / COUNT(*) AS Percentage FROM yearmonth WHERE Date = '201202' AND Consumption IS NOT NULL;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What percentage of Slovakian gas stations are premium?",
    "SELECT CAST(SUM(CASE WHEN T2.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.ChainID) FROM gasstations AS T2 WHERE Country='SVK'\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which client ID consumed the most in September 2013?",
    "SELECT `CustomerID` FROM yearmonth WHERE yearmonth.`Date` = '201309' ORDER BY `Consumption` DESC LIMIT 1;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which client segment consumed the least in September 2013?",
    "SELECT T2.`Segment`, MIN(T1.`Consumption`) AS Min_Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.Date LIKE '201309%' GROUP BY T2.`Segment` ORDER BY Min_Consumption ASC;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which SME customer consumed the least in June 2012?",
    "SELECT T1.`CustomerID` FROM `yearmonth` AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`Segment` = 'SME' AND T1.Date IN ('201206') ORDER BY T1.Consumption ASC LIMIT 1;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What is the highest monthly consumption in the year 2012?",
    "TYPE: SQLite SELECT MAX(T.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.Date LIKE '2012%'\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What is the biggest monthly consumption of the customers who use euro as their currency?",
    "SELECT Y.`Date`, SUM(Y.`Consumption`) / 12 AS monthly_consumption FROM customers AS C JOIN yearmonth AS Y ON C.`CustomerID` = Y.`CustomerID` WHERE C.`Currency` = 'EUR' GROUP BY Y.`Date` ORDER BY monthly_consumption DESC LIMIT 1\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Please list the product description of the products consumed in September, 2013.",
    "SELECT T1.`Description` FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.`ProductID` = T2.`ProductID` WHERE STRFTIME('%Y-%m', T2.`Date`) = '201309'\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "SELECT distinct g.Country FROM gasstations AS g JOIN transactions_1k ON g.GasStationID = transactions_1k.GasStationID WHERE Date LIKE '201306%'; ------------------------------------------------------- script type: sqlite\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Please list the chains of the gas stations with transactions in euro.",
    "-- Please list the chains of gas stations with transactions in euro. SELECT DISTINCT gs.ChainID FROM gasstations AS gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Please list the product description of the products bought in transactions in euro.",
    "SELECT t.`ProductID`, p.`Description` FROM transactions_1k AS t INNER JOIN products AS p ON t.`ProductID` = p.`ProductID` WHERE t.`Price` / NULLIF(t.`Amount`, 0) * 100 <= 1 AND p.`Currency` = 'EUR';\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What is the average total price of the transactions taken place in January, 2012?",
    "SELECT round(AVG(T2.`Price`)) AS average_price FROM yearmonth as T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID AND T1.Date LIKE '2012-01%' WHERE T2.Price IS NOT NULL;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "SELECT COUNT(t1.`CustomerID`) FROM ( SELECT ym2.`CustomerID`, CONCAT(yr.Y, '-', yr.MO) as mm, SUM(ym.`Consumption`) OVER (PARTITION BY ym2.`CustomerID` ORDER BY ym.`Date` ASC) AS monthly_consumption, c.`Currency` FROM yearmonth ym JOIN customers c ON ym.`CustomerID` = c.`CustomerID` JOIN ( SELECT DISTINCT `Date`, DATEPART('year', `Date`) as Y, DATENAME('month', `Date`) as MO ) yr ON substring(ym.`Date`, 1, instr(ym.`Date`, '-') - 1) = CONCAT(yr.Y, '-') ) t1 WHERE t1.monthly_consumption > 1000 AND c.`Currency` = 'EUR';\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE';\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "SELECT DISTINCT `Time` FROM transactions_1k WHERE `GasStationID` IN ( SELECT `GasStationID` FROM gasstations WHERE `ChainID` = 11)\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?",
    "SELECT COUNT(T2.TransactionID) FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID AND T1.Country='CZE' WHERE T2.Price > 1000;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "SELECT COUNT(*) FROM ( SELECT T2.GasStationID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Country = 'CZE' ) AS temp_table;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
    "SELECT COALESCE( (SELECT SUM(T1.Price)/COUNT(*) FROM transactions_1k AS T1 Inner Join gasstations AS T2 ON T1.GasStationID = T2.GasStationID Where T2.Country='CZE' AND T1.Price IS not Null),0)\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "For the customers who paid in the euro, what is their average total price of the transactions?",
    "SELECT (COALESCE(SUM(T3.Amount - T4.Price),0)/ COUNT(DISTINCT T2.Currency)) AS AVG_Price FROM yearmonth AS T1 LEFT JOIN customers AS T2 ON t1.`CustomerID` = T2.`CustomerID` LEFT JOIN transactions_1k AS T3 ON T3.CustomerID = T2.CustomerID LEFT JOIN transactions_1k AS T4 ON T4.CustomerID = T2.CustomerID WHERE `Currency` = 'EUR'\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which customer paid the most in 2012/8/25?",
    "-- Which customer paid the most in 2012/8/25? SELECT c.CustomerID, MaxConsumption = (SELECT MAX(y.Consumption) FROM yearmonth y WHERE y.Date = '2012-08-25 ') FROM customers c LEFT JOIN ( SELECT y.CustomerID, SUM(y.Consumption) AS MaxConsumption FROM yearmonth y GROUP BY y.CustomerID ) t1 ON c.CustomerID = t1.CustomerID; -- Who is the customer who paid the most in 2012/8/25? SELECT t3.Date, t3.MaxConsumer as \"Max Consumer\", c.CustomerName as CustomerID FROM ( SELECT y.Date, SUM(y.Consumption) AS MaxConsumer, y.CustomerID FROM yearmonth y WHERE y.Date LIKE '2012-08%' GROUP BY y.CustomerID ) t2 JOIN customers c ON t2.CustomerID = c.CustomerID AND c.CustomerType='Max' ORDER BY t2.MaxConsumer DESC LIMIT 1;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which country's gas station had the first paid cusomer in 2012/8/25?",
    "error: No SQL found in the input string\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "SELECT T1. 'Currency' FROM customers AS T1 WHERE `CustomerID` IN( SELECT T3.`CustomerID` FROM transactions_1k AS T3 )\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What segment did the customer have at 2012/8/23 21:20:00?",
    "SELECT C.Segment ## Corrected Segment selection in Question # Corrected SQL with segment selection based on question FROM customers C JOIN yearmonth Y ON C.CustomerID = Y.CustomerID WHERE cast(Y.Date AS DATE) = '2012-08-23' AND SUBSTR(Y.Time,1,5)||':'||SUBSTR(Y.Time,6,2)=='21:20'\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "How many transactions were paid in EUR in the morning of 2012/8/26?",
    "SELECT COUNT(*) FROM transactions_1k t JOIN yearmonth ym ON t.CustomerID = ym.CustomerID WHERE SUBSTR(t.Time, 4,2) < '13' AND ym.`Date` = '2012-08-26' AND t.Currency = 'EUR'; -- execution result: 9\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "For the earliest customer, what segment did he/she have?",
    "SELECT T1.`Segment` FROM customers AS T1 INNER JOIN ( SELECT `CustomerID` FROM yearmonth GROUP BY `CustomerID` , `Date` HAVING MIN(`Date`) = ( SELECT MIN(`Date`) FROM yearmonth ) ) AS T2 ON T2.`CustomerID` = T1.`CustomerID`;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "For the deal happened at 2012/8/24 12:42:00, which country was it?",
    "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.`Date` = '2012-08-24' AND T2.Time = '12:42:00'\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
    "SELECT T1.ProductID FROM transactions_1k AS T1 JOIN transactions_1k AS T2 ON T1.TransactionID = T2.TransactionID AND T1.`Date` = '2012-08-23' AND T1.Time = '21:20:00' WHERE T2.time = '21:20:00';\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?",
    "SELECT ym.Consumption, t.Date, SUM(p.Amount) AS TotalAmount FROM yearmonth ym INNER JOIN transactions_1k t ON ym.CustomerID = t.CustomerID AND ym.Date = t.Date GROUP BY ym.CustomerID, ym.Date HAVING t.Amount = 124.05 AND t.Date = '2012-08-24'\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "-- For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE? SELECT COUNT(T1.`TransactionID`) FROM transactions_1k AS T1 JOIN gasstations AS T2 ON (gastype(T1.`Time`, unixepoch(), 'iso')) = T2.Country WHERE T1.`Date` = '2012-08-26' AND time(T1.Time) BETWEEN '08:00:00' AND '09:00:00';\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?",
    "SELECT C.`Currency` FROM customers AS C JOIN ( SELECT `CustomerID` FROM yearmonth WHERE DATE LIKE '%201306%' AND Consumption = 214582.17 ) AS Y ON C.`CustomerID` = Y.`CustomerID`;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which country was the card owner of No.667467 in?",
    "SELECT DISTINCT t2.Country FROM transactions_1k AS t1 INNER JOIN gasstations AS t2 ON t1.GasStationID = t2.GasStationID WHERE t1.CardID = 667467;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "SELECT T1.`Segment` FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` LIMIT 1\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What is the percentage of the customers who used EUR in 2012/8/25?",
    "SELECT (SUM(CASE WHEN c.`Currency` = 'EUR' THEN 1 ELSE 0 END) / COUNT(DISTINCT ym.`CustomerID`)) * 100.0 AS percentile FROM yearmonth ym JOIN customers c ON ym.`CustomerID` = c.`CustomerID` WHERE DATE LIKE '%2012-08-25%';\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "SELECT (consumption_2012 - consumption_2013) / consumption_2012 AS consumption_decrease_rate FROM ( SELECT y.`CustomerID`, SUM(y.`Consumption`) AS consumption_2012, SUM(CASE WHEN y2.`Date` LIKE '%-13%' THEN y2.`Consumption` ELSE NULL END) AS consumption_2013 FROM yearmonth y LEFT JOIN yearmonth y2 ON y2.`CustomerID` = y.`CustomerID` AND DATE(y2.`Date`) BETWEEN '2013-01-01' AND '2013-12-31' WHERE DATE(y.`Date`) IN ('1970-01-01', '1969-12-31') GROUP BY y.`CustomerID` ) sub WHERE `CustomerID` = %subquestion1_result% AND consumption_2012 != 0;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which gas station has the highest amount of revenue?",
    "CREATE TABLE IF NOT EXISTS transactions_10k ( TransactionID INTEGER, Date TEXT, Time TEXT, CustomerID INTEGER, CardID TEXT, GasStationID INTEGER, ProductID INTEGER, Amount REAL, Price REAL ); INSERT OR IGNORE INTO customers (CustomerID, Segment, Currency) SELECT 1 AS (CustomerID.'), 'LAM' AS (Segment.), 'EUR' AS (Currency) UNION ALL SELECT 2 AS (CustomerID.', 'SME' AS (Segment.), -- modify value for 'SME' 'CZK' AS (Currency.) UNION ALL select CAST(ROW_NUMBER() OVER () as integer) FROM sqlite_master; INSERT OR IGNORE INTO gasstations ( GasStationID, ChainID, Country, Segment) SELECT ROW_NUMBER() OVER (), 10100101111, -- modify value 'CZE' FROM ( SELECT * UNION ALL SELECT *)-- duplicate query to populate chain id SELECT ROW_NUMBER() AS GasStationID , -- change GasStationID column name as ROW_NUMBER for later join and use. \"Ahold\" AS ChainID, \"CZE\" AS Country, -- modify value \"Discount\" AS Segment INSERT OR REPLACE INTO yearmonth ( CustomerID, Date, Consumption) SELECT CAST(ROW_NUMBER() over() AS integer), 0 , NULL FROM (SELECT * UNION ALL SELECT *)-- duplicate query to populate column values SELECT t4.GasStationID, -- modify value name here SUM(T1.Amount) * COUNT(T1.TransactionID) AS Revenue FROM transactions_10k AS T1--, T2,T3--,T4 JOIN yearmonth T6 ON T1.`CustomerID`=T6.CustomerID -- add join with table yearmont, if not in transaction table use WHERE condition instead LEFT JOIN gasstations as T4 ON t4.GasStationID = T4.Row_number -- for inner join with existing column; change Row_number to your desired table name --use T1.ProductID= T2.ProductID instead, which joins to the correct column of description in table transactioin_tk LEFT JOIN products AS T3 ON T1.`ProductID` = T3.`Description` -- replace column names and correct any spelling errors with correct ones, also change Row_number to ProductID GROUP BY T4.GasStationID ,T4.gasstaion_id, -- add this line ORDER BY Revenue DESC; -- no need to reorder again as you already selected it from table\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What is the percentage of \"premium\" against the overall segment in \"SVK\"?",
    "SELECT ROUND((Premium.Transactions / Total.Transactions) * 100, 0) AS Percentage FROM ( SELECT COUNT(T1.GasStationID) AS Transactions FROM gasstations AS T1 WHERE T1.Country = 'SVK' ) Total, ( SELECT COUNT(T1.GasStationID) AS Transactions FROM gasstations AS T1 WHERE T1.Country = 'SVK' AND T1.Segment = 'Premium' ) Premium;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "SELECT (SELECT SUM(`Amount`) FROM `transactions_1k` WHERE `CustomerID` = '38508' AND (`Date` LIKE '%201201%' OR `Amount` IS NOT NULL) AND `Amount` IS NOT NULL ) AS spending_january_2012, (SELECT SUM(CASE WHEN `Amount` IS NOT NULL THEN `Amount` ELSE 0 END) FROM `transactions_1k` WHERE `CustomerID` = '38508' AND (`Date` LIKE '%201201%' OR `Amount` IS NOT NULL) ) AS total_spending\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which are the top five best selling products? Please state the full name of them.",
    "SELECT P.Description AS FullName, T.TotalSales FROM ( SELECT t.ProductID, p.Description, SUM(t.Amount) AS TotalSales FROM transactions_1k t INNER JOIN products p ON t.ProductID = p.ProductID GROUP BY t.ProductID ) AS T INNER JOIN products P ON T.ProductID = P.ProductID ORDER BY T.TotalSales DESC LIMIT 5;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "-- Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used? SELECT c.`Currency` AS TopCustomerCurrency, t.`AveragePricePerItem`, cc.`TopSpendingCustomerName` FROM ( SELECT T1.CustomerID AS TopSpendingCustomerID, AVG(T1.Price / T1.Amount) AS AveragePricePerItem FROM transactions_1k T1 GROUP BY T1.CustomerID ORDER BY AveragePricePerItem DESC LIMIT 1 ) ct JOIN customers c ON ct.TopSpendingCustomerID = c.CustomerID JOIN ( SELECT t2.CustomerID AS TopSpendingCustomerName, MAX(t2.Consumption) AS ConsumptionMax FROM yearmonth t2 JOIN customers c ON t2.CustomerID = c.CustomerID GROUP BY t2.CustomerID, c.Segment ORDER BY MaxConsumption DESC LIMIT 1 ) cc ON ct.TopSpendingCustomerID = cc.TopSpendingCustomerName;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "Which country had the gas station that sold the most expensive product id No.2 for one unit?",
    "SELECT gs.Country FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE t.ProductID = 2 AND (t.Amount = 1 OR t.Price = (SELECT MAX(Price) FROM transactions_1k WHERE ProductID = 2)) GROUP BY gs.Country ORDER BY AVG(t.Price) DESC LIMIT 1;\t----- bird -----\tdebit_card_specializing"
  ],
  [
    "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "SELECT T3.`Consumption` FROM transactions_1k AS T1 JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` JOIN customers AS T3 ON T2.`CustomerID` = T3.`CustomerID` WHERE -- Filter transactions for August 2012 T1.`Date` LIKE '201208%' AND -- Check price per unit of product id No.5 (T1.`Price` / T1.`Amount`) > 29.00 AND -- Check if ProductID is not in the list of products with high price per unit T1.`ProductID` NOT IN ( SELECT T4.`ProductID` FROM products AS T4 WHERE (T4.Price / T4.Amount) > 29.00 ) GROUP BY T3.CustomerID;\t----- bird -----\tdebit_card_specializing"
  ]
]